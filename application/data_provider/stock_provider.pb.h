// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stock_provider.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_stock_5fprovider_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_stock_5fprovider_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_stock_5fprovider_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_stock_5fprovider_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[37]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stock_5fprovider_2eproto;
namespace stock_api {
class Balance;
struct BalanceDefaultTypeInternal;
extern BalanceDefaultTypeInternal _Balance_default_instance_;
class Bool;
struct BoolDefaultTypeInternal;
extern BoolDefaultTypeInternal _Bool_default_instance_;
class BrokerLog;
struct BrokerLogDefaultTypeInternal;
extern BrokerLogDefaultTypeInternal _BrokerLog_default_instance_;
class BrokerLog_BuyBrokerEntry_DoNotUse;
struct BrokerLog_BuyBrokerEntry_DoNotUseDefaultTypeInternal;
extern BrokerLog_BuyBrokerEntry_DoNotUseDefaultTypeInternal _BrokerLog_BuyBrokerEntry_DoNotUse_default_instance_;
class BrokerLog_SellBrokerEntry_DoNotUse;
struct BrokerLog_SellBrokerEntry_DoNotUseDefaultTypeInternal;
extern BrokerLog_SellBrokerEntry_DoNotUseDefaultTypeInternal _BrokerLog_SellBrokerEntry_DoNotUse_default_instance_;
class BrokerMinuteTick;
struct BrokerMinuteTickDefaultTypeInternal;
extern BrokerMinuteTickDefaultTypeInternal _BrokerMinuteTick_default_instance_;
class BrokerMinuteTickList;
struct BrokerMinuteTickListDefaultTypeInternal;
extern BrokerMinuteTickListDefaultTypeInternal _BrokerMinuteTickList_default_instance_;
class BrokerMinuteTick_BrokersMapEntry_DoNotUse;
struct BrokerMinuteTick_BrokersMapEntry_DoNotUseDefaultTypeInternal;
extern BrokerMinuteTick_BrokersMapEntry_DoNotUseDefaultTypeInternal _BrokerMinuteTick_BrokersMapEntry_DoNotUse_default_instance_;
class BrokerStat;
struct BrokerStatDefaultTypeInternal;
extern BrokerStatDefaultTypeInternal _BrokerStat_default_instance_;
class BrokerSummary;
struct BrokerSummaryDefaultTypeInternal;
extern BrokerSummaryDefaultTypeInternal _BrokerSummary_default_instance_;
class CodeList;
struct CodeListDefaultTypeInternal;
extern CodeListDefaultTypeInternal _CodeList_default_instance_;
class CompanyName;
struct CompanyNameDefaultTypeInternal;
extern CompanyNameDefaultTypeInternal _CompanyName_default_instance_;
class CybosBidAskTickData;
struct CybosBidAskTickDataDefaultTypeInternal;
extern CybosBidAskTickDataDefaultTypeInternal _CybosBidAskTickData_default_instance_;
class CybosDayData;
struct CybosDayDataDefaultTypeInternal;
extern CybosDayDataDefaultTypeInternal _CybosDayData_default_instance_;
class CybosDayDatas;
struct CybosDayDatasDefaultTypeInternal;
extern CybosDayDatasDefaultTypeInternal _CybosDayDatas_default_instance_;
class CybosOrderResult;
struct CybosOrderResultDefaultTypeInternal;
extern CybosOrderResultDefaultTypeInternal _CybosOrderResult_default_instance_;
class CybosOrderReturn;
struct CybosOrderReturnDefaultTypeInternal;
extern CybosOrderReturnDefaultTypeInternal _CybosOrderReturn_default_instance_;
class CybosStockAlarm;
struct CybosStockAlarmDefaultTypeInternal;
extern CybosStockAlarmDefaultTypeInternal _CybosStockAlarm_default_instance_;
class CybosSubjectTickData;
struct CybosSubjectTickDataDefaultTypeInternal;
extern CybosSubjectTickDataDefaultTypeInternal _CybosSubjectTickData_default_instance_;
class CybosTickData;
struct CybosTickDataDefaultTypeInternal;
extern CybosTickDataDefaultTypeInternal _CybosTickData_default_instance_;
class CybosTickDatas;
struct CybosTickDatasDefaultTypeInternal;
extern CybosTickDatasDefaultTypeInternal _CybosTickDatas_default_instance_;
class ListType;
struct ListTypeDefaultTypeInternal;
extern ListTypeDefaultTypeInternal _ListType_default_instance_;
class OrderMsg;
struct OrderMsgDefaultTypeInternal;
extern OrderMsgDefaultTypeInternal _OrderMsg_default_instance_;
class OrderResult;
struct OrderResultDefaultTypeInternal;
extern OrderResultDefaultTypeInternal _OrderResult_default_instance_;
class PastMinuteQuery;
struct PastMinuteQueryDefaultTypeInternal;
extern PastMinuteQueryDefaultTypeInternal _PastMinuteQuery_default_instance_;
class Prices;
struct PricesDefaultTypeInternal;
extern PricesDefaultTypeInternal _Prices_default_instance_;
class Report;
struct ReportDefaultTypeInternal;
extern ReportDefaultTypeInternal _Report_default_instance_;
class SimulationMsg;
struct SimulationMsgDefaultTypeInternal;
extern SimulationMsgDefaultTypeInternal _SimulationMsg_default_instance_;
class SimulationOperation;
struct SimulationOperationDefaultTypeInternal;
extern SimulationOperationDefaultTypeInternal _SimulationOperation_default_instance_;
class SimulationStatus;
struct SimulationStatusDefaultTypeInternal;
extern SimulationStatusDefaultTypeInternal _SimulationStatus_default_instance_;
class StockCodeQuery;
struct StockCodeQueryDefaultTypeInternal;
extern StockCodeQueryDefaultTypeInternal _StockCodeQuery_default_instance_;
class StockQuery;
struct StockQueryDefaultTypeInternal;
extern StockQueryDefaultTypeInternal _StockQuery_default_instance_;
class TodayTopOption;
struct TodayTopOptionDefaultTypeInternal;
extern TodayTopOptionDefaultTypeInternal _TodayTopOption_default_instance_;
class TopList;
struct TopListDefaultTypeInternal;
extern TopListDefaultTypeInternal _TopList_default_instance_;
class TradeMsg;
struct TradeMsgDefaultTypeInternal;
extern TradeMsgDefaultTypeInternal _TradeMsg_default_instance_;
class ViPriceInfo;
struct ViPriceInfoDefaultTypeInternal;
extern ViPriceInfoDefaultTypeInternal _ViPriceInfo_default_instance_;
class YearHighInfo;
struct YearHighInfoDefaultTypeInternal;
extern YearHighInfoDefaultTypeInternal _YearHighInfo_default_instance_;
}  // namespace stock_api
PROTOBUF_NAMESPACE_OPEN
template<> ::stock_api::Balance* Arena::CreateMaybeMessage<::stock_api::Balance>(Arena*);
template<> ::stock_api::Bool* Arena::CreateMaybeMessage<::stock_api::Bool>(Arena*);
template<> ::stock_api::BrokerLog* Arena::CreateMaybeMessage<::stock_api::BrokerLog>(Arena*);
template<> ::stock_api::BrokerLog_BuyBrokerEntry_DoNotUse* Arena::CreateMaybeMessage<::stock_api::BrokerLog_BuyBrokerEntry_DoNotUse>(Arena*);
template<> ::stock_api::BrokerLog_SellBrokerEntry_DoNotUse* Arena::CreateMaybeMessage<::stock_api::BrokerLog_SellBrokerEntry_DoNotUse>(Arena*);
template<> ::stock_api::BrokerMinuteTick* Arena::CreateMaybeMessage<::stock_api::BrokerMinuteTick>(Arena*);
template<> ::stock_api::BrokerMinuteTickList* Arena::CreateMaybeMessage<::stock_api::BrokerMinuteTickList>(Arena*);
template<> ::stock_api::BrokerMinuteTick_BrokersMapEntry_DoNotUse* Arena::CreateMaybeMessage<::stock_api::BrokerMinuteTick_BrokersMapEntry_DoNotUse>(Arena*);
template<> ::stock_api::BrokerStat* Arena::CreateMaybeMessage<::stock_api::BrokerStat>(Arena*);
template<> ::stock_api::BrokerSummary* Arena::CreateMaybeMessage<::stock_api::BrokerSummary>(Arena*);
template<> ::stock_api::CodeList* Arena::CreateMaybeMessage<::stock_api::CodeList>(Arena*);
template<> ::stock_api::CompanyName* Arena::CreateMaybeMessage<::stock_api::CompanyName>(Arena*);
template<> ::stock_api::CybosBidAskTickData* Arena::CreateMaybeMessage<::stock_api::CybosBidAskTickData>(Arena*);
template<> ::stock_api::CybosDayData* Arena::CreateMaybeMessage<::stock_api::CybosDayData>(Arena*);
template<> ::stock_api::CybosDayDatas* Arena::CreateMaybeMessage<::stock_api::CybosDayDatas>(Arena*);
template<> ::stock_api::CybosOrderResult* Arena::CreateMaybeMessage<::stock_api::CybosOrderResult>(Arena*);
template<> ::stock_api::CybosOrderReturn* Arena::CreateMaybeMessage<::stock_api::CybosOrderReturn>(Arena*);
template<> ::stock_api::CybosStockAlarm* Arena::CreateMaybeMessage<::stock_api::CybosStockAlarm>(Arena*);
template<> ::stock_api::CybosSubjectTickData* Arena::CreateMaybeMessage<::stock_api::CybosSubjectTickData>(Arena*);
template<> ::stock_api::CybosTickData* Arena::CreateMaybeMessage<::stock_api::CybosTickData>(Arena*);
template<> ::stock_api::CybosTickDatas* Arena::CreateMaybeMessage<::stock_api::CybosTickDatas>(Arena*);
template<> ::stock_api::ListType* Arena::CreateMaybeMessage<::stock_api::ListType>(Arena*);
template<> ::stock_api::OrderMsg* Arena::CreateMaybeMessage<::stock_api::OrderMsg>(Arena*);
template<> ::stock_api::OrderResult* Arena::CreateMaybeMessage<::stock_api::OrderResult>(Arena*);
template<> ::stock_api::PastMinuteQuery* Arena::CreateMaybeMessage<::stock_api::PastMinuteQuery>(Arena*);
template<> ::stock_api::Prices* Arena::CreateMaybeMessage<::stock_api::Prices>(Arena*);
template<> ::stock_api::Report* Arena::CreateMaybeMessage<::stock_api::Report>(Arena*);
template<> ::stock_api::SimulationMsg* Arena::CreateMaybeMessage<::stock_api::SimulationMsg>(Arena*);
template<> ::stock_api::SimulationOperation* Arena::CreateMaybeMessage<::stock_api::SimulationOperation>(Arena*);
template<> ::stock_api::SimulationStatus* Arena::CreateMaybeMessage<::stock_api::SimulationStatus>(Arena*);
template<> ::stock_api::StockCodeQuery* Arena::CreateMaybeMessage<::stock_api::StockCodeQuery>(Arena*);
template<> ::stock_api::StockQuery* Arena::CreateMaybeMessage<::stock_api::StockQuery>(Arena*);
template<> ::stock_api::TodayTopOption* Arena::CreateMaybeMessage<::stock_api::TodayTopOption>(Arena*);
template<> ::stock_api::TopList* Arena::CreateMaybeMessage<::stock_api::TopList>(Arena*);
template<> ::stock_api::TradeMsg* Arena::CreateMaybeMessage<::stock_api::TradeMsg>(Arena*);
template<> ::stock_api::ViPriceInfo* Arena::CreateMaybeMessage<::stock_api::ViPriceInfo>(Arena*);
template<> ::stock_api::YearHighInfo* Arena::CreateMaybeMessage<::stock_api::YearHighInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace stock_api {

enum SimulationMsgType : int {
  MSG_TICK = 0,
  MSG_BIDASK = 1,
  MSG_SUBJECT = 2,
  MSG_ALARM = 3,
  SimulationMsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SimulationMsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SimulationMsgType_IsValid(int value);
constexpr SimulationMsgType SimulationMsgType_MIN = MSG_TICK;
constexpr SimulationMsgType SimulationMsgType_MAX = MSG_ALARM;
constexpr int SimulationMsgType_ARRAYSIZE = SimulationMsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SimulationMsgType_descriptor();
template<typename T>
inline const std::string& SimulationMsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SimulationMsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SimulationMsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SimulationMsgType_descriptor(), enum_t_value);
}
inline bool SimulationMsgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SimulationMsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SimulationMsgType>(
    SimulationMsgType_descriptor(), name, value);
}
enum TodayTopSelection : int {
  TOP_BY_RATIO = 0,
  TOP_BY_MOMENTUM = 1,
  TOP_BY_AMOUNT = 2,
  TodayTopSelection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TodayTopSelection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TodayTopSelection_IsValid(int value);
constexpr TodayTopSelection TodayTopSelection_MIN = TOP_BY_RATIO;
constexpr TodayTopSelection TodayTopSelection_MAX = TOP_BY_AMOUNT;
constexpr int TodayTopSelection_ARRAYSIZE = TodayTopSelection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TodayTopSelection_descriptor();
template<typename T>
inline const std::string& TodayTopSelection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TodayTopSelection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TodayTopSelection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TodayTopSelection_descriptor(), enum_t_value);
}
inline bool TodayTopSelection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TodayTopSelection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TodayTopSelection>(
    TodayTopSelection_descriptor(), name, value);
}
enum OrderStatusFlag : int {
  STATUS_UNKNOWN = 0,
  STATUS_REGISTERED = 1,
  STATUS_TRADING = 2,
  STATUS_TRADED = 49,
  STATUS_CONFIRM = 50,
  STATUS_DENIED = 51,
  STATUS_SUBMITTED = 52,
  OrderStatusFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OrderStatusFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OrderStatusFlag_IsValid(int value);
constexpr OrderStatusFlag OrderStatusFlag_MIN = STATUS_UNKNOWN;
constexpr OrderStatusFlag OrderStatusFlag_MAX = STATUS_SUBMITTED;
constexpr int OrderStatusFlag_ARRAYSIZE = OrderStatusFlag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderStatusFlag_descriptor();
template<typename T>
inline const std::string& OrderStatusFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrderStatusFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrderStatusFlag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrderStatusFlag_descriptor(), enum_t_value);
}
inline bool OrderStatusFlag_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OrderStatusFlag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderStatusFlag>(
    OrderStatusFlag_descriptor(), name, value);
}
enum OrderMethod : int {
  TRADE_UNKNOWN = 0,
  TRADE_IMMEDIATELY = 1,
  TRADE_ON_BID_ASK_MEET = 2,
  TRADE_ON_PRICE = 3,
  OrderMethod_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OrderMethod_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OrderMethod_IsValid(int value);
constexpr OrderMethod OrderMethod_MIN = TRADE_UNKNOWN;
constexpr OrderMethod OrderMethod_MAX = TRADE_ON_PRICE;
constexpr int OrderMethod_ARRAYSIZE = OrderMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderMethod_descriptor();
template<typename T>
inline const std::string& OrderMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrderMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrderMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrderMethod_descriptor(), enum_t_value);
}
inline bool OrderMethod_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OrderMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderMethod>(
    OrderMethod_descriptor(), name, value);
}
enum OrderType : int {
  NEW = 0,
  MODIFY = 1,
  CANCEL = 2,
  OrderType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OrderType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OrderType_IsValid(int value);
constexpr OrderType OrderType_MIN = NEW;
constexpr OrderType OrderType_MAX = CANCEL;
constexpr int OrderType_ARRAYSIZE = OrderType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderType_descriptor();
template<typename T>
inline const std::string& OrderType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrderType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrderType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrderType_descriptor(), enum_t_value);
}
inline bool OrderType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OrderType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderType>(
    OrderType_descriptor(), name, value);
}
enum TradeMsgType : int {
  UNKNOWN = 0,
  ORDER_MSG = 1,
  REQ_ALL_ORDER = 2,
  GET_BALANCE = 3,
  TradeMsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TradeMsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TradeMsgType_IsValid(int value);
constexpr TradeMsgType TradeMsgType_MIN = UNKNOWN;
constexpr TradeMsgType TradeMsgType_MAX = GET_BALANCE;
constexpr int TradeMsgType_ARRAYSIZE = TradeMsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TradeMsgType_descriptor();
template<typename T>
inline const std::string& TradeMsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TradeMsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TradeMsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TradeMsgType_descriptor(), enum_t_value);
}
inline bool TradeMsgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TradeMsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TradeMsgType>(
    TradeMsgType_descriptor(), name, value);
}
// ===================================================================

class StockCodeQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.StockCodeQuery) */ {
 public:
  inline StockCodeQuery() : StockCodeQuery(nullptr) {}
  ~StockCodeQuery() override;
  explicit constexpr StockCodeQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StockCodeQuery(const StockCodeQuery& from);
  StockCodeQuery(StockCodeQuery&& from) noexcept
    : StockCodeQuery() {
    *this = ::std::move(from);
  }

  inline StockCodeQuery& operator=(const StockCodeQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline StockCodeQuery& operator=(StockCodeQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StockCodeQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const StockCodeQuery* internal_default_instance() {
    return reinterpret_cast<const StockCodeQuery*>(
               &_StockCodeQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StockCodeQuery& a, StockCodeQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(StockCodeQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StockCodeQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StockCodeQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StockCodeQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StockCodeQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StockCodeQuery& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockCodeQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.StockCodeQuery";
  }
  protected:
  explicit StockCodeQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // @@protoc_insertion_point(class_scope:stock_api.StockCodeQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class CodeList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.CodeList) */ {
 public:
  inline CodeList() : CodeList(nullptr) {}
  ~CodeList() override;
  explicit constexpr CodeList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CodeList(const CodeList& from);
  CodeList(CodeList&& from) noexcept
    : CodeList() {
    *this = ::std::move(from);
  }

  inline CodeList& operator=(const CodeList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CodeList& operator=(CodeList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CodeList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CodeList* internal_default_instance() {
    return reinterpret_cast<const CodeList*>(
               &_CodeList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CodeList& a, CodeList& b) {
    a.Swap(&b);
  }
  inline void Swap(CodeList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CodeList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CodeList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CodeList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CodeList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CodeList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.CodeList";
  }
  protected:
  explicit CodeList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodelistFieldNumber = 1,
  };
  // repeated string codelist = 1;
  int codelist_size() const;
  private:
  int _internal_codelist_size() const;
  public:
  void clear_codelist();
  const std::string& codelist(int index) const;
  std::string* mutable_codelist(int index);
  void set_codelist(int index, const std::string& value);
  void set_codelist(int index, std::string&& value);
  void set_codelist(int index, const char* value);
  void set_codelist(int index, const char* value, size_t size);
  std::string* add_codelist();
  void add_codelist(const std::string& value);
  void add_codelist(std::string&& value);
  void add_codelist(const char* value);
  void add_codelist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& codelist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_codelist();
  private:
  const std::string& _internal_codelist(int index) const;
  std::string* _internal_add_codelist();
  public:

  // @@protoc_insertion_point(class_scope:stock_api.CodeList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> codelist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class ViPriceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.ViPriceInfo) */ {
 public:
  inline ViPriceInfo() : ViPriceInfo(nullptr) {}
  ~ViPriceInfo() override;
  explicit constexpr ViPriceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViPriceInfo(const ViPriceInfo& from);
  ViPriceInfo(ViPriceInfo&& from) noexcept
    : ViPriceInfo() {
    *this = ::std::move(from);
  }

  inline ViPriceInfo& operator=(const ViPriceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViPriceInfo& operator=(ViPriceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViPriceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViPriceInfo* internal_default_instance() {
    return reinterpret_cast<const ViPriceInfo*>(
               &_ViPriceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ViPriceInfo& a, ViPriceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ViPriceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViPriceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViPriceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViPriceInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViPriceInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ViPriceInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViPriceInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.ViPriceInfo";
  }
  protected:
  explicit ViPriceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated int32 price = 2;
  int price_size() const;
  private:
  int _internal_price_size() const;
  public:
  void clear_price();
  private:
  int32_t _internal_price(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_price() const;
  void _internal_add_price(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_price();
  public:
  int32_t price(int index) const;
  void set_price(int index, int32_t value);
  void add_price(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      price() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_price();

  // string code = 1;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // @@protoc_insertion_point(class_scope:stock_api.ViPriceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > price_;
  mutable std::atomic<int> _price_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class Prices final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.Prices) */ {
 public:
  inline Prices() : Prices(nullptr) {}
  ~Prices() override;
  explicit constexpr Prices(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Prices(const Prices& from);
  Prices(Prices&& from) noexcept
    : Prices() {
    *this = ::std::move(from);
  }

  inline Prices& operator=(const Prices& from) {
    CopyFrom(from);
    return *this;
  }
  inline Prices& operator=(Prices&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Prices& default_instance() {
    return *internal_default_instance();
  }
  static inline const Prices* internal_default_instance() {
    return reinterpret_cast<const Prices*>(
               &_Prices_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Prices& a, Prices& b) {
    a.Swap(&b);
  }
  inline void Swap(Prices* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Prices* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Prices* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Prices>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Prices& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Prices& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Prices* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.Prices";
  }
  protected:
  explicit Prices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
  };
  // repeated int32 price = 1;
  int price_size() const;
  private:
  int _internal_price_size() const;
  public:
  void clear_price();
  private:
  int32_t _internal_price(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_price() const;
  void _internal_add_price(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_price();
  public:
  int32_t price(int index) const;
  void set_price(int index, int32_t value);
  void add_price(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      price() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_price();

  // @@protoc_insertion_point(class_scope:stock_api.Prices)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > price_;
  mutable std::atomic<int> _price_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class Bool final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.Bool) */ {
 public:
  inline Bool() : Bool(nullptr) {}
  ~Bool() override;
  explicit constexpr Bool(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bool(const Bool& from);
  Bool(Bool&& from) noexcept
    : Bool() {
    *this = ::std::move(from);
  }

  inline Bool& operator=(const Bool& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bool& operator=(Bool&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bool& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bool* internal_default_instance() {
    return reinterpret_cast<const Bool*>(
               &_Bool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Bool& a, Bool& b) {
    a.Swap(&b);
  }
  inline void Swap(Bool* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bool* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bool>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bool& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Bool& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bool* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.Bool";
  }
  protected:
  explicit Bool(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
  };
  // bool ret = 1;
  void clear_ret();
  bool ret() const;
  void set_ret(bool value);
  private:
  bool _internal_ret() const;
  void _internal_set_ret(bool value);
  public:

  // @@protoc_insertion_point(class_scope:stock_api.Bool)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class BrokerLog_BuyBrokerEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BrokerLog_BuyBrokerEntry_DoNotUse, 
    std::string, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BrokerLog_BuyBrokerEntry_DoNotUse, 
    std::string, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> SuperType;
  BrokerLog_BuyBrokerEntry_DoNotUse();
  explicit constexpr BrokerLog_BuyBrokerEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit BrokerLog_BuyBrokerEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BrokerLog_BuyBrokerEntry_DoNotUse& other);
  static const BrokerLog_BuyBrokerEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BrokerLog_BuyBrokerEntry_DoNotUse*>(&_BrokerLog_BuyBrokerEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "stock_api.BrokerLog.BuyBrokerEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class BrokerLog_SellBrokerEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BrokerLog_SellBrokerEntry_DoNotUse, 
    std::string, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BrokerLog_SellBrokerEntry_DoNotUse, 
    std::string, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> SuperType;
  BrokerLog_SellBrokerEntry_DoNotUse();
  explicit constexpr BrokerLog_SellBrokerEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit BrokerLog_SellBrokerEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BrokerLog_SellBrokerEntry_DoNotUse& other);
  static const BrokerLog_SellBrokerEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BrokerLog_SellBrokerEntry_DoNotUse*>(&_BrokerLog_SellBrokerEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "stock_api.BrokerLog.SellBrokerEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class BrokerLog final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.BrokerLog) */ {
 public:
  inline BrokerLog() : BrokerLog(nullptr) {}
  ~BrokerLog() override;
  explicit constexpr BrokerLog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrokerLog(const BrokerLog& from);
  BrokerLog(BrokerLog&& from) noexcept
    : BrokerLog() {
    *this = ::std::move(from);
  }

  inline BrokerLog& operator=(const BrokerLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrokerLog& operator=(BrokerLog&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrokerLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrokerLog* internal_default_instance() {
    return reinterpret_cast<const BrokerLog*>(
               &_BrokerLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BrokerLog& a, BrokerLog& b) {
    a.Swap(&b);
  }
  inline void Swap(BrokerLog* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrokerLog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrokerLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrokerLog>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrokerLog& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BrokerLog& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrokerLog* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.BrokerLog";
  }
  protected:
  explicit BrokerLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kBuyBrokerFieldNumber = 9,
    kSellBrokerFieldNumber = 10,
    kFromPriceFieldNumber = 1,
    kUntilPriceFieldNumber = 2,
    kBuyVolumeFieldNumber = 3,
    kSellVolumeFieldNumber = 4,
    kBuyVolumeDomesticFieldNumber = 5,
    kBuyVolumeForeignFieldNumber = 6,
    kSellVolumeDomesticFieldNumber = 7,
    kSellVolumeForeignFieldNumber = 8,
  };
  // map<string, int64> buy_broker = 9;
  int buy_broker_size() const;
  private:
  int _internal_buy_broker_size() const;
  public:
  void clear_buy_broker();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
      _internal_buy_broker() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
      _internal_mutable_buy_broker();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
      buy_broker() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
      mutable_buy_broker();

  // map<string, int64> sell_broker = 10;
  int sell_broker_size() const;
  private:
  int _internal_sell_broker_size() const;
  public:
  void clear_sell_broker();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
      _internal_sell_broker() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
      _internal_mutable_sell_broker();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
      sell_broker() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
      mutable_sell_broker();

  // float from_price = 1;
  void clear_from_price();
  float from_price() const;
  void set_from_price(float value);
  private:
  float _internal_from_price() const;
  void _internal_set_from_price(float value);
  public:

  // float until_price = 2;
  void clear_until_price();
  float until_price() const;
  void set_until_price(float value);
  private:
  float _internal_until_price() const;
  void _internal_set_until_price(float value);
  public:

  // int64 buy_volume = 3;
  void clear_buy_volume();
  int64_t buy_volume() const;
  void set_buy_volume(int64_t value);
  private:
  int64_t _internal_buy_volume() const;
  void _internal_set_buy_volume(int64_t value);
  public:

  // int64 sell_volume = 4;
  void clear_sell_volume();
  int64_t sell_volume() const;
  void set_sell_volume(int64_t value);
  private:
  int64_t _internal_sell_volume() const;
  void _internal_set_sell_volume(int64_t value);
  public:

  // int64 buy_volume_domestic = 5;
  void clear_buy_volume_domestic();
  int64_t buy_volume_domestic() const;
  void set_buy_volume_domestic(int64_t value);
  private:
  int64_t _internal_buy_volume_domestic() const;
  void _internal_set_buy_volume_domestic(int64_t value);
  public:

  // int64 buy_volume_foreign = 6;
  void clear_buy_volume_foreign();
  int64_t buy_volume_foreign() const;
  void set_buy_volume_foreign(int64_t value);
  private:
  int64_t _internal_buy_volume_foreign() const;
  void _internal_set_buy_volume_foreign(int64_t value);
  public:

  // int64 sell_volume_domestic = 7;
  void clear_sell_volume_domestic();
  int64_t sell_volume_domestic() const;
  void set_sell_volume_domestic(int64_t value);
  private:
  int64_t _internal_sell_volume_domestic() const;
  void _internal_set_sell_volume_domestic(int64_t value);
  public:

  // int64 sell_volume_foreign = 8;
  void clear_sell_volume_foreign();
  int64_t sell_volume_foreign() const;
  void set_sell_volume_foreign(int64_t value);
  private:
  int64_t _internal_sell_volume_foreign() const;
  void _internal_set_sell_volume_foreign(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:stock_api.BrokerLog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      BrokerLog_BuyBrokerEntry_DoNotUse,
      std::string, int64_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> buy_broker_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      BrokerLog_SellBrokerEntry_DoNotUse,
      std::string, int64_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> sell_broker_;
  float from_price_;
  float until_price_;
  int64_t buy_volume_;
  int64_t sell_volume_;
  int64_t buy_volume_domestic_;
  int64_t buy_volume_foreign_;
  int64_t sell_volume_domestic_;
  int64_t sell_volume_foreign_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class BrokerSummary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.BrokerSummary) */ {
 public:
  inline BrokerSummary() : BrokerSummary(nullptr) {}
  ~BrokerSummary() override;
  explicit constexpr BrokerSummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrokerSummary(const BrokerSummary& from);
  BrokerSummary(BrokerSummary&& from) noexcept
    : BrokerSummary() {
    *this = ::std::move(from);
  }

  inline BrokerSummary& operator=(const BrokerSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrokerSummary& operator=(BrokerSummary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrokerSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrokerSummary* internal_default_instance() {
    return reinterpret_cast<const BrokerSummary*>(
               &_BrokerSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BrokerSummary& a, BrokerSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(BrokerSummary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrokerSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrokerSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrokerSummary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrokerSummary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BrokerSummary& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrokerSummary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.BrokerSummary";
  }
  protected:
  explicit BrokerSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrokerLogFieldNumber = 3,
    kCodeFieldNumber = 1,
    kForeignerTotalFieldNumber = 2,
    kMaxVolumeFieldNumber = 4,
  };
  // repeated .stock_api.BrokerLog broker_log = 3;
  int broker_log_size() const;
  private:
  int _internal_broker_log_size() const;
  public:
  void clear_broker_log();
  ::stock_api::BrokerLog* mutable_broker_log(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stock_api::BrokerLog >*
      mutable_broker_log();
  private:
  const ::stock_api::BrokerLog& _internal_broker_log(int index) const;
  ::stock_api::BrokerLog* _internal_add_broker_log();
  public:
  const ::stock_api::BrokerLog& broker_log(int index) const;
  ::stock_api::BrokerLog* add_broker_log();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stock_api::BrokerLog >&
      broker_log() const;

  // string code = 1;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // int64 foreigner_total = 2;
  void clear_foreigner_total();
  int64_t foreigner_total() const;
  void set_foreigner_total(int64_t value);
  private:
  int64_t _internal_foreigner_total() const;
  void _internal_set_foreigner_total(int64_t value);
  public:

  // int64 max_volume = 4;
  void clear_max_volume();
  int64_t max_volume() const;
  void set_max_volume(int64_t value);
  private:
  int64_t _internal_max_volume() const;
  void _internal_set_max_volume(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:stock_api.BrokerSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stock_api::BrokerLog > broker_log_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  int64_t foreigner_total_;
  int64_t max_volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class BrokerStat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.BrokerStat) */ {
 public:
  inline BrokerStat() : BrokerStat(nullptr) {}
  ~BrokerStat() override;
  explicit constexpr BrokerStat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrokerStat(const BrokerStat& from);
  BrokerStat(BrokerStat&& from) noexcept
    : BrokerStat() {
    *this = ::std::move(from);
  }

  inline BrokerStat& operator=(const BrokerStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrokerStat& operator=(BrokerStat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrokerStat& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrokerStat* internal_default_instance() {
    return reinterpret_cast<const BrokerStat*>(
               &_BrokerStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BrokerStat& a, BrokerStat& b) {
    a.Swap(&b);
  }
  inline void Swap(BrokerStat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrokerStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrokerStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrokerStat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrokerStat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BrokerStat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrokerStat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.BrokerStat";
  }
  protected:
  explicit BrokerStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuyVolumeFieldNumber = 1,
    kSellVolumeFieldNumber = 2,
  };
  // int64 buy_volume = 1;
  void clear_buy_volume();
  int64_t buy_volume() const;
  void set_buy_volume(int64_t value);
  private:
  int64_t _internal_buy_volume() const;
  void _internal_set_buy_volume(int64_t value);
  public:

  // int64 sell_volume = 2;
  void clear_sell_volume();
  int64_t sell_volume() const;
  void set_sell_volume(int64_t value);
  private:
  int64_t _internal_sell_volume() const;
  void _internal_set_sell_volume(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:stock_api.BrokerStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t buy_volume_;
  int64_t sell_volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class BrokerMinuteTickList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.BrokerMinuteTickList) */ {
 public:
  inline BrokerMinuteTickList() : BrokerMinuteTickList(nullptr) {}
  ~BrokerMinuteTickList() override;
  explicit constexpr BrokerMinuteTickList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrokerMinuteTickList(const BrokerMinuteTickList& from);
  BrokerMinuteTickList(BrokerMinuteTickList&& from) noexcept
    : BrokerMinuteTickList() {
    *this = ::std::move(from);
  }

  inline BrokerMinuteTickList& operator=(const BrokerMinuteTickList& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrokerMinuteTickList& operator=(BrokerMinuteTickList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrokerMinuteTickList& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrokerMinuteTickList* internal_default_instance() {
    return reinterpret_cast<const BrokerMinuteTickList*>(
               &_BrokerMinuteTickList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BrokerMinuteTickList& a, BrokerMinuteTickList& b) {
    a.Swap(&b);
  }
  inline void Swap(BrokerMinuteTickList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrokerMinuteTickList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrokerMinuteTickList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrokerMinuteTickList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrokerMinuteTickList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BrokerMinuteTickList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrokerMinuteTickList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.BrokerMinuteTickList";
  }
  protected:
  explicit BrokerMinuteTickList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinuteTickFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated .stock_api.BrokerMinuteTick minute_tick = 2;
  int minute_tick_size() const;
  private:
  int _internal_minute_tick_size() const;
  public:
  void clear_minute_tick();
  ::stock_api::BrokerMinuteTick* mutable_minute_tick(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stock_api::BrokerMinuteTick >*
      mutable_minute_tick();
  private:
  const ::stock_api::BrokerMinuteTick& _internal_minute_tick(int index) const;
  ::stock_api::BrokerMinuteTick* _internal_add_minute_tick();
  public:
  const ::stock_api::BrokerMinuteTick& minute_tick(int index) const;
  ::stock_api::BrokerMinuteTick* add_minute_tick();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stock_api::BrokerMinuteTick >&
      minute_tick() const;

  // string code = 1;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // @@protoc_insertion_point(class_scope:stock_api.BrokerMinuteTickList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stock_api::BrokerMinuteTick > minute_tick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class BrokerMinuteTick_BrokersMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BrokerMinuteTick_BrokersMapEntry_DoNotUse, 
    std::string, ::stock_api::BrokerStat,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BrokerMinuteTick_BrokersMapEntry_DoNotUse, 
    std::string, ::stock_api::BrokerStat,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  BrokerMinuteTick_BrokersMapEntry_DoNotUse();
  explicit constexpr BrokerMinuteTick_BrokersMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit BrokerMinuteTick_BrokersMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BrokerMinuteTick_BrokersMapEntry_DoNotUse& other);
  static const BrokerMinuteTick_BrokersMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BrokerMinuteTick_BrokersMapEntry_DoNotUse*>(&_BrokerMinuteTick_BrokersMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "stock_api.BrokerMinuteTick.BrokersMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class BrokerMinuteTick final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.BrokerMinuteTick) */ {
 public:
  inline BrokerMinuteTick() : BrokerMinuteTick(nullptr) {}
  ~BrokerMinuteTick() override;
  explicit constexpr BrokerMinuteTick(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrokerMinuteTick(const BrokerMinuteTick& from);
  BrokerMinuteTick(BrokerMinuteTick&& from) noexcept
    : BrokerMinuteTick() {
    *this = ::std::move(from);
  }

  inline BrokerMinuteTick& operator=(const BrokerMinuteTick& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrokerMinuteTick& operator=(BrokerMinuteTick&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrokerMinuteTick& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrokerMinuteTick* internal_default_instance() {
    return reinterpret_cast<const BrokerMinuteTick*>(
               &_BrokerMinuteTick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(BrokerMinuteTick& a, BrokerMinuteTick& b) {
    a.Swap(&b);
  }
  inline void Swap(BrokerMinuteTick* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrokerMinuteTick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrokerMinuteTick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrokerMinuteTick>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrokerMinuteTick& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BrokerMinuteTick& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrokerMinuteTick* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.BrokerMinuteTick";
  }
  protected:
  explicit BrokerMinuteTick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kBrokersMapFieldNumber = 4,
    kCodeFieldNumber = 1,
    kFromDatetimeFieldNumber = 2,
    kUntilDatetimeFieldNumber = 3,
  };
  // map<string, .stock_api.BrokerStat> brokers_map = 4;
  int brokers_map_size() const;
  private:
  int _internal_brokers_map_size() const;
  public:
  void clear_brokers_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::stock_api::BrokerStat >&
      _internal_brokers_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::stock_api::BrokerStat >*
      _internal_mutable_brokers_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::stock_api::BrokerStat >&
      brokers_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::stock_api::BrokerStat >*
      mutable_brokers_map();

  // string code = 1;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // .google.protobuf.Timestamp from_datetime = 2;
  bool has_from_datetime() const;
  private:
  bool _internal_has_from_datetime() const;
  public:
  void clear_from_datetime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& from_datetime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_from_datetime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_from_datetime();
  void set_allocated_from_datetime(::PROTOBUF_NAMESPACE_ID::Timestamp* from_datetime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_from_datetime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_from_datetime();
  public:
  void unsafe_arena_set_allocated_from_datetime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* from_datetime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_from_datetime();

  // .google.protobuf.Timestamp until_datetime = 3;
  bool has_until_datetime() const;
  private:
  bool _internal_has_until_datetime() const;
  public:
  void clear_until_datetime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& until_datetime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_until_datetime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_until_datetime();
  void set_allocated_until_datetime(::PROTOBUF_NAMESPACE_ID::Timestamp* until_datetime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_until_datetime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_until_datetime();
  public:
  void unsafe_arena_set_allocated_until_datetime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* until_datetime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_until_datetime();

  // @@protoc_insertion_point(class_scope:stock_api.BrokerMinuteTick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      BrokerMinuteTick_BrokersMapEntry_DoNotUse,
      std::string, ::stock_api::BrokerStat,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> brokers_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* from_datetime_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* until_datetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class YearHighInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.YearHighInfo) */ {
 public:
  inline YearHighInfo() : YearHighInfo(nullptr) {}
  ~YearHighInfo() override;
  explicit constexpr YearHighInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  YearHighInfo(const YearHighInfo& from);
  YearHighInfo(YearHighInfo&& from) noexcept
    : YearHighInfo() {
    *this = ::std::move(from);
  }

  inline YearHighInfo& operator=(const YearHighInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline YearHighInfo& operator=(YearHighInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const YearHighInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const YearHighInfo* internal_default_instance() {
    return reinterpret_cast<const YearHighInfo*>(
               &_YearHighInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(YearHighInfo& a, YearHighInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(YearHighInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(YearHighInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  YearHighInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<YearHighInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const YearHighInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const YearHighInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(YearHighInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.YearHighInfo";
  }
  protected:
  explicit YearHighInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighDateFieldNumber = 2,
    kPriceFieldNumber = 1,
    kDaysDistanceFieldNumber = 3,
  };
  // .google.protobuf.Timestamp high_date = 2;
  bool has_high_date() const;
  private:
  bool _internal_has_high_date() const;
  public:
  void clear_high_date();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& high_date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_high_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_high_date();
  void set_allocated_high_date(::PROTOBUF_NAMESPACE_ID::Timestamp* high_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_high_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_high_date();
  public:
  void unsafe_arena_set_allocated_high_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* high_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_high_date();

  // int32 price = 1;
  void clear_price();
  int32_t price() const;
  void set_price(int32_t value);
  private:
  int32_t _internal_price() const;
  void _internal_set_price(int32_t value);
  public:

  // int32 days_distance = 3;
  void clear_days_distance();
  int32_t days_distance() const;
  void set_days_distance(int32_t value);
  private:
  int32_t _internal_days_distance() const;
  void _internal_set_days_distance(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:stock_api.YearHighInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* high_date_;
  int32_t price_;
  int32_t days_distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class SimulationMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.SimulationMsg) */ {
 public:
  inline SimulationMsg() : SimulationMsg(nullptr) {}
  ~SimulationMsg() override;
  explicit constexpr SimulationMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimulationMsg(const SimulationMsg& from);
  SimulationMsg(SimulationMsg&& from) noexcept
    : SimulationMsg() {
    *this = ::std::move(from);
  }

  inline SimulationMsg& operator=(const SimulationMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationMsg& operator=(SimulationMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimulationMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimulationMsg* internal_default_instance() {
    return reinterpret_cast<const SimulationMsg*>(
               &_SimulationMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SimulationMsg& a, SimulationMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimulationMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimulationMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimulationMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimulationMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.SimulationMsg";
  }
  protected:
  explicit SimulationMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTickFieldNumber = 2,
    kBidaskFieldNumber = 3,
    kSubjectFieldNumber = 4,
    kAlarmFieldNumber = 5,
    kMsgtypeFieldNumber = 1,
  };
  // .stock_api.CybosTickData tick = 2;
  bool has_tick() const;
  private:
  bool _internal_has_tick() const;
  public:
  void clear_tick();
  const ::stock_api::CybosTickData& tick() const;
  PROTOBUF_NODISCARD ::stock_api::CybosTickData* release_tick();
  ::stock_api::CybosTickData* mutable_tick();
  void set_allocated_tick(::stock_api::CybosTickData* tick);
  private:
  const ::stock_api::CybosTickData& _internal_tick() const;
  ::stock_api::CybosTickData* _internal_mutable_tick();
  public:
  void unsafe_arena_set_allocated_tick(
      ::stock_api::CybosTickData* tick);
  ::stock_api::CybosTickData* unsafe_arena_release_tick();

  // .stock_api.CybosBidAskTickData bidask = 3;
  bool has_bidask() const;
  private:
  bool _internal_has_bidask() const;
  public:
  void clear_bidask();
  const ::stock_api::CybosBidAskTickData& bidask() const;
  PROTOBUF_NODISCARD ::stock_api::CybosBidAskTickData* release_bidask();
  ::stock_api::CybosBidAskTickData* mutable_bidask();
  void set_allocated_bidask(::stock_api::CybosBidAskTickData* bidask);
  private:
  const ::stock_api::CybosBidAskTickData& _internal_bidask() const;
  ::stock_api::CybosBidAskTickData* _internal_mutable_bidask();
  public:
  void unsafe_arena_set_allocated_bidask(
      ::stock_api::CybosBidAskTickData* bidask);
  ::stock_api::CybosBidAskTickData* unsafe_arena_release_bidask();

  // .stock_api.CybosSubjectTickData subject = 4;
  bool has_subject() const;
  private:
  bool _internal_has_subject() const;
  public:
  void clear_subject();
  const ::stock_api::CybosSubjectTickData& subject() const;
  PROTOBUF_NODISCARD ::stock_api::CybosSubjectTickData* release_subject();
  ::stock_api::CybosSubjectTickData* mutable_subject();
  void set_allocated_subject(::stock_api::CybosSubjectTickData* subject);
  private:
  const ::stock_api::CybosSubjectTickData& _internal_subject() const;
  ::stock_api::CybosSubjectTickData* _internal_mutable_subject();
  public:
  void unsafe_arena_set_allocated_subject(
      ::stock_api::CybosSubjectTickData* subject);
  ::stock_api::CybosSubjectTickData* unsafe_arena_release_subject();

  // .stock_api.CybosStockAlarm alarm = 5;
  bool has_alarm() const;
  private:
  bool _internal_has_alarm() const;
  public:
  void clear_alarm();
  const ::stock_api::CybosStockAlarm& alarm() const;
  PROTOBUF_NODISCARD ::stock_api::CybosStockAlarm* release_alarm();
  ::stock_api::CybosStockAlarm* mutable_alarm();
  void set_allocated_alarm(::stock_api::CybosStockAlarm* alarm);
  private:
  const ::stock_api::CybosStockAlarm& _internal_alarm() const;
  ::stock_api::CybosStockAlarm* _internal_mutable_alarm();
  public:
  void unsafe_arena_set_allocated_alarm(
      ::stock_api::CybosStockAlarm* alarm);
  ::stock_api::CybosStockAlarm* unsafe_arena_release_alarm();

  // .stock_api.SimulationMsgType msgtype = 1;
  void clear_msgtype();
  ::stock_api::SimulationMsgType msgtype() const;
  void set_msgtype(::stock_api::SimulationMsgType value);
  private:
  ::stock_api::SimulationMsgType _internal_msgtype() const;
  void _internal_set_msgtype(::stock_api::SimulationMsgType value);
  public:

  // @@protoc_insertion_point(class_scope:stock_api.SimulationMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::stock_api::CybosTickData* tick_;
  ::stock_api::CybosBidAskTickData* bidask_;
  ::stock_api::CybosSubjectTickData* subject_;
  ::stock_api::CybosStockAlarm* alarm_;
  int msgtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class TodayTopOption final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.TodayTopOption) */ {
 public:
  inline TodayTopOption() : TodayTopOption(nullptr) {}
  ~TodayTopOption() override;
  explicit constexpr TodayTopOption(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TodayTopOption(const TodayTopOption& from);
  TodayTopOption(TodayTopOption&& from) noexcept
    : TodayTopOption() {
    *this = ::std::move(from);
  }

  inline TodayTopOption& operator=(const TodayTopOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline TodayTopOption& operator=(TodayTopOption&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TodayTopOption& default_instance() {
    return *internal_default_instance();
  }
  static inline const TodayTopOption* internal_default_instance() {
    return reinterpret_cast<const TodayTopOption*>(
               &_TodayTopOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(TodayTopOption& a, TodayTopOption& b) {
    a.Swap(&b);
  }
  inline void Swap(TodayTopOption* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TodayTopOption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TodayTopOption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TodayTopOption>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TodayTopOption& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TodayTopOption& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TodayTopOption* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.TodayTopOption";
  }
  protected:
  explicit TodayTopOption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectionFieldNumber = 1,
  };
  // .stock_api.TodayTopSelection selection = 1;
  void clear_selection();
  ::stock_api::TodayTopSelection selection() const;
  void set_selection(::stock_api::TodayTopSelection value);
  private:
  ::stock_api::TodayTopSelection _internal_selection() const;
  void _internal_set_selection(::stock_api::TodayTopSelection value);
  public:

  // @@protoc_insertion_point(class_scope:stock_api.TodayTopOption)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int selection_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class Balance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.Balance) */ {
 public:
  inline Balance() : Balance(nullptr) {}
  ~Balance() override;
  explicit constexpr Balance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Balance(const Balance& from);
  Balance(Balance&& from) noexcept
    : Balance() {
    *this = ::std::move(from);
  }

  inline Balance& operator=(const Balance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Balance& operator=(Balance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Balance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Balance* internal_default_instance() {
    return reinterpret_cast<const Balance*>(
               &_Balance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Balance& a, Balance& b) {
    a.Swap(&b);
  }
  inline void Swap(Balance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Balance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Balance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Balance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Balance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Balance& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Balance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.Balance";
  }
  protected:
  explicit Balance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBalanceFieldNumber = 1,
  };
  // int32 balance = 1;
  void clear_balance();
  int32_t balance() const;
  void set_balance(int32_t value);
  private:
  int32_t _internal_balance() const;
  void _internal_set_balance(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:stock_api.Balance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t balance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class StockQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.StockQuery) */ {
 public:
  inline StockQuery() : StockQuery(nullptr) {}
  ~StockQuery() override;
  explicit constexpr StockQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StockQuery(const StockQuery& from);
  StockQuery(StockQuery&& from) noexcept
    : StockQuery() {
    *this = ::std::move(from);
  }

  inline StockQuery& operator=(const StockQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline StockQuery& operator=(StockQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StockQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const StockQuery* internal_default_instance() {
    return reinterpret_cast<const StockQuery*>(
               &_StockQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(StockQuery& a, StockQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(StockQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StockQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StockQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StockQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StockQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StockQuery& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.StockQuery";
  }
  protected:
  explicit StockQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kFromDatetimeFieldNumber = 2,
    kUntilDatetimeFieldNumber = 3,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // .google.protobuf.Timestamp from_datetime = 2;
  bool has_from_datetime() const;
  private:
  bool _internal_has_from_datetime() const;
  public:
  void clear_from_datetime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& from_datetime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_from_datetime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_from_datetime();
  void set_allocated_from_datetime(::PROTOBUF_NAMESPACE_ID::Timestamp* from_datetime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_from_datetime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_from_datetime();
  public:
  void unsafe_arena_set_allocated_from_datetime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* from_datetime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_from_datetime();

  // .google.protobuf.Timestamp until_datetime = 3;
  bool has_until_datetime() const;
  private:
  bool _internal_has_until_datetime() const;
  public:
  void clear_until_datetime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& until_datetime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_until_datetime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_until_datetime();
  void set_allocated_until_datetime(::PROTOBUF_NAMESPACE_ID::Timestamp* until_datetime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_until_datetime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_until_datetime();
  public:
  void unsafe_arena_set_allocated_until_datetime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* until_datetime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_until_datetime();

  // @@protoc_insertion_point(class_scope:stock_api.StockQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* from_datetime_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* until_datetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class TopList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.TopList) */ {
 public:
  inline TopList() : TopList(nullptr) {}
  ~TopList() override;
  explicit constexpr TopList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopList(const TopList& from);
  TopList(TopList&& from) noexcept
    : TopList() {
    *this = ::std::move(from);
  }

  inline TopList& operator=(const TopList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopList& operator=(TopList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopList& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopList* internal_default_instance() {
    return reinterpret_cast<const TopList*>(
               &_TopList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(TopList& a, TopList& b) {
    a.Swap(&b);
  }
  inline void Swap(TopList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TopList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TopList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.TopList";
  }
  protected:
  explicit TopList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodelistFieldNumber = 1,
    kIsTodayDataFieldNumber = 2,
    kDateFieldNumber = 3,
  };
  // repeated string codelist = 1;
  int codelist_size() const;
  private:
  int _internal_codelist_size() const;
  public:
  void clear_codelist();
  const std::string& codelist(int index) const;
  std::string* mutable_codelist(int index);
  void set_codelist(int index, const std::string& value);
  void set_codelist(int index, std::string&& value);
  void set_codelist(int index, const char* value);
  void set_codelist(int index, const char* value, size_t size);
  std::string* add_codelist();
  void add_codelist(const std::string& value);
  void add_codelist(std::string&& value);
  void add_codelist(const char* value);
  void add_codelist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& codelist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_codelist();
  private:
  const std::string& _internal_codelist(int index) const;
  std::string* _internal_add_codelist();
  public:

  // bool is_today_data = 2;
  void clear_is_today_data();
  bool is_today_data() const;
  void set_is_today_data(bool value);
  private:
  bool _internal_is_today_data() const;
  void _internal_set_is_today_data(bool value);
  public:

  // uint32 date = 3;
  void clear_date();
  uint32_t date() const;
  void set_date(uint32_t value);
  private:
  uint32_t _internal_date() const;
  void _internal_set_date(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:stock_api.TopList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> codelist_;
  bool is_today_data_;
  uint32_t date_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class SimulationOperation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.SimulationOperation) */ {
 public:
  inline SimulationOperation() : SimulationOperation(nullptr) {}
  ~SimulationOperation() override;
  explicit constexpr SimulationOperation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimulationOperation(const SimulationOperation& from);
  SimulationOperation(SimulationOperation&& from) noexcept
    : SimulationOperation() {
    *this = ::std::move(from);
  }

  inline SimulationOperation& operator=(const SimulationOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationOperation& operator=(SimulationOperation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimulationOperation& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimulationOperation* internal_default_instance() {
    return reinterpret_cast<const SimulationOperation*>(
               &_SimulationOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SimulationOperation& a, SimulationOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationOperation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimulationOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimulationOperation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimulationOperation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimulationOperation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationOperation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.SimulationOperation";
  }
  protected:
  explicit SimulationOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartDatetimeFieldNumber = 2,
    kIsOnFieldNumber = 1,
    kSpeedFieldNumber = 3,
  };
  // .google.protobuf.Timestamp start_datetime = 2;
  bool has_start_datetime() const;
  private:
  bool _internal_has_start_datetime() const;
  public:
  void clear_start_datetime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_datetime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_start_datetime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_datetime();
  void set_allocated_start_datetime(::PROTOBUF_NAMESPACE_ID::Timestamp* start_datetime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_datetime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_datetime();
  public:
  void unsafe_arena_set_allocated_start_datetime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* start_datetime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_datetime();

  // bool is_on = 1;
  void clear_is_on();
  bool is_on() const;
  void set_is_on(bool value);
  private:
  bool _internal_is_on() const;
  void _internal_set_is_on(bool value);
  public:

  // float speed = 3;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:stock_api.SimulationOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* start_datetime_;
  bool is_on_;
  float speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class SimulationStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.SimulationStatus) */ {
 public:
  inline SimulationStatus() : SimulationStatus(nullptr) {}
  ~SimulationStatus() override;
  explicit constexpr SimulationStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimulationStatus(const SimulationStatus& from);
  SimulationStatus(SimulationStatus&& from) noexcept
    : SimulationStatus() {
    *this = ::std::move(from);
  }

  inline SimulationStatus& operator=(const SimulationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationStatus& operator=(SimulationStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimulationStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimulationStatus* internal_default_instance() {
    return reinterpret_cast<const SimulationStatus*>(
               &_SimulationStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SimulationStatus& a, SimulationStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimulationStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimulationStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimulationStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimulationStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.SimulationStatus";
  }
  protected:
  explicit SimulationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSimulationOnFieldNumber = 1,
    kSimulationSpeedFieldNumber = 2,
  };
  // bool simulation_on = 1;
  void clear_simulation_on();
  bool simulation_on() const;
  void set_simulation_on(bool value);
  private:
  bool _internal_simulation_on() const;
  void _internal_set_simulation_on(bool value);
  public:

  // float simulation_speed = 2;
  void clear_simulation_speed();
  float simulation_speed() const;
  void set_simulation_speed(float value);
  private:
  float _internal_simulation_speed() const;
  void _internal_set_simulation_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:stock_api.SimulationStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool simulation_on_;
  float simulation_speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class OrderMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.OrderMsg) */ {
 public:
  inline OrderMsg() : OrderMsg(nullptr) {}
  ~OrderMsg() override;
  explicit constexpr OrderMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderMsg(const OrderMsg& from);
  OrderMsg(OrderMsg&& from) noexcept
    : OrderMsg() {
    *this = ::std::move(from);
  }

  inline OrderMsg& operator=(const OrderMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderMsg& operator=(OrderMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderMsg* internal_default_instance() {
    return reinterpret_cast<const OrderMsg*>(
               &_OrderMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(OrderMsg& a, OrderMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OrderMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.OrderMsg";
  }
  protected:
  explicit OrderMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kOrderNumFieldNumber = 7,
    kIsBuyFieldNumber = 2,
    kPriceFieldNumber = 3,
    kQuantityFieldNumber = 4,
    kPercentageFieldNumber = 5,
    kMethodFieldNumber = 6,
    kOrderTypeFieldNumber = 8,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string order_num = 7;
  void clear_order_num();
  const std::string& order_num() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_num(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_num();
  PROTOBUF_NODISCARD std::string* release_order_num();
  void set_allocated_order_num(std::string* order_num);
  private:
  const std::string& _internal_order_num() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_num(const std::string& value);
  std::string* _internal_mutable_order_num();
  public:

  // bool is_buy = 2;
  void clear_is_buy();
  bool is_buy() const;
  void set_is_buy(bool value);
  private:
  bool _internal_is_buy() const;
  void _internal_set_is_buy(bool value);
  public:

  // int32 price = 3;
  void clear_price();
  int32_t price() const;
  void set_price(int32_t value);
  private:
  int32_t _internal_price() const;
  void _internal_set_price(int32_t value);
  public:

  // int32 quantity = 4;
  void clear_quantity();
  int32_t quantity() const;
  void set_quantity(int32_t value);
  private:
  int32_t _internal_quantity() const;
  void _internal_set_quantity(int32_t value);
  public:

  // int32 percentage = 5;
  void clear_percentage();
  int32_t percentage() const;
  void set_percentage(int32_t value);
  private:
  int32_t _internal_percentage() const;
  void _internal_set_percentage(int32_t value);
  public:

  // .stock_api.OrderMethod method = 6;
  void clear_method();
  ::stock_api::OrderMethod method() const;
  void set_method(::stock_api::OrderMethod value);
  private:
  ::stock_api::OrderMethod _internal_method() const;
  void _internal_set_method(::stock_api::OrderMethod value);
  public:

  // .stock_api.OrderType order_type = 8;
  void clear_order_type();
  ::stock_api::OrderType order_type() const;
  void set_order_type(::stock_api::OrderType value);
  private:
  ::stock_api::OrderType _internal_order_type() const;
  void _internal_set_order_type(::stock_api::OrderType value);
  public:

  // @@protoc_insertion_point(class_scope:stock_api.OrderMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_num_;
  bool is_buy_;
  int32_t price_;
  int32_t quantity_;
  int32_t percentage_;
  int method_;
  int order_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class TradeMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.TradeMsg) */ {
 public:
  inline TradeMsg() : TradeMsg(nullptr) {}
  ~TradeMsg() override;
  explicit constexpr TradeMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TradeMsg(const TradeMsg& from);
  TradeMsg(TradeMsg&& from) noexcept
    : TradeMsg() {
    *this = ::std::move(from);
  }

  inline TradeMsg& operator=(const TradeMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeMsg& operator=(TradeMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TradeMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const TradeMsg* internal_default_instance() {
    return reinterpret_cast<const TradeMsg*>(
               &_TradeMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(TradeMsg& a, TradeMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TradeMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TradeMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TradeMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TradeMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.TradeMsg";
  }
  protected:
  explicit TradeMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderMsgFieldNumber = 2,
    kMsgTypeFieldNumber = 1,
  };
  // .stock_api.OrderMsg order_msg = 2;
  bool has_order_msg() const;
  private:
  bool _internal_has_order_msg() const;
  public:
  void clear_order_msg();
  const ::stock_api::OrderMsg& order_msg() const;
  PROTOBUF_NODISCARD ::stock_api::OrderMsg* release_order_msg();
  ::stock_api::OrderMsg* mutable_order_msg();
  void set_allocated_order_msg(::stock_api::OrderMsg* order_msg);
  private:
  const ::stock_api::OrderMsg& _internal_order_msg() const;
  ::stock_api::OrderMsg* _internal_mutable_order_msg();
  public:
  void unsafe_arena_set_allocated_order_msg(
      ::stock_api::OrderMsg* order_msg);
  ::stock_api::OrderMsg* unsafe_arena_release_order_msg();

  // int32 msg_type = 1;
  void clear_msg_type();
  int32_t msg_type() const;
  void set_msg_type(int32_t value);
  private:
  int32_t _internal_msg_type() const;
  void _internal_set_msg_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:stock_api.TradeMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::stock_api::OrderMsg* order_msg_;
  int32_t msg_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class CybosOrderReturn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.CybosOrderReturn) */ {
 public:
  inline CybosOrderReturn() : CybosOrderReturn(nullptr) {}
  ~CybosOrderReturn() override;
  explicit constexpr CybosOrderReturn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CybosOrderReturn(const CybosOrderReturn& from);
  CybosOrderReturn(CybosOrderReturn&& from) noexcept
    : CybosOrderReturn() {
    *this = ::std::move(from);
  }

  inline CybosOrderReturn& operator=(const CybosOrderReturn& from) {
    CopyFrom(from);
    return *this;
  }
  inline CybosOrderReturn& operator=(CybosOrderReturn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CybosOrderReturn& default_instance() {
    return *internal_default_instance();
  }
  static inline const CybosOrderReturn* internal_default_instance() {
    return reinterpret_cast<const CybosOrderReturn*>(
               &_CybosOrderReturn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CybosOrderReturn& a, CybosOrderReturn& b) {
    a.Swap(&b);
  }
  inline void Swap(CybosOrderReturn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CybosOrderReturn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CybosOrderReturn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CybosOrderReturn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CybosOrderReturn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CybosOrderReturn& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CybosOrderReturn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.CybosOrderReturn";
  }
  protected:
  explicit CybosOrderReturn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kResultFieldNumber = 1,
    kOrderNumFieldNumber = 3,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 result = 1;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // int32 order_num = 3;
  void clear_order_num();
  int32_t order_num() const;
  void set_order_num(int32_t value);
  private:
  int32_t _internal_order_num() const;
  void _internal_set_order_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:stock_api.CybosOrderReturn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  int32_t result_;
  int32_t order_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class Report final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.Report) */ {
 public:
  inline Report() : Report(nullptr) {}
  ~Report() override;
  explicit constexpr Report(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Report(const Report& from);
  Report(Report&& from) noexcept
    : Report() {
    *this = ::std::move(from);
  }

  inline Report& operator=(const Report& from) {
    CopyFrom(from);
    return *this;
  }
  inline Report& operator=(Report&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Report& default_instance() {
    return *internal_default_instance();
  }
  static inline const Report* internal_default_instance() {
    return reinterpret_cast<const Report*>(
               &_Report_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Report& a, Report& b) {
    a.Swap(&b);
  }
  inline void Swap(Report* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Report* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Report* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Report>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Report& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Report& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Report* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.Report";
  }
  protected:
  explicit Report(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kCompanyNameFieldNumber = 2,
    kInternalOrderNumFieldNumber = 10,
    kOrderNumFieldNumber = 11,
    kLastUpdateDatetimeFieldNumber = 4,
    kIsBuyFieldNumber = 3,
    kFlagFieldNumber = 5,
    kMethodFieldNumber = 6,
    kHoldPriceFieldNumber = 7,
    kPriceFieldNumber = 8,
    kQuantityFieldNumber = 9,
    kTradedQuantityFieldNumber = 12,
    kTradedPriceFieldNumber = 13,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string company_name = 2;
  void clear_company_name();
  const std::string& company_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_company_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_company_name();
  PROTOBUF_NODISCARD std::string* release_company_name();
  void set_allocated_company_name(std::string* company_name);
  private:
  const std::string& _internal_company_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_company_name(const std::string& value);
  std::string* _internal_mutable_company_name();
  public:

  // string internal_order_num = 10;
  void clear_internal_order_num();
  const std::string& internal_order_num() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_internal_order_num(ArgT0&& arg0, ArgT... args);
  std::string* mutable_internal_order_num();
  PROTOBUF_NODISCARD std::string* release_internal_order_num();
  void set_allocated_internal_order_num(std::string* internal_order_num);
  private:
  const std::string& _internal_internal_order_num() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_internal_order_num(const std::string& value);
  std::string* _internal_mutable_internal_order_num();
  public:

  // string order_num = 11;
  void clear_order_num();
  const std::string& order_num() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_num(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_num();
  PROTOBUF_NODISCARD std::string* release_order_num();
  void set_allocated_order_num(std::string* order_num);
  private:
  const std::string& _internal_order_num() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_num(const std::string& value);
  std::string* _internal_mutable_order_num();
  public:

  // .google.protobuf.Timestamp last_update_datetime = 4;
  bool has_last_update_datetime() const;
  private:
  bool _internal_has_last_update_datetime() const;
  public:
  void clear_last_update_datetime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_update_datetime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_update_datetime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_update_datetime();
  void set_allocated_last_update_datetime(::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_datetime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_update_datetime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_update_datetime();
  public:
  void unsafe_arena_set_allocated_last_update_datetime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_datetime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_update_datetime();

  // bool is_buy = 3;
  void clear_is_buy();
  bool is_buy() const;
  void set_is_buy(bool value);
  private:
  bool _internal_is_buy() const;
  void _internal_set_is_buy(bool value);
  public:

  // .stock_api.OrderStatusFlag flag = 5;
  void clear_flag();
  ::stock_api::OrderStatusFlag flag() const;
  void set_flag(::stock_api::OrderStatusFlag value);
  private:
  ::stock_api::OrderStatusFlag _internal_flag() const;
  void _internal_set_flag(::stock_api::OrderStatusFlag value);
  public:

  // .stock_api.OrderMethod method = 6;
  void clear_method();
  ::stock_api::OrderMethod method() const;
  void set_method(::stock_api::OrderMethod value);
  private:
  ::stock_api::OrderMethod _internal_method() const;
  void _internal_set_method(::stock_api::OrderMethod value);
  public:

  // float hold_price = 7;
  void clear_hold_price();
  float hold_price() const;
  void set_hold_price(float value);
  private:
  float _internal_hold_price() const;
  void _internal_set_hold_price(float value);
  public:

  // int32 price = 8;
  void clear_price();
  int32_t price() const;
  void set_price(int32_t value);
  private:
  int32_t _internal_price() const;
  void _internal_set_price(int32_t value);
  public:

  // int32 quantity = 9;
  void clear_quantity();
  int32_t quantity() const;
  void set_quantity(int32_t value);
  private:
  int32_t _internal_quantity() const;
  void _internal_set_quantity(int32_t value);
  public:

  // int32 traded_quantity = 12;
  void clear_traded_quantity();
  int32_t traded_quantity() const;
  void set_traded_quantity(int32_t value);
  private:
  int32_t _internal_traded_quantity() const;
  void _internal_set_traded_quantity(int32_t value);
  public:

  // float traded_price = 13;
  void clear_traded_price();
  float traded_price() const;
  void set_traded_price(float value);
  private:
  float _internal_traded_price() const;
  void _internal_set_traded_price(float value);
  public:

  // @@protoc_insertion_point(class_scope:stock_api.Report)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr company_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr internal_order_num_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_num_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_datetime_;
  bool is_buy_;
  int flag_;
  int method_;
  float hold_price_;
  int32_t price_;
  int32_t quantity_;
  int32_t traded_quantity_;
  float traded_price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class OrderResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.OrderResult) */ {
 public:
  inline OrderResult() : OrderResult(nullptr) {}
  ~OrderResult() override;
  explicit constexpr OrderResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderResult(const OrderResult& from);
  OrderResult(OrderResult&& from) noexcept
    : OrderResult() {
    *this = ::std::move(from);
  }

  inline OrderResult& operator=(const OrderResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderResult& operator=(OrderResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderResult* internal_default_instance() {
    return reinterpret_cast<const OrderResult*>(
               &_OrderResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(OrderResult& a, OrderResult& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OrderResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.OrderResult";
  }
  protected:
  explicit OrderResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReportFieldNumber = 1,
    kCurrentBalanceFieldNumber = 2,
  };
  // repeated .stock_api.Report report = 1;
  int report_size() const;
  private:
  int _internal_report_size() const;
  public:
  void clear_report();
  ::stock_api::Report* mutable_report(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stock_api::Report >*
      mutable_report();
  private:
  const ::stock_api::Report& _internal_report(int index) const;
  ::stock_api::Report* _internal_add_report();
  public:
  const ::stock_api::Report& report(int index) const;
  ::stock_api::Report* add_report();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stock_api::Report >&
      report() const;

  // int32 current_balance = 2;
  void clear_current_balance();
  int32_t current_balance() const;
  void set_current_balance(int32_t value);
  private:
  int32_t _internal_current_balance() const;
  void _internal_set_current_balance(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:stock_api.OrderResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stock_api::Report > report_;
  int32_t current_balance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class CybosOrderResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.CybosOrderResult) */ {
 public:
  inline CybosOrderResult() : CybosOrderResult(nullptr) {}
  ~CybosOrderResult() override;
  explicit constexpr CybosOrderResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CybosOrderResult(const CybosOrderResult& from);
  CybosOrderResult(CybosOrderResult&& from) noexcept
    : CybosOrderResult() {
    *this = ::std::move(from);
  }

  inline CybosOrderResult& operator=(const CybosOrderResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CybosOrderResult& operator=(CybosOrderResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CybosOrderResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CybosOrderResult* internal_default_instance() {
    return reinterpret_cast<const CybosOrderResult*>(
               &_CybosOrderResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CybosOrderResult& a, CybosOrderResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CybosOrderResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CybosOrderResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CybosOrderResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CybosOrderResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CybosOrderResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CybosOrderResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CybosOrderResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.CybosOrderResult";
  }
  protected:
  explicit CybosOrderResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 2,
    kOrderNumberFieldNumber = 3,
    kFlagFieldNumber = 1,
    kQuantityFieldNumber = 4,
    kPriceFieldNumber = 5,
    kIsBuyFieldNumber = 6,
    kTotalQuantityFieldNumber = 7,
  };
  // string code = 2;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string order_number = 3;
  void clear_order_number();
  const std::string& order_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_number();
  PROTOBUF_NODISCARD std::string* release_order_number();
  void set_allocated_order_number(std::string* order_number);
  private:
  const std::string& _internal_order_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_number(const std::string& value);
  std::string* _internal_mutable_order_number();
  public:

  // .stock_api.OrderStatusFlag flag = 1;
  void clear_flag();
  ::stock_api::OrderStatusFlag flag() const;
  void set_flag(::stock_api::OrderStatusFlag value);
  private:
  ::stock_api::OrderStatusFlag _internal_flag() const;
  void _internal_set_flag(::stock_api::OrderStatusFlag value);
  public:

  // int32 quantity = 4;
  void clear_quantity();
  int32_t quantity() const;
  void set_quantity(int32_t value);
  private:
  int32_t _internal_quantity() const;
  void _internal_set_quantity(int32_t value);
  public:

  // int32 price = 5;
  void clear_price();
  int32_t price() const;
  void set_price(int32_t value);
  private:
  int32_t _internal_price() const;
  void _internal_set_price(int32_t value);
  public:

  // bool is_buy = 6;
  void clear_is_buy();
  bool is_buy() const;
  void set_is_buy(bool value);
  private:
  bool _internal_is_buy() const;
  void _internal_set_is_buy(bool value);
  public:

  // int32 total_quantity = 7;
  void clear_total_quantity();
  int32_t total_quantity() const;
  void set_total_quantity(int32_t value);
  private:
  int32_t _internal_total_quantity() const;
  void _internal_set_total_quantity(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:stock_api.CybosOrderResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_number_;
  int flag_;
  int32_t quantity_;
  int32_t price_;
  bool is_buy_;
  int32_t total_quantity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class ListType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.ListType) */ {
 public:
  inline ListType() : ListType(nullptr) {}
  ~ListType() override;
  explicit constexpr ListType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListType(const ListType& from);
  ListType(ListType&& from) noexcept
    : ListType() {
    *this = ::std::move(from);
  }

  inline ListType& operator=(const ListType& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListType& operator=(ListType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListType& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListType* internal_default_instance() {
    return reinterpret_cast<const ListType*>(
               &_ListType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ListType& a, ListType& b) {
    a.Swap(&b);
  }
  inline void Swap(ListType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListType& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.ListType";
  }
  protected:
  explicit ListType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeNameFieldNumber = 1,
  };
  // string type_name = 1;
  void clear_type_name();
  const std::string& type_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_name();
  PROTOBUF_NODISCARD std::string* release_type_name();
  void set_allocated_type_name(std::string* type_name);
  private:
  const std::string& _internal_type_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_name(const std::string& value);
  std::string* _internal_mutable_type_name();
  public:

  // @@protoc_insertion_point(class_scope:stock_api.ListType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class CompanyName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.CompanyName) */ {
 public:
  inline CompanyName() : CompanyName(nullptr) {}
  ~CompanyName() override;
  explicit constexpr CompanyName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompanyName(const CompanyName& from);
  CompanyName(CompanyName&& from) noexcept
    : CompanyName() {
    *this = ::std::move(from);
  }

  inline CompanyName& operator=(const CompanyName& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompanyName& operator=(CompanyName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompanyName& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompanyName* internal_default_instance() {
    return reinterpret_cast<const CompanyName*>(
               &_CompanyName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CompanyName& a, CompanyName& b) {
    a.Swap(&b);
  }
  inline void Swap(CompanyName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompanyName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompanyName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompanyName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompanyName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CompanyName& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompanyName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.CompanyName";
  }
  protected:
  explicit CompanyName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompanyNameFieldNumber = 1,
  };
  // string company_name = 1;
  void clear_company_name();
  const std::string& company_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_company_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_company_name();
  PROTOBUF_NODISCARD std::string* release_company_name();
  void set_allocated_company_name(std::string* company_name);
  private:
  const std::string& _internal_company_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_company_name(const std::string& value);
  std::string* _internal_mutable_company_name();
  public:

  // @@protoc_insertion_point(class_scope:stock_api.CompanyName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr company_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class PastMinuteQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.PastMinuteQuery) */ {
 public:
  inline PastMinuteQuery() : PastMinuteQuery(nullptr) {}
  ~PastMinuteQuery() override;
  explicit constexpr PastMinuteQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PastMinuteQuery(const PastMinuteQuery& from);
  PastMinuteQuery(PastMinuteQuery&& from) noexcept
    : PastMinuteQuery() {
    *this = ::std::move(from);
  }

  inline PastMinuteQuery& operator=(const PastMinuteQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline PastMinuteQuery& operator=(PastMinuteQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PastMinuteQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const PastMinuteQuery* internal_default_instance() {
    return reinterpret_cast<const PastMinuteQuery*>(
               &_PastMinuteQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(PastMinuteQuery& a, PastMinuteQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(PastMinuteQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PastMinuteQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PastMinuteQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PastMinuteQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PastMinuteQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PastMinuteQuery& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PastMinuteQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.PastMinuteQuery";
  }
  protected:
  explicit PastMinuteQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kTodayFieldNumber = 3,
    kCountOfDaysFieldNumber = 2,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // .google.protobuf.Timestamp today = 3;
  bool has_today() const;
  private:
  bool _internal_has_today() const;
  public:
  void clear_today();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& today() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_today();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_today();
  void set_allocated_today(::PROTOBUF_NAMESPACE_ID::Timestamp* today);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_today() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_today();
  public:
  void unsafe_arena_set_allocated_today(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* today);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_today();

  // uint32 count_of_days = 2;
  void clear_count_of_days();
  uint32_t count_of_days() const;
  void set_count_of_days(uint32_t value);
  private:
  uint32_t _internal_count_of_days() const;
  void _internal_set_count_of_days(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:stock_api.PastMinuteQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* today_;
  uint32_t count_of_days_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class CybosDayData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.CybosDayData) */ {
 public:
  inline CybosDayData() : CybosDayData(nullptr) {}
  ~CybosDayData() override;
  explicit constexpr CybosDayData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CybosDayData(const CybosDayData& from);
  CybosDayData(CybosDayData&& from) noexcept
    : CybosDayData() {
    *this = ::std::move(from);
  }

  inline CybosDayData& operator=(const CybosDayData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CybosDayData& operator=(CybosDayData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CybosDayData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CybosDayData* internal_default_instance() {
    return reinterpret_cast<const CybosDayData*>(
               &_CybosDayData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CybosDayData& a, CybosDayData& b) {
    a.Swap(&b);
  }
  inline void Swap(CybosDayData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CybosDayData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CybosDayData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CybosDayData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CybosDayData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CybosDayData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CybosDayData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.CybosDayData";
  }
  protected:
  explicit CybosDayData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateFieldNumber = 1,
    kTimeFieldNumber = 2,
    kStartPriceFieldNumber = 3,
    kHighestPriceFieldNumber = 4,
    kLowestPriceFieldNumber = 5,
    kClosePriceFieldNumber = 6,
    kVolumeFieldNumber = 7,
    kAmountFieldNumber = 8,
    kCumSellVolumeFieldNumber = 9,
    kCumBuyVolumeFieldNumber = 10,
    kForeignerHoldVolumeFieldNumber = 11,
    kInstitutionBuyVolumeFieldNumber = 13,
    kForeignerHoldRateFieldNumber = 12,
    kIsSynchronizedBiddingFieldNumber = 15,
    kInstitutionCumBuyVolumeFieldNumber = 14,
  };
  // uint32 date = 1;
  void clear_date();
  uint32_t date() const;
  void set_date(uint32_t value);
  private:
  uint32_t _internal_date() const;
  void _internal_set_date(uint32_t value);
  public:

  // uint32 time = 2;
  void clear_time();
  uint32_t time() const;
  void set_time(uint32_t value);
  private:
  uint32_t _internal_time() const;
  void _internal_set_time(uint32_t value);
  public:

  // uint32 start_price = 3;
  void clear_start_price();
  uint32_t start_price() const;
  void set_start_price(uint32_t value);
  private:
  uint32_t _internal_start_price() const;
  void _internal_set_start_price(uint32_t value);
  public:

  // uint32 highest_price = 4;
  void clear_highest_price();
  uint32_t highest_price() const;
  void set_highest_price(uint32_t value);
  private:
  uint32_t _internal_highest_price() const;
  void _internal_set_highest_price(uint32_t value);
  public:

  // uint32 lowest_price = 5;
  void clear_lowest_price();
  uint32_t lowest_price() const;
  void set_lowest_price(uint32_t value);
  private:
  uint32_t _internal_lowest_price() const;
  void _internal_set_lowest_price(uint32_t value);
  public:

  // uint32 close_price = 6;
  void clear_close_price();
  uint32_t close_price() const;
  void set_close_price(uint32_t value);
  private:
  uint32_t _internal_close_price() const;
  void _internal_set_close_price(uint32_t value);
  public:

  // int64 volume = 7;
  void clear_volume();
  int64_t volume() const;
  void set_volume(int64_t value);
  private:
  int64_t _internal_volume() const;
  void _internal_set_volume(int64_t value);
  public:

  // uint64 amount = 8;
  void clear_amount();
  uint64_t amount() const;
  void set_amount(uint64_t value);
  private:
  uint64_t _internal_amount() const;
  void _internal_set_amount(uint64_t value);
  public:

  // uint64 cum_sell_volume = 9;
  void clear_cum_sell_volume();
  uint64_t cum_sell_volume() const;
  void set_cum_sell_volume(uint64_t value);
  private:
  uint64_t _internal_cum_sell_volume() const;
  void _internal_set_cum_sell_volume(uint64_t value);
  public:

  // uint64 cum_buy_volume = 10;
  void clear_cum_buy_volume();
  uint64_t cum_buy_volume() const;
  void set_cum_buy_volume(uint64_t value);
  private:
  uint64_t _internal_cum_buy_volume() const;
  void _internal_set_cum_buy_volume(uint64_t value);
  public:

  // int64 foreigner_hold_volume = 11;
  void clear_foreigner_hold_volume();
  int64_t foreigner_hold_volume() const;
  void set_foreigner_hold_volume(int64_t value);
  private:
  int64_t _internal_foreigner_hold_volume() const;
  void _internal_set_foreigner_hold_volume(int64_t value);
  public:

  // int64 institution_buy_volume = 13;
  void clear_institution_buy_volume();
  int64_t institution_buy_volume() const;
  void set_institution_buy_volume(int64_t value);
  private:
  int64_t _internal_institution_buy_volume() const;
  void _internal_set_institution_buy_volume(int64_t value);
  public:

  // float foreigner_hold_rate = 12;
  void clear_foreigner_hold_rate();
  float foreigner_hold_rate() const;
  void set_foreigner_hold_rate(float value);
  private:
  float _internal_foreigner_hold_rate() const;
  void _internal_set_foreigner_hold_rate(float value);
  public:

  // bool is_synchronized_bidding = 15;
  void clear_is_synchronized_bidding();
  bool is_synchronized_bidding() const;
  void set_is_synchronized_bidding(bool value);
  private:
  bool _internal_is_synchronized_bidding() const;
  void _internal_set_is_synchronized_bidding(bool value);
  public:

  // int64 institution_cum_buy_volume = 14;
  void clear_institution_cum_buy_volume();
  int64_t institution_cum_buy_volume() const;
  void set_institution_cum_buy_volume(int64_t value);
  private:
  int64_t _internal_institution_cum_buy_volume() const;
  void _internal_set_institution_cum_buy_volume(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:stock_api.CybosDayData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t date_;
  uint32_t time_;
  uint32_t start_price_;
  uint32_t highest_price_;
  uint32_t lowest_price_;
  uint32_t close_price_;
  int64_t volume_;
  uint64_t amount_;
  uint64_t cum_sell_volume_;
  uint64_t cum_buy_volume_;
  int64_t foreigner_hold_volume_;
  int64_t institution_buy_volume_;
  float foreigner_hold_rate_;
  bool is_synchronized_bidding_;
  int64_t institution_cum_buy_volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class CybosDayDatas final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.CybosDayDatas) */ {
 public:
  inline CybosDayDatas() : CybosDayDatas(nullptr) {}
  ~CybosDayDatas() override;
  explicit constexpr CybosDayDatas(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CybosDayDatas(const CybosDayDatas& from);
  CybosDayDatas(CybosDayDatas&& from) noexcept
    : CybosDayDatas() {
    *this = ::std::move(from);
  }

  inline CybosDayDatas& operator=(const CybosDayDatas& from) {
    CopyFrom(from);
    return *this;
  }
  inline CybosDayDatas& operator=(CybosDayDatas&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CybosDayDatas& default_instance() {
    return *internal_default_instance();
  }
  static inline const CybosDayDatas* internal_default_instance() {
    return reinterpret_cast<const CybosDayDatas*>(
               &_CybosDayDatas_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CybosDayDatas& a, CybosDayDatas& b) {
    a.Swap(&b);
  }
  inline void Swap(CybosDayDatas* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CybosDayDatas* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CybosDayDatas* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CybosDayDatas>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CybosDayDatas& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CybosDayDatas& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CybosDayDatas* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.CybosDayDatas";
  }
  protected:
  explicit CybosDayDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDayDataFieldNumber = 1,
  };
  // repeated .stock_api.CybosDayData day_data = 1;
  int day_data_size() const;
  private:
  int _internal_day_data_size() const;
  public:
  void clear_day_data();
  ::stock_api::CybosDayData* mutable_day_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stock_api::CybosDayData >*
      mutable_day_data();
  private:
  const ::stock_api::CybosDayData& _internal_day_data(int index) const;
  ::stock_api::CybosDayData* _internal_add_day_data();
  public:
  const ::stock_api::CybosDayData& day_data(int index) const;
  ::stock_api::CybosDayData* add_day_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stock_api::CybosDayData >&
      day_data() const;

  // @@protoc_insertion_point(class_scope:stock_api.CybosDayDatas)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stock_api::CybosDayData > day_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class CybosSubjectTickData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.CybosSubjectTickData) */ {
 public:
  inline CybosSubjectTickData() : CybosSubjectTickData(nullptr) {}
  ~CybosSubjectTickData() override;
  explicit constexpr CybosSubjectTickData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CybosSubjectTickData(const CybosSubjectTickData& from);
  CybosSubjectTickData(CybosSubjectTickData&& from) noexcept
    : CybosSubjectTickData() {
    *this = ::std::move(from);
  }

  inline CybosSubjectTickData& operator=(const CybosSubjectTickData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CybosSubjectTickData& operator=(CybosSubjectTickData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CybosSubjectTickData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CybosSubjectTickData* internal_default_instance() {
    return reinterpret_cast<const CybosSubjectTickData*>(
               &_CybosSubjectTickData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CybosSubjectTickData& a, CybosSubjectTickData& b) {
    a.Swap(&b);
  }
  inline void Swap(CybosSubjectTickData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CybosSubjectTickData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CybosSubjectTickData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CybosSubjectTickData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CybosSubjectTickData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CybosSubjectTickData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CybosSubjectTickData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.CybosSubjectTickData";
  }
  protected:
  explicit CybosSubjectTickData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kCodeFieldNumber = 4,
    kCompanyNameFieldNumber = 5,
    kTickDateFieldNumber = 1,
    kTimeFieldNumber = 2,
    kBuyOrSellFieldNumber = 6,
    kVolumeFieldNumber = 7,
    kTotalVolumeFieldNumber = 8,
    kForeignerTotalVolumeFieldNumber = 9,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string code = 4;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string company_name = 5;
  void clear_company_name();
  const std::string& company_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_company_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_company_name();
  PROTOBUF_NODISCARD std::string* release_company_name();
  void set_allocated_company_name(std::string* company_name);
  private:
  const std::string& _internal_company_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_company_name(const std::string& value);
  std::string* _internal_mutable_company_name();
  public:

  // .google.protobuf.Timestamp tick_date = 1;
  bool has_tick_date() const;
  private:
  bool _internal_has_tick_date() const;
  public:
  void clear_tick_date();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& tick_date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_tick_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_tick_date();
  void set_allocated_tick_date(::PROTOBUF_NAMESPACE_ID::Timestamp* tick_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_tick_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_tick_date();
  public:
  void unsafe_arena_set_allocated_tick_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* tick_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_tick_date();

  // uint32 time = 2;
  void clear_time();
  uint32_t time() const;
  void set_time(uint32_t value);
  private:
  uint32_t _internal_time() const;
  void _internal_set_time(uint32_t value);
  public:

  // bool buy_or_sell = 6;
  void clear_buy_or_sell();
  bool buy_or_sell() const;
  void set_buy_or_sell(bool value);
  private:
  bool _internal_buy_or_sell() const;
  void _internal_set_buy_or_sell(bool value);
  public:

  // uint64 volume = 7;
  void clear_volume();
  uint64_t volume() const;
  void set_volume(uint64_t value);
  private:
  uint64_t _internal_volume() const;
  void _internal_set_volume(uint64_t value);
  public:

  // int64 total_volume = 8;
  void clear_total_volume();
  int64_t total_volume() const;
  void set_total_volume(int64_t value);
  private:
  int64_t _internal_total_volume() const;
  void _internal_set_total_volume(int64_t value);
  public:

  // int64 foreigner_total_volume = 9;
  void clear_foreigner_total_volume();
  int64_t foreigner_total_volume() const;
  void set_foreigner_total_volume(int64_t value);
  private:
  int64_t _internal_foreigner_total_volume() const;
  void _internal_set_foreigner_total_volume(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:stock_api.CybosSubjectTickData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr company_name_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* tick_date_;
  uint32_t time_;
  bool buy_or_sell_;
  uint64_t volume_;
  int64_t total_volume_;
  int64_t foreigner_total_volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class CybosTickDatas final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.CybosTickDatas) */ {
 public:
  inline CybosTickDatas() : CybosTickDatas(nullptr) {}
  ~CybosTickDatas() override;
  explicit constexpr CybosTickDatas(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CybosTickDatas(const CybosTickDatas& from);
  CybosTickDatas(CybosTickDatas&& from) noexcept
    : CybosTickDatas() {
    *this = ::std::move(from);
  }

  inline CybosTickDatas& operator=(const CybosTickDatas& from) {
    CopyFrom(from);
    return *this;
  }
  inline CybosTickDatas& operator=(CybosTickDatas&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CybosTickDatas& default_instance() {
    return *internal_default_instance();
  }
  static inline const CybosTickDatas* internal_default_instance() {
    return reinterpret_cast<const CybosTickDatas*>(
               &_CybosTickDatas_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CybosTickDatas& a, CybosTickDatas& b) {
    a.Swap(&b);
  }
  inline void Swap(CybosTickDatas* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CybosTickDatas* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CybosTickDatas* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CybosTickDatas>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CybosTickDatas& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CybosTickDatas& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CybosTickDatas* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.CybosTickDatas";
  }
  protected:
  explicit CybosTickDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTickDataFieldNumber = 1,
  };
  // repeated .stock_api.CybosTickData tick_data = 1;
  int tick_data_size() const;
  private:
  int _internal_tick_data_size() const;
  public:
  void clear_tick_data();
  ::stock_api::CybosTickData* mutable_tick_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stock_api::CybosTickData >*
      mutable_tick_data();
  private:
  const ::stock_api::CybosTickData& _internal_tick_data(int index) const;
  ::stock_api::CybosTickData* _internal_add_tick_data();
  public:
  const ::stock_api::CybosTickData& tick_data(int index) const;
  ::stock_api::CybosTickData* add_tick_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stock_api::CybosTickData >&
      tick_data() const;

  // @@protoc_insertion_point(class_scope:stock_api.CybosTickDatas)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stock_api::CybosTickData > tick_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class CybosTickData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.CybosTickData) */ {
 public:
  inline CybosTickData() : CybosTickData(nullptr) {}
  ~CybosTickData() override;
  explicit constexpr CybosTickData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CybosTickData(const CybosTickData& from);
  CybosTickData(CybosTickData&& from) noexcept
    : CybosTickData() {
    *this = ::std::move(from);
  }

  inline CybosTickData& operator=(const CybosTickData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CybosTickData& operator=(CybosTickData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CybosTickData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CybosTickData* internal_default_instance() {
    return reinterpret_cast<const CybosTickData*>(
               &_CybosTickData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CybosTickData& a, CybosTickData& b) {
    a.Swap(&b);
  }
  inline void Swap(CybosTickData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CybosTickData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CybosTickData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CybosTickData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CybosTickData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CybosTickData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CybosTickData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.CybosTickData";
  }
  protected:
  explicit CybosTickData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 2,
    kCompanyNameFieldNumber = 3,
    kTickDateFieldNumber = 1,
    kYesterdayDiffFieldNumber = 4,
    kTimeFieldNumber = 5,
    kStartPriceFieldNumber = 6,
    kHighestPriceFieldNumber = 7,
    kLowestPriceFieldNumber = 8,
    kAskPriceFieldNumber = 9,
    kCumVolumeFieldNumber = 11,
    kBidPriceFieldNumber = 10,
    kCurrentPriceFieldNumber = 13,
    kCumAmountFieldNumber = 12,
    kCumSellVolumeByPriceFieldNumber = 15,
    kCumBuyVolumeByPriceFieldNumber = 16,
    kVolumeFieldNumber = 17,
    kTimeWithSecFieldNumber = 18,
    kMarketTypeExpFieldNumber = 19,
    kBuyOrSellFieldNumber = 14,
    kIsKospiFieldNumber = 24,
    kMarketTypeFieldNumber = 20,
    kOutTimeVolumeFieldNumber = 21,
    kCumSellVolumeFieldNumber = 22,
    kCumBuyVolumeFieldNumber = 23,
    kAmountRatioFieldNumber = 25,
  };
  // string code = 2;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string company_name = 3;
  void clear_company_name();
  const std::string& company_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_company_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_company_name();
  PROTOBUF_NODISCARD std::string* release_company_name();
  void set_allocated_company_name(std::string* company_name);
  private:
  const std::string& _internal_company_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_company_name(const std::string& value);
  std::string* _internal_mutable_company_name();
  public:

  // .google.protobuf.Timestamp tick_date = 1;
  bool has_tick_date() const;
  private:
  bool _internal_has_tick_date() const;
  public:
  void clear_tick_date();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& tick_date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_tick_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_tick_date();
  void set_allocated_tick_date(::PROTOBUF_NAMESPACE_ID::Timestamp* tick_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_tick_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_tick_date();
  public:
  void unsafe_arena_set_allocated_tick_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* tick_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_tick_date();

  // int32 yesterday_diff = 4;
  void clear_yesterday_diff();
  int32_t yesterday_diff() const;
  void set_yesterday_diff(int32_t value);
  private:
  int32_t _internal_yesterday_diff() const;
  void _internal_set_yesterday_diff(int32_t value);
  public:

  // uint32 time = 5;
  void clear_time();
  uint32_t time() const;
  void set_time(uint32_t value);
  private:
  uint32_t _internal_time() const;
  void _internal_set_time(uint32_t value);
  public:

  // uint32 start_price = 6;
  void clear_start_price();
  uint32_t start_price() const;
  void set_start_price(uint32_t value);
  private:
  uint32_t _internal_start_price() const;
  void _internal_set_start_price(uint32_t value);
  public:

  // uint32 highest_price = 7;
  void clear_highest_price();
  uint32_t highest_price() const;
  void set_highest_price(uint32_t value);
  private:
  uint32_t _internal_highest_price() const;
  void _internal_set_highest_price(uint32_t value);
  public:

  // uint32 lowest_price = 8;
  void clear_lowest_price();
  uint32_t lowest_price() const;
  void set_lowest_price(uint32_t value);
  private:
  uint32_t _internal_lowest_price() const;
  void _internal_set_lowest_price(uint32_t value);
  public:

  // uint32 ask_price = 9;
  void clear_ask_price();
  uint32_t ask_price() const;
  void set_ask_price(uint32_t value);
  private:
  uint32_t _internal_ask_price() const;
  void _internal_set_ask_price(uint32_t value);
  public:

  // uint64 cum_volume = 11;
  void clear_cum_volume();
  uint64_t cum_volume() const;
  void set_cum_volume(uint64_t value);
  private:
  uint64_t _internal_cum_volume() const;
  void _internal_set_cum_volume(uint64_t value);
  public:

  // uint32 bid_price = 10;
  void clear_bid_price();
  uint32_t bid_price() const;
  void set_bid_price(uint32_t value);
  private:
  uint32_t _internal_bid_price() const;
  void _internal_set_bid_price(uint32_t value);
  public:

  // uint32 current_price = 13;
  void clear_current_price();
  uint32_t current_price() const;
  void set_current_price(uint32_t value);
  private:
  uint32_t _internal_current_price() const;
  void _internal_set_current_price(uint32_t value);
  public:

  // uint64 cum_amount = 12;
  void clear_cum_amount();
  uint64_t cum_amount() const;
  void set_cum_amount(uint64_t value);
  private:
  uint64_t _internal_cum_amount() const;
  void _internal_set_cum_amount(uint64_t value);
  public:

  // uint64 cum_sell_volume_by_price = 15;
  void clear_cum_sell_volume_by_price();
  uint64_t cum_sell_volume_by_price() const;
  void set_cum_sell_volume_by_price(uint64_t value);
  private:
  uint64_t _internal_cum_sell_volume_by_price() const;
  void _internal_set_cum_sell_volume_by_price(uint64_t value);
  public:

  // uint64 cum_buy_volume_by_price = 16;
  void clear_cum_buy_volume_by_price();
  uint64_t cum_buy_volume_by_price() const;
  void set_cum_buy_volume_by_price(uint64_t value);
  private:
  uint64_t _internal_cum_buy_volume_by_price() const;
  void _internal_set_cum_buy_volume_by_price(uint64_t value);
  public:

  // int64 volume = 17;
  void clear_volume();
  int64_t volume() const;
  void set_volume(int64_t value);
  private:
  int64_t _internal_volume() const;
  void _internal_set_volume(int64_t value);
  public:

  // uint32 time_with_sec = 18;
  void clear_time_with_sec();
  uint32_t time_with_sec() const;
  void set_time_with_sec(uint32_t value);
  private:
  uint32_t _internal_time_with_sec() const;
  void _internal_set_time_with_sec(uint32_t value);
  public:

  // uint32 market_type_exp = 19;
  void clear_market_type_exp();
  uint32_t market_type_exp() const;
  void set_market_type_exp(uint32_t value);
  private:
  uint32_t _internal_market_type_exp() const;
  void _internal_set_market_type_exp(uint32_t value);
  public:

  // bool buy_or_sell = 14;
  void clear_buy_or_sell();
  bool buy_or_sell() const;
  void set_buy_or_sell(bool value);
  private:
  bool _internal_buy_or_sell() const;
  void _internal_set_buy_or_sell(bool value);
  public:

  // bool is_kospi = 24;
  void clear_is_kospi();
  bool is_kospi() const;
  void set_is_kospi(bool value);
  private:
  bool _internal_is_kospi() const;
  void _internal_set_is_kospi(bool value);
  public:

  // uint32 market_type = 20;
  void clear_market_type();
  uint32_t market_type() const;
  void set_market_type(uint32_t value);
  private:
  uint32_t _internal_market_type() const;
  void _internal_set_market_type(uint32_t value);
  public:

  // uint64 out_time_volume = 21;
  void clear_out_time_volume();
  uint64_t out_time_volume() const;
  void set_out_time_volume(uint64_t value);
  private:
  uint64_t _internal_out_time_volume() const;
  void _internal_set_out_time_volume(uint64_t value);
  public:

  // uint64 cum_sell_volume = 22;
  void clear_cum_sell_volume();
  uint64_t cum_sell_volume() const;
  void set_cum_sell_volume(uint64_t value);
  private:
  uint64_t _internal_cum_sell_volume() const;
  void _internal_set_cum_sell_volume(uint64_t value);
  public:

  // uint64 cum_buy_volume = 23;
  void clear_cum_buy_volume();
  uint64_t cum_buy_volume() const;
  void set_cum_buy_volume(uint64_t value);
  private:
  uint64_t _internal_cum_buy_volume() const;
  void _internal_set_cum_buy_volume(uint64_t value);
  public:

  // float amount_ratio = 25;
  void clear_amount_ratio();
  float amount_ratio() const;
  void set_amount_ratio(float value);
  private:
  float _internal_amount_ratio() const;
  void _internal_set_amount_ratio(float value);
  public:

  // @@protoc_insertion_point(class_scope:stock_api.CybosTickData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr company_name_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* tick_date_;
  int32_t yesterday_diff_;
  uint32_t time_;
  uint32_t start_price_;
  uint32_t highest_price_;
  uint32_t lowest_price_;
  uint32_t ask_price_;
  uint64_t cum_volume_;
  uint32_t bid_price_;
  uint32_t current_price_;
  uint64_t cum_amount_;
  uint64_t cum_sell_volume_by_price_;
  uint64_t cum_buy_volume_by_price_;
  int64_t volume_;
  uint32_t time_with_sec_;
  uint32_t market_type_exp_;
  bool buy_or_sell_;
  bool is_kospi_;
  uint32_t market_type_;
  uint64_t out_time_volume_;
  uint64_t cum_sell_volume_;
  uint64_t cum_buy_volume_;
  float amount_ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class CybosBidAskTickData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.CybosBidAskTickData) */ {
 public:
  inline CybosBidAskTickData() : CybosBidAskTickData(nullptr) {}
  ~CybosBidAskTickData() override;
  explicit constexpr CybosBidAskTickData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CybosBidAskTickData(const CybosBidAskTickData& from);
  CybosBidAskTickData(CybosBidAskTickData&& from) noexcept
    : CybosBidAskTickData() {
    *this = ::std::move(from);
  }

  inline CybosBidAskTickData& operator=(const CybosBidAskTickData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CybosBidAskTickData& operator=(CybosBidAskTickData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CybosBidAskTickData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CybosBidAskTickData* internal_default_instance() {
    return reinterpret_cast<const CybosBidAskTickData*>(
               &_CybosBidAskTickData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CybosBidAskTickData& a, CybosBidAskTickData& b) {
    a.Swap(&b);
  }
  inline void Swap(CybosBidAskTickData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CybosBidAskTickData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CybosBidAskTickData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CybosBidAskTickData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CybosBidAskTickData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CybosBidAskTickData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CybosBidAskTickData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.CybosBidAskTickData";
  }
  protected:
  explicit CybosBidAskTickData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAskPricesFieldNumber = 5,
    kBidPricesFieldNumber = 6,
    kAskRemainsFieldNumber = 7,
    kBidRemainsFieldNumber = 8,
    kCodeFieldNumber = 2,
    kTickDateFieldNumber = 1,
    kVolumeFieldNumber = 4,
    kTotalAskRemainFieldNumber = 9,
    kTotalBidRemainFieldNumber = 10,
    kOutTimeTotalAskRemainFieldNumber = 11,
    kOutTimeTotalBidRemainFieldNumber = 12,
    kTimeFieldNumber = 3,
  };
  // repeated int32 ask_prices = 5;
  int ask_prices_size() const;
  private:
  int _internal_ask_prices_size() const;
  public:
  void clear_ask_prices();
  private:
  int32_t _internal_ask_prices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_ask_prices() const;
  void _internal_add_ask_prices(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_ask_prices();
  public:
  int32_t ask_prices(int index) const;
  void set_ask_prices(int index, int32_t value);
  void add_ask_prices(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      ask_prices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_ask_prices();

  // repeated int32 bid_prices = 6;
  int bid_prices_size() const;
  private:
  int _internal_bid_prices_size() const;
  public:
  void clear_bid_prices();
  private:
  int32_t _internal_bid_prices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_bid_prices() const;
  void _internal_add_bid_prices(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_bid_prices();
  public:
  int32_t bid_prices(int index) const;
  void set_bid_prices(int index, int32_t value);
  void add_bid_prices(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      bid_prices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_bid_prices();

  // repeated uint32 ask_remains = 7;
  int ask_remains_size() const;
  private:
  int _internal_ask_remains_size() const;
  public:
  void clear_ask_remains();
  private:
  uint32_t _internal_ask_remains(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_ask_remains() const;
  void _internal_add_ask_remains(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_ask_remains();
  public:
  uint32_t ask_remains(int index) const;
  void set_ask_remains(int index, uint32_t value);
  void add_ask_remains(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      ask_remains() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_ask_remains();

  // repeated uint32 bid_remains = 8;
  int bid_remains_size() const;
  private:
  int _internal_bid_remains_size() const;
  public:
  void clear_bid_remains();
  private:
  uint32_t _internal_bid_remains(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_bid_remains() const;
  void _internal_add_bid_remains(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_bid_remains();
  public:
  uint32_t bid_remains(int index) const;
  void set_bid_remains(int index, uint32_t value);
  void add_bid_remains(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      bid_remains() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_bid_remains();

  // string code = 2;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // .google.protobuf.Timestamp tick_date = 1;
  bool has_tick_date() const;
  private:
  bool _internal_has_tick_date() const;
  public:
  void clear_tick_date();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& tick_date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_tick_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_tick_date();
  void set_allocated_tick_date(::PROTOBUF_NAMESPACE_ID::Timestamp* tick_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_tick_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_tick_date();
  public:
  void unsafe_arena_set_allocated_tick_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* tick_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_tick_date();

  // uint64 volume = 4;
  void clear_volume();
  uint64_t volume() const;
  void set_volume(uint64_t value);
  private:
  uint64_t _internal_volume() const;
  void _internal_set_volume(uint64_t value);
  public:

  // uint64 total_ask_remain = 9;
  void clear_total_ask_remain();
  uint64_t total_ask_remain() const;
  void set_total_ask_remain(uint64_t value);
  private:
  uint64_t _internal_total_ask_remain() const;
  void _internal_set_total_ask_remain(uint64_t value);
  public:

  // uint64 total_bid_remain = 10;
  void clear_total_bid_remain();
  uint64_t total_bid_remain() const;
  void set_total_bid_remain(uint64_t value);
  private:
  uint64_t _internal_total_bid_remain() const;
  void _internal_set_total_bid_remain(uint64_t value);
  public:

  // int64 out_time_total_ask_remain = 11;
  void clear_out_time_total_ask_remain();
  int64_t out_time_total_ask_remain() const;
  void set_out_time_total_ask_remain(int64_t value);
  private:
  int64_t _internal_out_time_total_ask_remain() const;
  void _internal_set_out_time_total_ask_remain(int64_t value);
  public:

  // int64 out_time_total_bid_remain = 12;
  void clear_out_time_total_bid_remain();
  int64_t out_time_total_bid_remain() const;
  void set_out_time_total_bid_remain(int64_t value);
  private:
  int64_t _internal_out_time_total_bid_remain() const;
  void _internal_set_out_time_total_bid_remain(int64_t value);
  public:

  // uint32 time = 3;
  void clear_time();
  uint32_t time() const;
  void set_time(uint32_t value);
  private:
  uint32_t _internal_time() const;
  void _internal_set_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:stock_api.CybosBidAskTickData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > ask_prices_;
  mutable std::atomic<int> _ask_prices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > bid_prices_;
  mutable std::atomic<int> _bid_prices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > ask_remains_;
  mutable std::atomic<int> _ask_remains_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > bid_remains_;
  mutable std::atomic<int> _bid_remains_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* tick_date_;
  uint64_t volume_;
  uint64_t total_ask_remain_;
  uint64_t total_bid_remain_;
  int64_t out_time_total_ask_remain_;
  int64_t out_time_total_bid_remain_;
  uint32_t time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class CybosStockAlarm final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_api.CybosStockAlarm) */ {
 public:
  inline CybosStockAlarm() : CybosStockAlarm(nullptr) {}
  ~CybosStockAlarm() override;
  explicit constexpr CybosStockAlarm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CybosStockAlarm(const CybosStockAlarm& from);
  CybosStockAlarm(CybosStockAlarm&& from) noexcept
    : CybosStockAlarm() {
    *this = ::std::move(from);
  }

  inline CybosStockAlarm& operator=(const CybosStockAlarm& from) {
    CopyFrom(from);
    return *this;
  }
  inline CybosStockAlarm& operator=(CybosStockAlarm&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CybosStockAlarm& default_instance() {
    return *internal_default_instance();
  }
  static inline const CybosStockAlarm* internal_default_instance() {
    return reinterpret_cast<const CybosStockAlarm*>(
               &_CybosStockAlarm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CybosStockAlarm& a, CybosStockAlarm& b) {
    a.Swap(&b);
  }
  inline void Swap(CybosStockAlarm* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CybosStockAlarm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CybosStockAlarm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CybosStockAlarm>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CybosStockAlarm& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CybosStockAlarm& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CybosStockAlarm* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_api.CybosStockAlarm";
  }
  protected:
  explicit CybosStockAlarm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 5,
    kTitleFieldNumber = 7,
    kContentFieldNumber = 8,
    kTickDateFieldNumber = 1,
    kTimeFieldNumber = 2,
    kTypeCategoryFieldNumber = 3,
    kMarketCategoryFieldNumber = 4,
    kAlarmCategoryFieldNumber = 6,
  };
  // string code = 5;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string title = 7;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string content = 8;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .google.protobuf.Timestamp tick_date = 1;
  bool has_tick_date() const;
  private:
  bool _internal_has_tick_date() const;
  public:
  void clear_tick_date();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& tick_date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_tick_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_tick_date();
  void set_allocated_tick_date(::PROTOBUF_NAMESPACE_ID::Timestamp* tick_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_tick_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_tick_date();
  public:
  void unsafe_arena_set_allocated_tick_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* tick_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_tick_date();

  // uint32 time = 2;
  void clear_time();
  uint32_t time() const;
  void set_time(uint32_t value);
  private:
  uint32_t _internal_time() const;
  void _internal_set_time(uint32_t value);
  public:

  // int32 type_category = 3;
  void clear_type_category();
  int32_t type_category() const;
  void set_type_category(int32_t value);
  private:
  int32_t _internal_type_category() const;
  void _internal_set_type_category(int32_t value);
  public:

  // int32 market_category = 4;
  void clear_market_category();
  int32_t market_category() const;
  void set_market_category(int32_t value);
  private:
  int32_t _internal_market_category() const;
  void _internal_set_market_category(int32_t value);
  public:

  // int32 alarm_category = 6;
  void clear_alarm_category();
  int32_t alarm_category() const;
  void set_alarm_category(int32_t value);
  private:
  int32_t _internal_alarm_category() const;
  void _internal_set_alarm_category(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:stock_api.CybosStockAlarm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* tick_date_;
  uint32_t time_;
  int32_t type_category_;
  int32_t market_category_;
  int32_t alarm_category_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stock_5fprovider_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StockCodeQuery

// string code = 1;
inline void StockCodeQuery::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& StockCodeQuery::code() const {
  // @@protoc_insertion_point(field_get:stock_api.StockCodeQuery.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StockCodeQuery::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stock_api.StockCodeQuery.code)
}
inline std::string* StockCodeQuery::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:stock_api.StockCodeQuery.code)
  return _s;
}
inline const std::string& StockCodeQuery::_internal_code() const {
  return code_.Get();
}
inline void StockCodeQuery::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StockCodeQuery::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StockCodeQuery::release_code() {
  // @@protoc_insertion_point(field_release:stock_api.StockCodeQuery.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StockCodeQuery::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stock_api.StockCodeQuery.code)
}

// -------------------------------------------------------------------

// CodeList

// repeated string codelist = 1;
inline int CodeList::_internal_codelist_size() const {
  return codelist_.size();
}
inline int CodeList::codelist_size() const {
  return _internal_codelist_size();
}
inline void CodeList::clear_codelist() {
  codelist_.Clear();
}
inline std::string* CodeList::add_codelist() {
  std::string* _s = _internal_add_codelist();
  // @@protoc_insertion_point(field_add_mutable:stock_api.CodeList.codelist)
  return _s;
}
inline const std::string& CodeList::_internal_codelist(int index) const {
  return codelist_.Get(index);
}
inline const std::string& CodeList::codelist(int index) const {
  // @@protoc_insertion_point(field_get:stock_api.CodeList.codelist)
  return _internal_codelist(index);
}
inline std::string* CodeList::mutable_codelist(int index) {
  // @@protoc_insertion_point(field_mutable:stock_api.CodeList.codelist)
  return codelist_.Mutable(index);
}
inline void CodeList::set_codelist(int index, const std::string& value) {
  codelist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:stock_api.CodeList.codelist)
}
inline void CodeList::set_codelist(int index, std::string&& value) {
  codelist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:stock_api.CodeList.codelist)
}
inline void CodeList::set_codelist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  codelist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:stock_api.CodeList.codelist)
}
inline void CodeList::set_codelist(int index, const char* value, size_t size) {
  codelist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:stock_api.CodeList.codelist)
}
inline std::string* CodeList::_internal_add_codelist() {
  return codelist_.Add();
}
inline void CodeList::add_codelist(const std::string& value) {
  codelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:stock_api.CodeList.codelist)
}
inline void CodeList::add_codelist(std::string&& value) {
  codelist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:stock_api.CodeList.codelist)
}
inline void CodeList::add_codelist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  codelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:stock_api.CodeList.codelist)
}
inline void CodeList::add_codelist(const char* value, size_t size) {
  codelist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:stock_api.CodeList.codelist)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CodeList::codelist() const {
  // @@protoc_insertion_point(field_list:stock_api.CodeList.codelist)
  return codelist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CodeList::mutable_codelist() {
  // @@protoc_insertion_point(field_mutable_list:stock_api.CodeList.codelist)
  return &codelist_;
}

// -------------------------------------------------------------------

// ViPriceInfo

// string code = 1;
inline void ViPriceInfo::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& ViPriceInfo::code() const {
  // @@protoc_insertion_point(field_get:stock_api.ViPriceInfo.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ViPriceInfo::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stock_api.ViPriceInfo.code)
}
inline std::string* ViPriceInfo::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:stock_api.ViPriceInfo.code)
  return _s;
}
inline const std::string& ViPriceInfo::_internal_code() const {
  return code_.Get();
}
inline void ViPriceInfo::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ViPriceInfo::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ViPriceInfo::release_code() {
  // @@protoc_insertion_point(field_release:stock_api.ViPriceInfo.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ViPriceInfo::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stock_api.ViPriceInfo.code)
}

// repeated int32 price = 2;
inline int ViPriceInfo::_internal_price_size() const {
  return price_.size();
}
inline int ViPriceInfo::price_size() const {
  return _internal_price_size();
}
inline void ViPriceInfo::clear_price() {
  price_.Clear();
}
inline int32_t ViPriceInfo::_internal_price(int index) const {
  return price_.Get(index);
}
inline int32_t ViPriceInfo::price(int index) const {
  // @@protoc_insertion_point(field_get:stock_api.ViPriceInfo.price)
  return _internal_price(index);
}
inline void ViPriceInfo::set_price(int index, int32_t value) {
  price_.Set(index, value);
  // @@protoc_insertion_point(field_set:stock_api.ViPriceInfo.price)
}
inline void ViPriceInfo::_internal_add_price(int32_t value) {
  price_.Add(value);
}
inline void ViPriceInfo::add_price(int32_t value) {
  _internal_add_price(value);
  // @@protoc_insertion_point(field_add:stock_api.ViPriceInfo.price)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ViPriceInfo::_internal_price() const {
  return price_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ViPriceInfo::price() const {
  // @@protoc_insertion_point(field_list:stock_api.ViPriceInfo.price)
  return _internal_price();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ViPriceInfo::_internal_mutable_price() {
  return &price_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ViPriceInfo::mutable_price() {
  // @@protoc_insertion_point(field_mutable_list:stock_api.ViPriceInfo.price)
  return _internal_mutable_price();
}

// -------------------------------------------------------------------

// Prices

// repeated int32 price = 1;
inline int Prices::_internal_price_size() const {
  return price_.size();
}
inline int Prices::price_size() const {
  return _internal_price_size();
}
inline void Prices::clear_price() {
  price_.Clear();
}
inline int32_t Prices::_internal_price(int index) const {
  return price_.Get(index);
}
inline int32_t Prices::price(int index) const {
  // @@protoc_insertion_point(field_get:stock_api.Prices.price)
  return _internal_price(index);
}
inline void Prices::set_price(int index, int32_t value) {
  price_.Set(index, value);
  // @@protoc_insertion_point(field_set:stock_api.Prices.price)
}
inline void Prices::_internal_add_price(int32_t value) {
  price_.Add(value);
}
inline void Prices::add_price(int32_t value) {
  _internal_add_price(value);
  // @@protoc_insertion_point(field_add:stock_api.Prices.price)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Prices::_internal_price() const {
  return price_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Prices::price() const {
  // @@protoc_insertion_point(field_list:stock_api.Prices.price)
  return _internal_price();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Prices::_internal_mutable_price() {
  return &price_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Prices::mutable_price() {
  // @@protoc_insertion_point(field_mutable_list:stock_api.Prices.price)
  return _internal_mutable_price();
}

// -------------------------------------------------------------------

// Bool

// bool ret = 1;
inline void Bool::clear_ret() {
  ret_ = false;
}
inline bool Bool::_internal_ret() const {
  return ret_;
}
inline bool Bool::ret() const {
  // @@protoc_insertion_point(field_get:stock_api.Bool.ret)
  return _internal_ret();
}
inline void Bool::_internal_set_ret(bool value) {
  
  ret_ = value;
}
inline void Bool::set_ret(bool value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:stock_api.Bool.ret)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BrokerLog

// float from_price = 1;
inline void BrokerLog::clear_from_price() {
  from_price_ = 0;
}
inline float BrokerLog::_internal_from_price() const {
  return from_price_;
}
inline float BrokerLog::from_price() const {
  // @@protoc_insertion_point(field_get:stock_api.BrokerLog.from_price)
  return _internal_from_price();
}
inline void BrokerLog::_internal_set_from_price(float value) {
  
  from_price_ = value;
}
inline void BrokerLog::set_from_price(float value) {
  _internal_set_from_price(value);
  // @@protoc_insertion_point(field_set:stock_api.BrokerLog.from_price)
}

// float until_price = 2;
inline void BrokerLog::clear_until_price() {
  until_price_ = 0;
}
inline float BrokerLog::_internal_until_price() const {
  return until_price_;
}
inline float BrokerLog::until_price() const {
  // @@protoc_insertion_point(field_get:stock_api.BrokerLog.until_price)
  return _internal_until_price();
}
inline void BrokerLog::_internal_set_until_price(float value) {
  
  until_price_ = value;
}
inline void BrokerLog::set_until_price(float value) {
  _internal_set_until_price(value);
  // @@protoc_insertion_point(field_set:stock_api.BrokerLog.until_price)
}

// int64 buy_volume = 3;
inline void BrokerLog::clear_buy_volume() {
  buy_volume_ = int64_t{0};
}
inline int64_t BrokerLog::_internal_buy_volume() const {
  return buy_volume_;
}
inline int64_t BrokerLog::buy_volume() const {
  // @@protoc_insertion_point(field_get:stock_api.BrokerLog.buy_volume)
  return _internal_buy_volume();
}
inline void BrokerLog::_internal_set_buy_volume(int64_t value) {
  
  buy_volume_ = value;
}
inline void BrokerLog::set_buy_volume(int64_t value) {
  _internal_set_buy_volume(value);
  // @@protoc_insertion_point(field_set:stock_api.BrokerLog.buy_volume)
}

// int64 sell_volume = 4;
inline void BrokerLog::clear_sell_volume() {
  sell_volume_ = int64_t{0};
}
inline int64_t BrokerLog::_internal_sell_volume() const {
  return sell_volume_;
}
inline int64_t BrokerLog::sell_volume() const {
  // @@protoc_insertion_point(field_get:stock_api.BrokerLog.sell_volume)
  return _internal_sell_volume();
}
inline void BrokerLog::_internal_set_sell_volume(int64_t value) {
  
  sell_volume_ = value;
}
inline void BrokerLog::set_sell_volume(int64_t value) {
  _internal_set_sell_volume(value);
  // @@protoc_insertion_point(field_set:stock_api.BrokerLog.sell_volume)
}

// int64 buy_volume_domestic = 5;
inline void BrokerLog::clear_buy_volume_domestic() {
  buy_volume_domestic_ = int64_t{0};
}
inline int64_t BrokerLog::_internal_buy_volume_domestic() const {
  return buy_volume_domestic_;
}
inline int64_t BrokerLog::buy_volume_domestic() const {
  // @@protoc_insertion_point(field_get:stock_api.BrokerLog.buy_volume_domestic)
  return _internal_buy_volume_domestic();
}
inline void BrokerLog::_internal_set_buy_volume_domestic(int64_t value) {
  
  buy_volume_domestic_ = value;
}
inline void BrokerLog::set_buy_volume_domestic(int64_t value) {
  _internal_set_buy_volume_domestic(value);
  // @@protoc_insertion_point(field_set:stock_api.BrokerLog.buy_volume_domestic)
}

// int64 buy_volume_foreign = 6;
inline void BrokerLog::clear_buy_volume_foreign() {
  buy_volume_foreign_ = int64_t{0};
}
inline int64_t BrokerLog::_internal_buy_volume_foreign() const {
  return buy_volume_foreign_;
}
inline int64_t BrokerLog::buy_volume_foreign() const {
  // @@protoc_insertion_point(field_get:stock_api.BrokerLog.buy_volume_foreign)
  return _internal_buy_volume_foreign();
}
inline void BrokerLog::_internal_set_buy_volume_foreign(int64_t value) {
  
  buy_volume_foreign_ = value;
}
inline void BrokerLog::set_buy_volume_foreign(int64_t value) {
  _internal_set_buy_volume_foreign(value);
  // @@protoc_insertion_point(field_set:stock_api.BrokerLog.buy_volume_foreign)
}

// int64 sell_volume_domestic = 7;
inline void BrokerLog::clear_sell_volume_domestic() {
  sell_volume_domestic_ = int64_t{0};
}
inline int64_t BrokerLog::_internal_sell_volume_domestic() const {
  return sell_volume_domestic_;
}
inline int64_t BrokerLog::sell_volume_domestic() const {
  // @@protoc_insertion_point(field_get:stock_api.BrokerLog.sell_volume_domestic)
  return _internal_sell_volume_domestic();
}
inline void BrokerLog::_internal_set_sell_volume_domestic(int64_t value) {
  
  sell_volume_domestic_ = value;
}
inline void BrokerLog::set_sell_volume_domestic(int64_t value) {
  _internal_set_sell_volume_domestic(value);
  // @@protoc_insertion_point(field_set:stock_api.BrokerLog.sell_volume_domestic)
}

// int64 sell_volume_foreign = 8;
inline void BrokerLog::clear_sell_volume_foreign() {
  sell_volume_foreign_ = int64_t{0};
}
inline int64_t BrokerLog::_internal_sell_volume_foreign() const {
  return sell_volume_foreign_;
}
inline int64_t BrokerLog::sell_volume_foreign() const {
  // @@protoc_insertion_point(field_get:stock_api.BrokerLog.sell_volume_foreign)
  return _internal_sell_volume_foreign();
}
inline void BrokerLog::_internal_set_sell_volume_foreign(int64_t value) {
  
  sell_volume_foreign_ = value;
}
inline void BrokerLog::set_sell_volume_foreign(int64_t value) {
  _internal_set_sell_volume_foreign(value);
  // @@protoc_insertion_point(field_set:stock_api.BrokerLog.sell_volume_foreign)
}

// map<string, int64> buy_broker = 9;
inline int BrokerLog::_internal_buy_broker_size() const {
  return buy_broker_.size();
}
inline int BrokerLog::buy_broker_size() const {
  return _internal_buy_broker_size();
}
inline void BrokerLog::clear_buy_broker() {
  buy_broker_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
BrokerLog::_internal_buy_broker() const {
  return buy_broker_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
BrokerLog::buy_broker() const {
  // @@protoc_insertion_point(field_map:stock_api.BrokerLog.buy_broker)
  return _internal_buy_broker();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
BrokerLog::_internal_mutable_buy_broker() {
  return buy_broker_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
BrokerLog::mutable_buy_broker() {
  // @@protoc_insertion_point(field_mutable_map:stock_api.BrokerLog.buy_broker)
  return _internal_mutable_buy_broker();
}

// map<string, int64> sell_broker = 10;
inline int BrokerLog::_internal_sell_broker_size() const {
  return sell_broker_.size();
}
inline int BrokerLog::sell_broker_size() const {
  return _internal_sell_broker_size();
}
inline void BrokerLog::clear_sell_broker() {
  sell_broker_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
BrokerLog::_internal_sell_broker() const {
  return sell_broker_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
BrokerLog::sell_broker() const {
  // @@protoc_insertion_point(field_map:stock_api.BrokerLog.sell_broker)
  return _internal_sell_broker();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
BrokerLog::_internal_mutable_sell_broker() {
  return sell_broker_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
BrokerLog::mutable_sell_broker() {
  // @@protoc_insertion_point(field_mutable_map:stock_api.BrokerLog.sell_broker)
  return _internal_mutable_sell_broker();
}

// -------------------------------------------------------------------

// BrokerSummary

// string code = 1;
inline void BrokerSummary::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& BrokerSummary::code() const {
  // @@protoc_insertion_point(field_get:stock_api.BrokerSummary.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrokerSummary::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stock_api.BrokerSummary.code)
}
inline std::string* BrokerSummary::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:stock_api.BrokerSummary.code)
  return _s;
}
inline const std::string& BrokerSummary::_internal_code() const {
  return code_.Get();
}
inline void BrokerSummary::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BrokerSummary::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BrokerSummary::release_code() {
  // @@protoc_insertion_point(field_release:stock_api.BrokerSummary.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BrokerSummary::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stock_api.BrokerSummary.code)
}

// int64 foreigner_total = 2;
inline void BrokerSummary::clear_foreigner_total() {
  foreigner_total_ = int64_t{0};
}
inline int64_t BrokerSummary::_internal_foreigner_total() const {
  return foreigner_total_;
}
inline int64_t BrokerSummary::foreigner_total() const {
  // @@protoc_insertion_point(field_get:stock_api.BrokerSummary.foreigner_total)
  return _internal_foreigner_total();
}
inline void BrokerSummary::_internal_set_foreigner_total(int64_t value) {
  
  foreigner_total_ = value;
}
inline void BrokerSummary::set_foreigner_total(int64_t value) {
  _internal_set_foreigner_total(value);
  // @@protoc_insertion_point(field_set:stock_api.BrokerSummary.foreigner_total)
}

// repeated .stock_api.BrokerLog broker_log = 3;
inline int BrokerSummary::_internal_broker_log_size() const {
  return broker_log_.size();
}
inline int BrokerSummary::broker_log_size() const {
  return _internal_broker_log_size();
}
inline void BrokerSummary::clear_broker_log() {
  broker_log_.Clear();
}
inline ::stock_api::BrokerLog* BrokerSummary::mutable_broker_log(int index) {
  // @@protoc_insertion_point(field_mutable:stock_api.BrokerSummary.broker_log)
  return broker_log_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stock_api::BrokerLog >*
BrokerSummary::mutable_broker_log() {
  // @@protoc_insertion_point(field_mutable_list:stock_api.BrokerSummary.broker_log)
  return &broker_log_;
}
inline const ::stock_api::BrokerLog& BrokerSummary::_internal_broker_log(int index) const {
  return broker_log_.Get(index);
}
inline const ::stock_api::BrokerLog& BrokerSummary::broker_log(int index) const {
  // @@protoc_insertion_point(field_get:stock_api.BrokerSummary.broker_log)
  return _internal_broker_log(index);
}
inline ::stock_api::BrokerLog* BrokerSummary::_internal_add_broker_log() {
  return broker_log_.Add();
}
inline ::stock_api::BrokerLog* BrokerSummary::add_broker_log() {
  ::stock_api::BrokerLog* _add = _internal_add_broker_log();
  // @@protoc_insertion_point(field_add:stock_api.BrokerSummary.broker_log)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stock_api::BrokerLog >&
BrokerSummary::broker_log() const {
  // @@protoc_insertion_point(field_list:stock_api.BrokerSummary.broker_log)
  return broker_log_;
}

// int64 max_volume = 4;
inline void BrokerSummary::clear_max_volume() {
  max_volume_ = int64_t{0};
}
inline int64_t BrokerSummary::_internal_max_volume() const {
  return max_volume_;
}
inline int64_t BrokerSummary::max_volume() const {
  // @@protoc_insertion_point(field_get:stock_api.BrokerSummary.max_volume)
  return _internal_max_volume();
}
inline void BrokerSummary::_internal_set_max_volume(int64_t value) {
  
  max_volume_ = value;
}
inline void BrokerSummary::set_max_volume(int64_t value) {
  _internal_set_max_volume(value);
  // @@protoc_insertion_point(field_set:stock_api.BrokerSummary.max_volume)
}

// -------------------------------------------------------------------

// BrokerStat

// int64 buy_volume = 1;
inline void BrokerStat::clear_buy_volume() {
  buy_volume_ = int64_t{0};
}
inline int64_t BrokerStat::_internal_buy_volume() const {
  return buy_volume_;
}
inline int64_t BrokerStat::buy_volume() const {
  // @@protoc_insertion_point(field_get:stock_api.BrokerStat.buy_volume)
  return _internal_buy_volume();
}
inline void BrokerStat::_internal_set_buy_volume(int64_t value) {
  
  buy_volume_ = value;
}
inline void BrokerStat::set_buy_volume(int64_t value) {
  _internal_set_buy_volume(value);
  // @@protoc_insertion_point(field_set:stock_api.BrokerStat.buy_volume)
}

// int64 sell_volume = 2;
inline void BrokerStat::clear_sell_volume() {
  sell_volume_ = int64_t{0};
}
inline int64_t BrokerStat::_internal_sell_volume() const {
  return sell_volume_;
}
inline int64_t BrokerStat::sell_volume() const {
  // @@protoc_insertion_point(field_get:stock_api.BrokerStat.sell_volume)
  return _internal_sell_volume();
}
inline void BrokerStat::_internal_set_sell_volume(int64_t value) {
  
  sell_volume_ = value;
}
inline void BrokerStat::set_sell_volume(int64_t value) {
  _internal_set_sell_volume(value);
  // @@protoc_insertion_point(field_set:stock_api.BrokerStat.sell_volume)
}

// -------------------------------------------------------------------

// BrokerMinuteTickList

// string code = 1;
inline void BrokerMinuteTickList::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& BrokerMinuteTickList::code() const {
  // @@protoc_insertion_point(field_get:stock_api.BrokerMinuteTickList.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrokerMinuteTickList::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stock_api.BrokerMinuteTickList.code)
}
inline std::string* BrokerMinuteTickList::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:stock_api.BrokerMinuteTickList.code)
  return _s;
}
inline const std::string& BrokerMinuteTickList::_internal_code() const {
  return code_.Get();
}
inline void BrokerMinuteTickList::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BrokerMinuteTickList::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BrokerMinuteTickList::release_code() {
  // @@protoc_insertion_point(field_release:stock_api.BrokerMinuteTickList.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BrokerMinuteTickList::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stock_api.BrokerMinuteTickList.code)
}

// repeated .stock_api.BrokerMinuteTick minute_tick = 2;
inline int BrokerMinuteTickList::_internal_minute_tick_size() const {
  return minute_tick_.size();
}
inline int BrokerMinuteTickList::minute_tick_size() const {
  return _internal_minute_tick_size();
}
inline void BrokerMinuteTickList::clear_minute_tick() {
  minute_tick_.Clear();
}
inline ::stock_api::BrokerMinuteTick* BrokerMinuteTickList::mutable_minute_tick(int index) {
  // @@protoc_insertion_point(field_mutable:stock_api.BrokerMinuteTickList.minute_tick)
  return minute_tick_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stock_api::BrokerMinuteTick >*
BrokerMinuteTickList::mutable_minute_tick() {
  // @@protoc_insertion_point(field_mutable_list:stock_api.BrokerMinuteTickList.minute_tick)
  return &minute_tick_;
}
inline const ::stock_api::BrokerMinuteTick& BrokerMinuteTickList::_internal_minute_tick(int index) const {
  return minute_tick_.Get(index);
}
inline const ::stock_api::BrokerMinuteTick& BrokerMinuteTickList::minute_tick(int index) const {
  // @@protoc_insertion_point(field_get:stock_api.BrokerMinuteTickList.minute_tick)
  return _internal_minute_tick(index);
}
inline ::stock_api::BrokerMinuteTick* BrokerMinuteTickList::_internal_add_minute_tick() {
  return minute_tick_.Add();
}
inline ::stock_api::BrokerMinuteTick* BrokerMinuteTickList::add_minute_tick() {
  ::stock_api::BrokerMinuteTick* _add = _internal_add_minute_tick();
  // @@protoc_insertion_point(field_add:stock_api.BrokerMinuteTickList.minute_tick)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stock_api::BrokerMinuteTick >&
BrokerMinuteTickList::minute_tick() const {
  // @@protoc_insertion_point(field_list:stock_api.BrokerMinuteTickList.minute_tick)
  return minute_tick_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BrokerMinuteTick

// string code = 1;
inline void BrokerMinuteTick::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& BrokerMinuteTick::code() const {
  // @@protoc_insertion_point(field_get:stock_api.BrokerMinuteTick.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrokerMinuteTick::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stock_api.BrokerMinuteTick.code)
}
inline std::string* BrokerMinuteTick::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:stock_api.BrokerMinuteTick.code)
  return _s;
}
inline const std::string& BrokerMinuteTick::_internal_code() const {
  return code_.Get();
}
inline void BrokerMinuteTick::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BrokerMinuteTick::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BrokerMinuteTick::release_code() {
  // @@protoc_insertion_point(field_release:stock_api.BrokerMinuteTick.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BrokerMinuteTick::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stock_api.BrokerMinuteTick.code)
}

// .google.protobuf.Timestamp from_datetime = 2;
inline bool BrokerMinuteTick::_internal_has_from_datetime() const {
  return this != internal_default_instance() && from_datetime_ != nullptr;
}
inline bool BrokerMinuteTick::has_from_datetime() const {
  return _internal_has_from_datetime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BrokerMinuteTick::_internal_from_datetime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = from_datetime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BrokerMinuteTick::from_datetime() const {
  // @@protoc_insertion_point(field_get:stock_api.BrokerMinuteTick.from_datetime)
  return _internal_from_datetime();
}
inline void BrokerMinuteTick::unsafe_arena_set_allocated_from_datetime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* from_datetime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_datetime_);
  }
  from_datetime_ = from_datetime;
  if (from_datetime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_api.BrokerMinuteTick.from_datetime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BrokerMinuteTick::release_from_datetime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = from_datetime_;
  from_datetime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BrokerMinuteTick::unsafe_arena_release_from_datetime() {
  // @@protoc_insertion_point(field_release:stock_api.BrokerMinuteTick.from_datetime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = from_datetime_;
  from_datetime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BrokerMinuteTick::_internal_mutable_from_datetime() {
  
  if (from_datetime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    from_datetime_ = p;
  }
  return from_datetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BrokerMinuteTick::mutable_from_datetime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_from_datetime();
  // @@protoc_insertion_point(field_mutable:stock_api.BrokerMinuteTick.from_datetime)
  return _msg;
}
inline void BrokerMinuteTick::set_allocated_from_datetime(::PROTOBUF_NAMESPACE_ID::Timestamp* from_datetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_datetime_);
  }
  if (from_datetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_datetime));
    if (message_arena != submessage_arena) {
      from_datetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from_datetime, submessage_arena);
    }
    
  } else {
    
  }
  from_datetime_ = from_datetime;
  // @@protoc_insertion_point(field_set_allocated:stock_api.BrokerMinuteTick.from_datetime)
}

// .google.protobuf.Timestamp until_datetime = 3;
inline bool BrokerMinuteTick::_internal_has_until_datetime() const {
  return this != internal_default_instance() && until_datetime_ != nullptr;
}
inline bool BrokerMinuteTick::has_until_datetime() const {
  return _internal_has_until_datetime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BrokerMinuteTick::_internal_until_datetime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = until_datetime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BrokerMinuteTick::until_datetime() const {
  // @@protoc_insertion_point(field_get:stock_api.BrokerMinuteTick.until_datetime)
  return _internal_until_datetime();
}
inline void BrokerMinuteTick::unsafe_arena_set_allocated_until_datetime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* until_datetime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(until_datetime_);
  }
  until_datetime_ = until_datetime;
  if (until_datetime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_api.BrokerMinuteTick.until_datetime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BrokerMinuteTick::release_until_datetime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = until_datetime_;
  until_datetime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BrokerMinuteTick::unsafe_arena_release_until_datetime() {
  // @@protoc_insertion_point(field_release:stock_api.BrokerMinuteTick.until_datetime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = until_datetime_;
  until_datetime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BrokerMinuteTick::_internal_mutable_until_datetime() {
  
  if (until_datetime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    until_datetime_ = p;
  }
  return until_datetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BrokerMinuteTick::mutable_until_datetime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_until_datetime();
  // @@protoc_insertion_point(field_mutable:stock_api.BrokerMinuteTick.until_datetime)
  return _msg;
}
inline void BrokerMinuteTick::set_allocated_until_datetime(::PROTOBUF_NAMESPACE_ID::Timestamp* until_datetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(until_datetime_);
  }
  if (until_datetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(until_datetime));
    if (message_arena != submessage_arena) {
      until_datetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, until_datetime, submessage_arena);
    }
    
  } else {
    
  }
  until_datetime_ = until_datetime;
  // @@protoc_insertion_point(field_set_allocated:stock_api.BrokerMinuteTick.until_datetime)
}

// map<string, .stock_api.BrokerStat> brokers_map = 4;
inline int BrokerMinuteTick::_internal_brokers_map_size() const {
  return brokers_map_.size();
}
inline int BrokerMinuteTick::brokers_map_size() const {
  return _internal_brokers_map_size();
}
inline void BrokerMinuteTick::clear_brokers_map() {
  brokers_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::stock_api::BrokerStat >&
BrokerMinuteTick::_internal_brokers_map() const {
  return brokers_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::stock_api::BrokerStat >&
BrokerMinuteTick::brokers_map() const {
  // @@protoc_insertion_point(field_map:stock_api.BrokerMinuteTick.brokers_map)
  return _internal_brokers_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::stock_api::BrokerStat >*
BrokerMinuteTick::_internal_mutable_brokers_map() {
  return brokers_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::stock_api::BrokerStat >*
BrokerMinuteTick::mutable_brokers_map() {
  // @@protoc_insertion_point(field_mutable_map:stock_api.BrokerMinuteTick.brokers_map)
  return _internal_mutable_brokers_map();
}

// -------------------------------------------------------------------

// YearHighInfo

// int32 price = 1;
inline void YearHighInfo::clear_price() {
  price_ = 0;
}
inline int32_t YearHighInfo::_internal_price() const {
  return price_;
}
inline int32_t YearHighInfo::price() const {
  // @@protoc_insertion_point(field_get:stock_api.YearHighInfo.price)
  return _internal_price();
}
inline void YearHighInfo::_internal_set_price(int32_t value) {
  
  price_ = value;
}
inline void YearHighInfo::set_price(int32_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:stock_api.YearHighInfo.price)
}

// .google.protobuf.Timestamp high_date = 2;
inline bool YearHighInfo::_internal_has_high_date() const {
  return this != internal_default_instance() && high_date_ != nullptr;
}
inline bool YearHighInfo::has_high_date() const {
  return _internal_has_high_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& YearHighInfo::_internal_high_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = high_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& YearHighInfo::high_date() const {
  // @@protoc_insertion_point(field_get:stock_api.YearHighInfo.high_date)
  return _internal_high_date();
}
inline void YearHighInfo::unsafe_arena_set_allocated_high_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* high_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(high_date_);
  }
  high_date_ = high_date;
  if (high_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_api.YearHighInfo.high_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* YearHighInfo::release_high_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = high_date_;
  high_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* YearHighInfo::unsafe_arena_release_high_date() {
  // @@protoc_insertion_point(field_release:stock_api.YearHighInfo.high_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = high_date_;
  high_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* YearHighInfo::_internal_mutable_high_date() {
  
  if (high_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    high_date_ = p;
  }
  return high_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* YearHighInfo::mutable_high_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_high_date();
  // @@protoc_insertion_point(field_mutable:stock_api.YearHighInfo.high_date)
  return _msg;
}
inline void YearHighInfo::set_allocated_high_date(::PROTOBUF_NAMESPACE_ID::Timestamp* high_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(high_date_);
  }
  if (high_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(high_date));
    if (message_arena != submessage_arena) {
      high_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, high_date, submessage_arena);
    }
    
  } else {
    
  }
  high_date_ = high_date;
  // @@protoc_insertion_point(field_set_allocated:stock_api.YearHighInfo.high_date)
}

// int32 days_distance = 3;
inline void YearHighInfo::clear_days_distance() {
  days_distance_ = 0;
}
inline int32_t YearHighInfo::_internal_days_distance() const {
  return days_distance_;
}
inline int32_t YearHighInfo::days_distance() const {
  // @@protoc_insertion_point(field_get:stock_api.YearHighInfo.days_distance)
  return _internal_days_distance();
}
inline void YearHighInfo::_internal_set_days_distance(int32_t value) {
  
  days_distance_ = value;
}
inline void YearHighInfo::set_days_distance(int32_t value) {
  _internal_set_days_distance(value);
  // @@protoc_insertion_point(field_set:stock_api.YearHighInfo.days_distance)
}

// -------------------------------------------------------------------

// SimulationMsg

// .stock_api.SimulationMsgType msgtype = 1;
inline void SimulationMsg::clear_msgtype() {
  msgtype_ = 0;
}
inline ::stock_api::SimulationMsgType SimulationMsg::_internal_msgtype() const {
  return static_cast< ::stock_api::SimulationMsgType >(msgtype_);
}
inline ::stock_api::SimulationMsgType SimulationMsg::msgtype() const {
  // @@protoc_insertion_point(field_get:stock_api.SimulationMsg.msgtype)
  return _internal_msgtype();
}
inline void SimulationMsg::_internal_set_msgtype(::stock_api::SimulationMsgType value) {
  
  msgtype_ = value;
}
inline void SimulationMsg::set_msgtype(::stock_api::SimulationMsgType value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:stock_api.SimulationMsg.msgtype)
}

// .stock_api.CybosTickData tick = 2;
inline bool SimulationMsg::_internal_has_tick() const {
  return this != internal_default_instance() && tick_ != nullptr;
}
inline bool SimulationMsg::has_tick() const {
  return _internal_has_tick();
}
inline void SimulationMsg::clear_tick() {
  if (GetArenaForAllocation() == nullptr && tick_ != nullptr) {
    delete tick_;
  }
  tick_ = nullptr;
}
inline const ::stock_api::CybosTickData& SimulationMsg::_internal_tick() const {
  const ::stock_api::CybosTickData* p = tick_;
  return p != nullptr ? *p : reinterpret_cast<const ::stock_api::CybosTickData&>(
      ::stock_api::_CybosTickData_default_instance_);
}
inline const ::stock_api::CybosTickData& SimulationMsg::tick() const {
  // @@protoc_insertion_point(field_get:stock_api.SimulationMsg.tick)
  return _internal_tick();
}
inline void SimulationMsg::unsafe_arena_set_allocated_tick(
    ::stock_api::CybosTickData* tick) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tick_);
  }
  tick_ = tick;
  if (tick) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_api.SimulationMsg.tick)
}
inline ::stock_api::CybosTickData* SimulationMsg::release_tick() {
  
  ::stock_api::CybosTickData* temp = tick_;
  tick_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::stock_api::CybosTickData* SimulationMsg::unsafe_arena_release_tick() {
  // @@protoc_insertion_point(field_release:stock_api.SimulationMsg.tick)
  
  ::stock_api::CybosTickData* temp = tick_;
  tick_ = nullptr;
  return temp;
}
inline ::stock_api::CybosTickData* SimulationMsg::_internal_mutable_tick() {
  
  if (tick_ == nullptr) {
    auto* p = CreateMaybeMessage<::stock_api::CybosTickData>(GetArenaForAllocation());
    tick_ = p;
  }
  return tick_;
}
inline ::stock_api::CybosTickData* SimulationMsg::mutable_tick() {
  ::stock_api::CybosTickData* _msg = _internal_mutable_tick();
  // @@protoc_insertion_point(field_mutable:stock_api.SimulationMsg.tick)
  return _msg;
}
inline void SimulationMsg::set_allocated_tick(::stock_api::CybosTickData* tick) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tick_;
  }
  if (tick) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::stock_api::CybosTickData>::GetOwningArena(tick);
    if (message_arena != submessage_arena) {
      tick = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tick, submessage_arena);
    }
    
  } else {
    
  }
  tick_ = tick;
  // @@protoc_insertion_point(field_set_allocated:stock_api.SimulationMsg.tick)
}

// .stock_api.CybosBidAskTickData bidask = 3;
inline bool SimulationMsg::_internal_has_bidask() const {
  return this != internal_default_instance() && bidask_ != nullptr;
}
inline bool SimulationMsg::has_bidask() const {
  return _internal_has_bidask();
}
inline void SimulationMsg::clear_bidask() {
  if (GetArenaForAllocation() == nullptr && bidask_ != nullptr) {
    delete bidask_;
  }
  bidask_ = nullptr;
}
inline const ::stock_api::CybosBidAskTickData& SimulationMsg::_internal_bidask() const {
  const ::stock_api::CybosBidAskTickData* p = bidask_;
  return p != nullptr ? *p : reinterpret_cast<const ::stock_api::CybosBidAskTickData&>(
      ::stock_api::_CybosBidAskTickData_default_instance_);
}
inline const ::stock_api::CybosBidAskTickData& SimulationMsg::bidask() const {
  // @@protoc_insertion_point(field_get:stock_api.SimulationMsg.bidask)
  return _internal_bidask();
}
inline void SimulationMsg::unsafe_arena_set_allocated_bidask(
    ::stock_api::CybosBidAskTickData* bidask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bidask_);
  }
  bidask_ = bidask;
  if (bidask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_api.SimulationMsg.bidask)
}
inline ::stock_api::CybosBidAskTickData* SimulationMsg::release_bidask() {
  
  ::stock_api::CybosBidAskTickData* temp = bidask_;
  bidask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::stock_api::CybosBidAskTickData* SimulationMsg::unsafe_arena_release_bidask() {
  // @@protoc_insertion_point(field_release:stock_api.SimulationMsg.bidask)
  
  ::stock_api::CybosBidAskTickData* temp = bidask_;
  bidask_ = nullptr;
  return temp;
}
inline ::stock_api::CybosBidAskTickData* SimulationMsg::_internal_mutable_bidask() {
  
  if (bidask_ == nullptr) {
    auto* p = CreateMaybeMessage<::stock_api::CybosBidAskTickData>(GetArenaForAllocation());
    bidask_ = p;
  }
  return bidask_;
}
inline ::stock_api::CybosBidAskTickData* SimulationMsg::mutable_bidask() {
  ::stock_api::CybosBidAskTickData* _msg = _internal_mutable_bidask();
  // @@protoc_insertion_point(field_mutable:stock_api.SimulationMsg.bidask)
  return _msg;
}
inline void SimulationMsg::set_allocated_bidask(::stock_api::CybosBidAskTickData* bidask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bidask_;
  }
  if (bidask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::stock_api::CybosBidAskTickData>::GetOwningArena(bidask);
    if (message_arena != submessage_arena) {
      bidask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bidask, submessage_arena);
    }
    
  } else {
    
  }
  bidask_ = bidask;
  // @@protoc_insertion_point(field_set_allocated:stock_api.SimulationMsg.bidask)
}

// .stock_api.CybosSubjectTickData subject = 4;
inline bool SimulationMsg::_internal_has_subject() const {
  return this != internal_default_instance() && subject_ != nullptr;
}
inline bool SimulationMsg::has_subject() const {
  return _internal_has_subject();
}
inline void SimulationMsg::clear_subject() {
  if (GetArenaForAllocation() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
}
inline const ::stock_api::CybosSubjectTickData& SimulationMsg::_internal_subject() const {
  const ::stock_api::CybosSubjectTickData* p = subject_;
  return p != nullptr ? *p : reinterpret_cast<const ::stock_api::CybosSubjectTickData&>(
      ::stock_api::_CybosSubjectTickData_default_instance_);
}
inline const ::stock_api::CybosSubjectTickData& SimulationMsg::subject() const {
  // @@protoc_insertion_point(field_get:stock_api.SimulationMsg.subject)
  return _internal_subject();
}
inline void SimulationMsg::unsafe_arena_set_allocated_subject(
    ::stock_api::CybosSubjectTickData* subject) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subject_);
  }
  subject_ = subject;
  if (subject) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_api.SimulationMsg.subject)
}
inline ::stock_api::CybosSubjectTickData* SimulationMsg::release_subject() {
  
  ::stock_api::CybosSubjectTickData* temp = subject_;
  subject_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::stock_api::CybosSubjectTickData* SimulationMsg::unsafe_arena_release_subject() {
  // @@protoc_insertion_point(field_release:stock_api.SimulationMsg.subject)
  
  ::stock_api::CybosSubjectTickData* temp = subject_;
  subject_ = nullptr;
  return temp;
}
inline ::stock_api::CybosSubjectTickData* SimulationMsg::_internal_mutable_subject() {
  
  if (subject_ == nullptr) {
    auto* p = CreateMaybeMessage<::stock_api::CybosSubjectTickData>(GetArenaForAllocation());
    subject_ = p;
  }
  return subject_;
}
inline ::stock_api::CybosSubjectTickData* SimulationMsg::mutable_subject() {
  ::stock_api::CybosSubjectTickData* _msg = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:stock_api.SimulationMsg.subject)
  return _msg;
}
inline void SimulationMsg::set_allocated_subject(::stock_api::CybosSubjectTickData* subject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete subject_;
  }
  if (subject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::stock_api::CybosSubjectTickData>::GetOwningArena(subject);
    if (message_arena != submessage_arena) {
      subject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subject, submessage_arena);
    }
    
  } else {
    
  }
  subject_ = subject;
  // @@protoc_insertion_point(field_set_allocated:stock_api.SimulationMsg.subject)
}

// .stock_api.CybosStockAlarm alarm = 5;
inline bool SimulationMsg::_internal_has_alarm() const {
  return this != internal_default_instance() && alarm_ != nullptr;
}
inline bool SimulationMsg::has_alarm() const {
  return _internal_has_alarm();
}
inline void SimulationMsg::clear_alarm() {
  if (GetArenaForAllocation() == nullptr && alarm_ != nullptr) {
    delete alarm_;
  }
  alarm_ = nullptr;
}
inline const ::stock_api::CybosStockAlarm& SimulationMsg::_internal_alarm() const {
  const ::stock_api::CybosStockAlarm* p = alarm_;
  return p != nullptr ? *p : reinterpret_cast<const ::stock_api::CybosStockAlarm&>(
      ::stock_api::_CybosStockAlarm_default_instance_);
}
inline const ::stock_api::CybosStockAlarm& SimulationMsg::alarm() const {
  // @@protoc_insertion_point(field_get:stock_api.SimulationMsg.alarm)
  return _internal_alarm();
}
inline void SimulationMsg::unsafe_arena_set_allocated_alarm(
    ::stock_api::CybosStockAlarm* alarm) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alarm_);
  }
  alarm_ = alarm;
  if (alarm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_api.SimulationMsg.alarm)
}
inline ::stock_api::CybosStockAlarm* SimulationMsg::release_alarm() {
  
  ::stock_api::CybosStockAlarm* temp = alarm_;
  alarm_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::stock_api::CybosStockAlarm* SimulationMsg::unsafe_arena_release_alarm() {
  // @@protoc_insertion_point(field_release:stock_api.SimulationMsg.alarm)
  
  ::stock_api::CybosStockAlarm* temp = alarm_;
  alarm_ = nullptr;
  return temp;
}
inline ::stock_api::CybosStockAlarm* SimulationMsg::_internal_mutable_alarm() {
  
  if (alarm_ == nullptr) {
    auto* p = CreateMaybeMessage<::stock_api::CybosStockAlarm>(GetArenaForAllocation());
    alarm_ = p;
  }
  return alarm_;
}
inline ::stock_api::CybosStockAlarm* SimulationMsg::mutable_alarm() {
  ::stock_api::CybosStockAlarm* _msg = _internal_mutable_alarm();
  // @@protoc_insertion_point(field_mutable:stock_api.SimulationMsg.alarm)
  return _msg;
}
inline void SimulationMsg::set_allocated_alarm(::stock_api::CybosStockAlarm* alarm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete alarm_;
  }
  if (alarm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::stock_api::CybosStockAlarm>::GetOwningArena(alarm);
    if (message_arena != submessage_arena) {
      alarm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alarm, submessage_arena);
    }
    
  } else {
    
  }
  alarm_ = alarm;
  // @@protoc_insertion_point(field_set_allocated:stock_api.SimulationMsg.alarm)
}

// -------------------------------------------------------------------

// TodayTopOption

// .stock_api.TodayTopSelection selection = 1;
inline void TodayTopOption::clear_selection() {
  selection_ = 0;
}
inline ::stock_api::TodayTopSelection TodayTopOption::_internal_selection() const {
  return static_cast< ::stock_api::TodayTopSelection >(selection_);
}
inline ::stock_api::TodayTopSelection TodayTopOption::selection() const {
  // @@protoc_insertion_point(field_get:stock_api.TodayTopOption.selection)
  return _internal_selection();
}
inline void TodayTopOption::_internal_set_selection(::stock_api::TodayTopSelection value) {
  
  selection_ = value;
}
inline void TodayTopOption::set_selection(::stock_api::TodayTopSelection value) {
  _internal_set_selection(value);
  // @@protoc_insertion_point(field_set:stock_api.TodayTopOption.selection)
}

// -------------------------------------------------------------------

// Balance

// int32 balance = 1;
inline void Balance::clear_balance() {
  balance_ = 0;
}
inline int32_t Balance::_internal_balance() const {
  return balance_;
}
inline int32_t Balance::balance() const {
  // @@protoc_insertion_point(field_get:stock_api.Balance.balance)
  return _internal_balance();
}
inline void Balance::_internal_set_balance(int32_t value) {
  
  balance_ = value;
}
inline void Balance::set_balance(int32_t value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:stock_api.Balance.balance)
}

// -------------------------------------------------------------------

// StockQuery

// string code = 1;
inline void StockQuery::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& StockQuery::code() const {
  // @@protoc_insertion_point(field_get:stock_api.StockQuery.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StockQuery::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stock_api.StockQuery.code)
}
inline std::string* StockQuery::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:stock_api.StockQuery.code)
  return _s;
}
inline const std::string& StockQuery::_internal_code() const {
  return code_.Get();
}
inline void StockQuery::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StockQuery::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StockQuery::release_code() {
  // @@protoc_insertion_point(field_release:stock_api.StockQuery.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StockQuery::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stock_api.StockQuery.code)
}

// .google.protobuf.Timestamp from_datetime = 2;
inline bool StockQuery::_internal_has_from_datetime() const {
  return this != internal_default_instance() && from_datetime_ != nullptr;
}
inline bool StockQuery::has_from_datetime() const {
  return _internal_has_from_datetime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StockQuery::_internal_from_datetime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = from_datetime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StockQuery::from_datetime() const {
  // @@protoc_insertion_point(field_get:stock_api.StockQuery.from_datetime)
  return _internal_from_datetime();
}
inline void StockQuery::unsafe_arena_set_allocated_from_datetime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* from_datetime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_datetime_);
  }
  from_datetime_ = from_datetime;
  if (from_datetime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_api.StockQuery.from_datetime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StockQuery::release_from_datetime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = from_datetime_;
  from_datetime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StockQuery::unsafe_arena_release_from_datetime() {
  // @@protoc_insertion_point(field_release:stock_api.StockQuery.from_datetime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = from_datetime_;
  from_datetime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StockQuery::_internal_mutable_from_datetime() {
  
  if (from_datetime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    from_datetime_ = p;
  }
  return from_datetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StockQuery::mutable_from_datetime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_from_datetime();
  // @@protoc_insertion_point(field_mutable:stock_api.StockQuery.from_datetime)
  return _msg;
}
inline void StockQuery::set_allocated_from_datetime(::PROTOBUF_NAMESPACE_ID::Timestamp* from_datetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_datetime_);
  }
  if (from_datetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_datetime));
    if (message_arena != submessage_arena) {
      from_datetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from_datetime, submessage_arena);
    }
    
  } else {
    
  }
  from_datetime_ = from_datetime;
  // @@protoc_insertion_point(field_set_allocated:stock_api.StockQuery.from_datetime)
}

// .google.protobuf.Timestamp until_datetime = 3;
inline bool StockQuery::_internal_has_until_datetime() const {
  return this != internal_default_instance() && until_datetime_ != nullptr;
}
inline bool StockQuery::has_until_datetime() const {
  return _internal_has_until_datetime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StockQuery::_internal_until_datetime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = until_datetime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StockQuery::until_datetime() const {
  // @@protoc_insertion_point(field_get:stock_api.StockQuery.until_datetime)
  return _internal_until_datetime();
}
inline void StockQuery::unsafe_arena_set_allocated_until_datetime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* until_datetime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(until_datetime_);
  }
  until_datetime_ = until_datetime;
  if (until_datetime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_api.StockQuery.until_datetime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StockQuery::release_until_datetime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = until_datetime_;
  until_datetime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StockQuery::unsafe_arena_release_until_datetime() {
  // @@protoc_insertion_point(field_release:stock_api.StockQuery.until_datetime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = until_datetime_;
  until_datetime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StockQuery::_internal_mutable_until_datetime() {
  
  if (until_datetime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    until_datetime_ = p;
  }
  return until_datetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StockQuery::mutable_until_datetime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_until_datetime();
  // @@protoc_insertion_point(field_mutable:stock_api.StockQuery.until_datetime)
  return _msg;
}
inline void StockQuery::set_allocated_until_datetime(::PROTOBUF_NAMESPACE_ID::Timestamp* until_datetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(until_datetime_);
  }
  if (until_datetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(until_datetime));
    if (message_arena != submessage_arena) {
      until_datetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, until_datetime, submessage_arena);
    }
    
  } else {
    
  }
  until_datetime_ = until_datetime;
  // @@protoc_insertion_point(field_set_allocated:stock_api.StockQuery.until_datetime)
}

// -------------------------------------------------------------------

// TopList

// repeated string codelist = 1;
inline int TopList::_internal_codelist_size() const {
  return codelist_.size();
}
inline int TopList::codelist_size() const {
  return _internal_codelist_size();
}
inline void TopList::clear_codelist() {
  codelist_.Clear();
}
inline std::string* TopList::add_codelist() {
  std::string* _s = _internal_add_codelist();
  // @@protoc_insertion_point(field_add_mutable:stock_api.TopList.codelist)
  return _s;
}
inline const std::string& TopList::_internal_codelist(int index) const {
  return codelist_.Get(index);
}
inline const std::string& TopList::codelist(int index) const {
  // @@protoc_insertion_point(field_get:stock_api.TopList.codelist)
  return _internal_codelist(index);
}
inline std::string* TopList::mutable_codelist(int index) {
  // @@protoc_insertion_point(field_mutable:stock_api.TopList.codelist)
  return codelist_.Mutable(index);
}
inline void TopList::set_codelist(int index, const std::string& value) {
  codelist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:stock_api.TopList.codelist)
}
inline void TopList::set_codelist(int index, std::string&& value) {
  codelist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:stock_api.TopList.codelist)
}
inline void TopList::set_codelist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  codelist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:stock_api.TopList.codelist)
}
inline void TopList::set_codelist(int index, const char* value, size_t size) {
  codelist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:stock_api.TopList.codelist)
}
inline std::string* TopList::_internal_add_codelist() {
  return codelist_.Add();
}
inline void TopList::add_codelist(const std::string& value) {
  codelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:stock_api.TopList.codelist)
}
inline void TopList::add_codelist(std::string&& value) {
  codelist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:stock_api.TopList.codelist)
}
inline void TopList::add_codelist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  codelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:stock_api.TopList.codelist)
}
inline void TopList::add_codelist(const char* value, size_t size) {
  codelist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:stock_api.TopList.codelist)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TopList::codelist() const {
  // @@protoc_insertion_point(field_list:stock_api.TopList.codelist)
  return codelist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TopList::mutable_codelist() {
  // @@protoc_insertion_point(field_mutable_list:stock_api.TopList.codelist)
  return &codelist_;
}

// bool is_today_data = 2;
inline void TopList::clear_is_today_data() {
  is_today_data_ = false;
}
inline bool TopList::_internal_is_today_data() const {
  return is_today_data_;
}
inline bool TopList::is_today_data() const {
  // @@protoc_insertion_point(field_get:stock_api.TopList.is_today_data)
  return _internal_is_today_data();
}
inline void TopList::_internal_set_is_today_data(bool value) {
  
  is_today_data_ = value;
}
inline void TopList::set_is_today_data(bool value) {
  _internal_set_is_today_data(value);
  // @@protoc_insertion_point(field_set:stock_api.TopList.is_today_data)
}

// uint32 date = 3;
inline void TopList::clear_date() {
  date_ = 0u;
}
inline uint32_t TopList::_internal_date() const {
  return date_;
}
inline uint32_t TopList::date() const {
  // @@protoc_insertion_point(field_get:stock_api.TopList.date)
  return _internal_date();
}
inline void TopList::_internal_set_date(uint32_t value) {
  
  date_ = value;
}
inline void TopList::set_date(uint32_t value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:stock_api.TopList.date)
}

// -------------------------------------------------------------------

// SimulationOperation

// bool is_on = 1;
inline void SimulationOperation::clear_is_on() {
  is_on_ = false;
}
inline bool SimulationOperation::_internal_is_on() const {
  return is_on_;
}
inline bool SimulationOperation::is_on() const {
  // @@protoc_insertion_point(field_get:stock_api.SimulationOperation.is_on)
  return _internal_is_on();
}
inline void SimulationOperation::_internal_set_is_on(bool value) {
  
  is_on_ = value;
}
inline void SimulationOperation::set_is_on(bool value) {
  _internal_set_is_on(value);
  // @@protoc_insertion_point(field_set:stock_api.SimulationOperation.is_on)
}

// .google.protobuf.Timestamp start_datetime = 2;
inline bool SimulationOperation::_internal_has_start_datetime() const {
  return this != internal_default_instance() && start_datetime_ != nullptr;
}
inline bool SimulationOperation::has_start_datetime() const {
  return _internal_has_start_datetime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SimulationOperation::_internal_start_datetime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = start_datetime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SimulationOperation::start_datetime() const {
  // @@protoc_insertion_point(field_get:stock_api.SimulationOperation.start_datetime)
  return _internal_start_datetime();
}
inline void SimulationOperation::unsafe_arena_set_allocated_start_datetime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_datetime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_datetime_);
  }
  start_datetime_ = start_datetime;
  if (start_datetime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_api.SimulationOperation.start_datetime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SimulationOperation::release_start_datetime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_datetime_;
  start_datetime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SimulationOperation::unsafe_arena_release_start_datetime() {
  // @@protoc_insertion_point(field_release:stock_api.SimulationOperation.start_datetime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_datetime_;
  start_datetime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SimulationOperation::_internal_mutable_start_datetime() {
  
  if (start_datetime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    start_datetime_ = p;
  }
  return start_datetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SimulationOperation::mutable_start_datetime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_start_datetime();
  // @@protoc_insertion_point(field_mutable:stock_api.SimulationOperation.start_datetime)
  return _msg;
}
inline void SimulationOperation::set_allocated_start_datetime(::PROTOBUF_NAMESPACE_ID::Timestamp* start_datetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_datetime_);
  }
  if (start_datetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_datetime));
    if (message_arena != submessage_arena) {
      start_datetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_datetime, submessage_arena);
    }
    
  } else {
    
  }
  start_datetime_ = start_datetime;
  // @@protoc_insertion_point(field_set_allocated:stock_api.SimulationOperation.start_datetime)
}

// float speed = 3;
inline void SimulationOperation::clear_speed() {
  speed_ = 0;
}
inline float SimulationOperation::_internal_speed() const {
  return speed_;
}
inline float SimulationOperation::speed() const {
  // @@protoc_insertion_point(field_get:stock_api.SimulationOperation.speed)
  return _internal_speed();
}
inline void SimulationOperation::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void SimulationOperation::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:stock_api.SimulationOperation.speed)
}

// -------------------------------------------------------------------

// SimulationStatus

// bool simulation_on = 1;
inline void SimulationStatus::clear_simulation_on() {
  simulation_on_ = false;
}
inline bool SimulationStatus::_internal_simulation_on() const {
  return simulation_on_;
}
inline bool SimulationStatus::simulation_on() const {
  // @@protoc_insertion_point(field_get:stock_api.SimulationStatus.simulation_on)
  return _internal_simulation_on();
}
inline void SimulationStatus::_internal_set_simulation_on(bool value) {
  
  simulation_on_ = value;
}
inline void SimulationStatus::set_simulation_on(bool value) {
  _internal_set_simulation_on(value);
  // @@protoc_insertion_point(field_set:stock_api.SimulationStatus.simulation_on)
}

// float simulation_speed = 2;
inline void SimulationStatus::clear_simulation_speed() {
  simulation_speed_ = 0;
}
inline float SimulationStatus::_internal_simulation_speed() const {
  return simulation_speed_;
}
inline float SimulationStatus::simulation_speed() const {
  // @@protoc_insertion_point(field_get:stock_api.SimulationStatus.simulation_speed)
  return _internal_simulation_speed();
}
inline void SimulationStatus::_internal_set_simulation_speed(float value) {
  
  simulation_speed_ = value;
}
inline void SimulationStatus::set_simulation_speed(float value) {
  _internal_set_simulation_speed(value);
  // @@protoc_insertion_point(field_set:stock_api.SimulationStatus.simulation_speed)
}

// -------------------------------------------------------------------

// OrderMsg

// string code = 1;
inline void OrderMsg::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& OrderMsg::code() const {
  // @@protoc_insertion_point(field_get:stock_api.OrderMsg.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderMsg::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stock_api.OrderMsg.code)
}
inline std::string* OrderMsg::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:stock_api.OrderMsg.code)
  return _s;
}
inline const std::string& OrderMsg::_internal_code() const {
  return code_.Get();
}
inline void OrderMsg::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderMsg::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderMsg::release_code() {
  // @@protoc_insertion_point(field_release:stock_api.OrderMsg.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderMsg::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stock_api.OrderMsg.code)
}

// bool is_buy = 2;
inline void OrderMsg::clear_is_buy() {
  is_buy_ = false;
}
inline bool OrderMsg::_internal_is_buy() const {
  return is_buy_;
}
inline bool OrderMsg::is_buy() const {
  // @@protoc_insertion_point(field_get:stock_api.OrderMsg.is_buy)
  return _internal_is_buy();
}
inline void OrderMsg::_internal_set_is_buy(bool value) {
  
  is_buy_ = value;
}
inline void OrderMsg::set_is_buy(bool value) {
  _internal_set_is_buy(value);
  // @@protoc_insertion_point(field_set:stock_api.OrderMsg.is_buy)
}

// int32 price = 3;
inline void OrderMsg::clear_price() {
  price_ = 0;
}
inline int32_t OrderMsg::_internal_price() const {
  return price_;
}
inline int32_t OrderMsg::price() const {
  // @@protoc_insertion_point(field_get:stock_api.OrderMsg.price)
  return _internal_price();
}
inline void OrderMsg::_internal_set_price(int32_t value) {
  
  price_ = value;
}
inline void OrderMsg::set_price(int32_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:stock_api.OrderMsg.price)
}

// int32 quantity = 4;
inline void OrderMsg::clear_quantity() {
  quantity_ = 0;
}
inline int32_t OrderMsg::_internal_quantity() const {
  return quantity_;
}
inline int32_t OrderMsg::quantity() const {
  // @@protoc_insertion_point(field_get:stock_api.OrderMsg.quantity)
  return _internal_quantity();
}
inline void OrderMsg::_internal_set_quantity(int32_t value) {
  
  quantity_ = value;
}
inline void OrderMsg::set_quantity(int32_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:stock_api.OrderMsg.quantity)
}

// int32 percentage = 5;
inline void OrderMsg::clear_percentage() {
  percentage_ = 0;
}
inline int32_t OrderMsg::_internal_percentage() const {
  return percentage_;
}
inline int32_t OrderMsg::percentage() const {
  // @@protoc_insertion_point(field_get:stock_api.OrderMsg.percentage)
  return _internal_percentage();
}
inline void OrderMsg::_internal_set_percentage(int32_t value) {
  
  percentage_ = value;
}
inline void OrderMsg::set_percentage(int32_t value) {
  _internal_set_percentage(value);
  // @@protoc_insertion_point(field_set:stock_api.OrderMsg.percentage)
}

// .stock_api.OrderMethod method = 6;
inline void OrderMsg::clear_method() {
  method_ = 0;
}
inline ::stock_api::OrderMethod OrderMsg::_internal_method() const {
  return static_cast< ::stock_api::OrderMethod >(method_);
}
inline ::stock_api::OrderMethod OrderMsg::method() const {
  // @@protoc_insertion_point(field_get:stock_api.OrderMsg.method)
  return _internal_method();
}
inline void OrderMsg::_internal_set_method(::stock_api::OrderMethod value) {
  
  method_ = value;
}
inline void OrderMsg::set_method(::stock_api::OrderMethod value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:stock_api.OrderMsg.method)
}

// string order_num = 7;
inline void OrderMsg::clear_order_num() {
  order_num_.ClearToEmpty();
}
inline const std::string& OrderMsg::order_num() const {
  // @@protoc_insertion_point(field_get:stock_api.OrderMsg.order_num)
  return _internal_order_num();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderMsg::set_order_num(ArgT0&& arg0, ArgT... args) {
 
 order_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stock_api.OrderMsg.order_num)
}
inline std::string* OrderMsg::mutable_order_num() {
  std::string* _s = _internal_mutable_order_num();
  // @@protoc_insertion_point(field_mutable:stock_api.OrderMsg.order_num)
  return _s;
}
inline const std::string& OrderMsg::_internal_order_num() const {
  return order_num_.Get();
}
inline void OrderMsg::_internal_set_order_num(const std::string& value) {
  
  order_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderMsg::_internal_mutable_order_num() {
  
  return order_num_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderMsg::release_order_num() {
  // @@protoc_insertion_point(field_release:stock_api.OrderMsg.order_num)
  return order_num_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderMsg::set_allocated_order_num(std::string* order_num) {
  if (order_num != nullptr) {
    
  } else {
    
  }
  order_num_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_num,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_num_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    order_num_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stock_api.OrderMsg.order_num)
}

// .stock_api.OrderType order_type = 8;
inline void OrderMsg::clear_order_type() {
  order_type_ = 0;
}
inline ::stock_api::OrderType OrderMsg::_internal_order_type() const {
  return static_cast< ::stock_api::OrderType >(order_type_);
}
inline ::stock_api::OrderType OrderMsg::order_type() const {
  // @@protoc_insertion_point(field_get:stock_api.OrderMsg.order_type)
  return _internal_order_type();
}
inline void OrderMsg::_internal_set_order_type(::stock_api::OrderType value) {
  
  order_type_ = value;
}
inline void OrderMsg::set_order_type(::stock_api::OrderType value) {
  _internal_set_order_type(value);
  // @@protoc_insertion_point(field_set:stock_api.OrderMsg.order_type)
}

// -------------------------------------------------------------------

// TradeMsg

// int32 msg_type = 1;
inline void TradeMsg::clear_msg_type() {
  msg_type_ = 0;
}
inline int32_t TradeMsg::_internal_msg_type() const {
  return msg_type_;
}
inline int32_t TradeMsg::msg_type() const {
  // @@protoc_insertion_point(field_get:stock_api.TradeMsg.msg_type)
  return _internal_msg_type();
}
inline void TradeMsg::_internal_set_msg_type(int32_t value) {
  
  msg_type_ = value;
}
inline void TradeMsg::set_msg_type(int32_t value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:stock_api.TradeMsg.msg_type)
}

// .stock_api.OrderMsg order_msg = 2;
inline bool TradeMsg::_internal_has_order_msg() const {
  return this != internal_default_instance() && order_msg_ != nullptr;
}
inline bool TradeMsg::has_order_msg() const {
  return _internal_has_order_msg();
}
inline void TradeMsg::clear_order_msg() {
  if (GetArenaForAllocation() == nullptr && order_msg_ != nullptr) {
    delete order_msg_;
  }
  order_msg_ = nullptr;
}
inline const ::stock_api::OrderMsg& TradeMsg::_internal_order_msg() const {
  const ::stock_api::OrderMsg* p = order_msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::stock_api::OrderMsg&>(
      ::stock_api::_OrderMsg_default_instance_);
}
inline const ::stock_api::OrderMsg& TradeMsg::order_msg() const {
  // @@protoc_insertion_point(field_get:stock_api.TradeMsg.order_msg)
  return _internal_order_msg();
}
inline void TradeMsg::unsafe_arena_set_allocated_order_msg(
    ::stock_api::OrderMsg* order_msg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_msg_);
  }
  order_msg_ = order_msg;
  if (order_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_api.TradeMsg.order_msg)
}
inline ::stock_api::OrderMsg* TradeMsg::release_order_msg() {
  
  ::stock_api::OrderMsg* temp = order_msg_;
  order_msg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::stock_api::OrderMsg* TradeMsg::unsafe_arena_release_order_msg() {
  // @@protoc_insertion_point(field_release:stock_api.TradeMsg.order_msg)
  
  ::stock_api::OrderMsg* temp = order_msg_;
  order_msg_ = nullptr;
  return temp;
}
inline ::stock_api::OrderMsg* TradeMsg::_internal_mutable_order_msg() {
  
  if (order_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::stock_api::OrderMsg>(GetArenaForAllocation());
    order_msg_ = p;
  }
  return order_msg_;
}
inline ::stock_api::OrderMsg* TradeMsg::mutable_order_msg() {
  ::stock_api::OrderMsg* _msg = _internal_mutable_order_msg();
  // @@protoc_insertion_point(field_mutable:stock_api.TradeMsg.order_msg)
  return _msg;
}
inline void TradeMsg::set_allocated_order_msg(::stock_api::OrderMsg* order_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete order_msg_;
  }
  if (order_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::stock_api::OrderMsg>::GetOwningArena(order_msg);
    if (message_arena != submessage_arena) {
      order_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_msg, submessage_arena);
    }
    
  } else {
    
  }
  order_msg_ = order_msg;
  // @@protoc_insertion_point(field_set_allocated:stock_api.TradeMsg.order_msg)
}

// -------------------------------------------------------------------

// CybosOrderReturn

// int32 result = 1;
inline void CybosOrderReturn::clear_result() {
  result_ = 0;
}
inline int32_t CybosOrderReturn::_internal_result() const {
  return result_;
}
inline int32_t CybosOrderReturn::result() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosOrderReturn.result)
  return _internal_result();
}
inline void CybosOrderReturn::_internal_set_result(int32_t value) {
  
  result_ = value;
}
inline void CybosOrderReturn::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosOrderReturn.result)
}

// string msg = 2;
inline void CybosOrderReturn::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& CybosOrderReturn::msg() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosOrderReturn.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CybosOrderReturn::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stock_api.CybosOrderReturn.msg)
}
inline std::string* CybosOrderReturn::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:stock_api.CybosOrderReturn.msg)
  return _s;
}
inline const std::string& CybosOrderReturn::_internal_msg() const {
  return msg_.Get();
}
inline void CybosOrderReturn::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CybosOrderReturn::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CybosOrderReturn::release_msg() {
  // @@protoc_insertion_point(field_release:stock_api.CybosOrderReturn.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CybosOrderReturn::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stock_api.CybosOrderReturn.msg)
}

// int32 order_num = 3;
inline void CybosOrderReturn::clear_order_num() {
  order_num_ = 0;
}
inline int32_t CybosOrderReturn::_internal_order_num() const {
  return order_num_;
}
inline int32_t CybosOrderReturn::order_num() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosOrderReturn.order_num)
  return _internal_order_num();
}
inline void CybosOrderReturn::_internal_set_order_num(int32_t value) {
  
  order_num_ = value;
}
inline void CybosOrderReturn::set_order_num(int32_t value) {
  _internal_set_order_num(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosOrderReturn.order_num)
}

// -------------------------------------------------------------------

// Report

// string code = 1;
inline void Report::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& Report::code() const {
  // @@protoc_insertion_point(field_get:stock_api.Report.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Report::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stock_api.Report.code)
}
inline std::string* Report::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:stock_api.Report.code)
  return _s;
}
inline const std::string& Report::_internal_code() const {
  return code_.Get();
}
inline void Report::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Report::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Report::release_code() {
  // @@protoc_insertion_point(field_release:stock_api.Report.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Report::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stock_api.Report.code)
}

// string company_name = 2;
inline void Report::clear_company_name() {
  company_name_.ClearToEmpty();
}
inline const std::string& Report::company_name() const {
  // @@protoc_insertion_point(field_get:stock_api.Report.company_name)
  return _internal_company_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Report::set_company_name(ArgT0&& arg0, ArgT... args) {
 
 company_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stock_api.Report.company_name)
}
inline std::string* Report::mutable_company_name() {
  std::string* _s = _internal_mutable_company_name();
  // @@protoc_insertion_point(field_mutable:stock_api.Report.company_name)
  return _s;
}
inline const std::string& Report::_internal_company_name() const {
  return company_name_.Get();
}
inline void Report::_internal_set_company_name(const std::string& value) {
  
  company_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Report::_internal_mutable_company_name() {
  
  return company_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Report::release_company_name() {
  // @@protoc_insertion_point(field_release:stock_api.Report.company_name)
  return company_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Report::set_allocated_company_name(std::string* company_name) {
  if (company_name != nullptr) {
    
  } else {
    
  }
  company_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), company_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (company_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    company_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stock_api.Report.company_name)
}

// bool is_buy = 3;
inline void Report::clear_is_buy() {
  is_buy_ = false;
}
inline bool Report::_internal_is_buy() const {
  return is_buy_;
}
inline bool Report::is_buy() const {
  // @@protoc_insertion_point(field_get:stock_api.Report.is_buy)
  return _internal_is_buy();
}
inline void Report::_internal_set_is_buy(bool value) {
  
  is_buy_ = value;
}
inline void Report::set_is_buy(bool value) {
  _internal_set_is_buy(value);
  // @@protoc_insertion_point(field_set:stock_api.Report.is_buy)
}

// .google.protobuf.Timestamp last_update_datetime = 4;
inline bool Report::_internal_has_last_update_datetime() const {
  return this != internal_default_instance() && last_update_datetime_ != nullptr;
}
inline bool Report::has_last_update_datetime() const {
  return _internal_has_last_update_datetime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Report::_internal_last_update_datetime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = last_update_datetime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Report::last_update_datetime() const {
  // @@protoc_insertion_point(field_get:stock_api.Report.last_update_datetime)
  return _internal_last_update_datetime();
}
inline void Report::unsafe_arena_set_allocated_last_update_datetime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_datetime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_update_datetime_);
  }
  last_update_datetime_ = last_update_datetime;
  if (last_update_datetime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_api.Report.last_update_datetime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Report::release_last_update_datetime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_update_datetime_;
  last_update_datetime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Report::unsafe_arena_release_last_update_datetime() {
  // @@protoc_insertion_point(field_release:stock_api.Report.last_update_datetime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_update_datetime_;
  last_update_datetime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Report::_internal_mutable_last_update_datetime() {
  
  if (last_update_datetime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    last_update_datetime_ = p;
  }
  return last_update_datetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Report::mutable_last_update_datetime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_update_datetime();
  // @@protoc_insertion_point(field_mutable:stock_api.Report.last_update_datetime)
  return _msg;
}
inline void Report::set_allocated_last_update_datetime(::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_datetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_update_datetime_);
  }
  if (last_update_datetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_update_datetime));
    if (message_arena != submessage_arena) {
      last_update_datetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_update_datetime, submessage_arena);
    }
    
  } else {
    
  }
  last_update_datetime_ = last_update_datetime;
  // @@protoc_insertion_point(field_set_allocated:stock_api.Report.last_update_datetime)
}

// .stock_api.OrderStatusFlag flag = 5;
inline void Report::clear_flag() {
  flag_ = 0;
}
inline ::stock_api::OrderStatusFlag Report::_internal_flag() const {
  return static_cast< ::stock_api::OrderStatusFlag >(flag_);
}
inline ::stock_api::OrderStatusFlag Report::flag() const {
  // @@protoc_insertion_point(field_get:stock_api.Report.flag)
  return _internal_flag();
}
inline void Report::_internal_set_flag(::stock_api::OrderStatusFlag value) {
  
  flag_ = value;
}
inline void Report::set_flag(::stock_api::OrderStatusFlag value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:stock_api.Report.flag)
}

// .stock_api.OrderMethod method = 6;
inline void Report::clear_method() {
  method_ = 0;
}
inline ::stock_api::OrderMethod Report::_internal_method() const {
  return static_cast< ::stock_api::OrderMethod >(method_);
}
inline ::stock_api::OrderMethod Report::method() const {
  // @@protoc_insertion_point(field_get:stock_api.Report.method)
  return _internal_method();
}
inline void Report::_internal_set_method(::stock_api::OrderMethod value) {
  
  method_ = value;
}
inline void Report::set_method(::stock_api::OrderMethod value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:stock_api.Report.method)
}

// float hold_price = 7;
inline void Report::clear_hold_price() {
  hold_price_ = 0;
}
inline float Report::_internal_hold_price() const {
  return hold_price_;
}
inline float Report::hold_price() const {
  // @@protoc_insertion_point(field_get:stock_api.Report.hold_price)
  return _internal_hold_price();
}
inline void Report::_internal_set_hold_price(float value) {
  
  hold_price_ = value;
}
inline void Report::set_hold_price(float value) {
  _internal_set_hold_price(value);
  // @@protoc_insertion_point(field_set:stock_api.Report.hold_price)
}

// int32 price = 8;
inline void Report::clear_price() {
  price_ = 0;
}
inline int32_t Report::_internal_price() const {
  return price_;
}
inline int32_t Report::price() const {
  // @@protoc_insertion_point(field_get:stock_api.Report.price)
  return _internal_price();
}
inline void Report::_internal_set_price(int32_t value) {
  
  price_ = value;
}
inline void Report::set_price(int32_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:stock_api.Report.price)
}

// int32 quantity = 9;
inline void Report::clear_quantity() {
  quantity_ = 0;
}
inline int32_t Report::_internal_quantity() const {
  return quantity_;
}
inline int32_t Report::quantity() const {
  // @@protoc_insertion_point(field_get:stock_api.Report.quantity)
  return _internal_quantity();
}
inline void Report::_internal_set_quantity(int32_t value) {
  
  quantity_ = value;
}
inline void Report::set_quantity(int32_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:stock_api.Report.quantity)
}

// string internal_order_num = 10;
inline void Report::clear_internal_order_num() {
  internal_order_num_.ClearToEmpty();
}
inline const std::string& Report::internal_order_num() const {
  // @@protoc_insertion_point(field_get:stock_api.Report.internal_order_num)
  return _internal_internal_order_num();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Report::set_internal_order_num(ArgT0&& arg0, ArgT... args) {
 
 internal_order_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stock_api.Report.internal_order_num)
}
inline std::string* Report::mutable_internal_order_num() {
  std::string* _s = _internal_mutable_internal_order_num();
  // @@protoc_insertion_point(field_mutable:stock_api.Report.internal_order_num)
  return _s;
}
inline const std::string& Report::_internal_internal_order_num() const {
  return internal_order_num_.Get();
}
inline void Report::_internal_set_internal_order_num(const std::string& value) {
  
  internal_order_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Report::_internal_mutable_internal_order_num() {
  
  return internal_order_num_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Report::release_internal_order_num() {
  // @@protoc_insertion_point(field_release:stock_api.Report.internal_order_num)
  return internal_order_num_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Report::set_allocated_internal_order_num(std::string* internal_order_num) {
  if (internal_order_num != nullptr) {
    
  } else {
    
  }
  internal_order_num_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), internal_order_num,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (internal_order_num_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    internal_order_num_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stock_api.Report.internal_order_num)
}

// string order_num = 11;
inline void Report::clear_order_num() {
  order_num_.ClearToEmpty();
}
inline const std::string& Report::order_num() const {
  // @@protoc_insertion_point(field_get:stock_api.Report.order_num)
  return _internal_order_num();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Report::set_order_num(ArgT0&& arg0, ArgT... args) {
 
 order_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stock_api.Report.order_num)
}
inline std::string* Report::mutable_order_num() {
  std::string* _s = _internal_mutable_order_num();
  // @@protoc_insertion_point(field_mutable:stock_api.Report.order_num)
  return _s;
}
inline const std::string& Report::_internal_order_num() const {
  return order_num_.Get();
}
inline void Report::_internal_set_order_num(const std::string& value) {
  
  order_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Report::_internal_mutable_order_num() {
  
  return order_num_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Report::release_order_num() {
  // @@protoc_insertion_point(field_release:stock_api.Report.order_num)
  return order_num_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Report::set_allocated_order_num(std::string* order_num) {
  if (order_num != nullptr) {
    
  } else {
    
  }
  order_num_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_num,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_num_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    order_num_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stock_api.Report.order_num)
}

// int32 traded_quantity = 12;
inline void Report::clear_traded_quantity() {
  traded_quantity_ = 0;
}
inline int32_t Report::_internal_traded_quantity() const {
  return traded_quantity_;
}
inline int32_t Report::traded_quantity() const {
  // @@protoc_insertion_point(field_get:stock_api.Report.traded_quantity)
  return _internal_traded_quantity();
}
inline void Report::_internal_set_traded_quantity(int32_t value) {
  
  traded_quantity_ = value;
}
inline void Report::set_traded_quantity(int32_t value) {
  _internal_set_traded_quantity(value);
  // @@protoc_insertion_point(field_set:stock_api.Report.traded_quantity)
}

// float traded_price = 13;
inline void Report::clear_traded_price() {
  traded_price_ = 0;
}
inline float Report::_internal_traded_price() const {
  return traded_price_;
}
inline float Report::traded_price() const {
  // @@protoc_insertion_point(field_get:stock_api.Report.traded_price)
  return _internal_traded_price();
}
inline void Report::_internal_set_traded_price(float value) {
  
  traded_price_ = value;
}
inline void Report::set_traded_price(float value) {
  _internal_set_traded_price(value);
  // @@protoc_insertion_point(field_set:stock_api.Report.traded_price)
}

// -------------------------------------------------------------------

// OrderResult

// repeated .stock_api.Report report = 1;
inline int OrderResult::_internal_report_size() const {
  return report_.size();
}
inline int OrderResult::report_size() const {
  return _internal_report_size();
}
inline void OrderResult::clear_report() {
  report_.Clear();
}
inline ::stock_api::Report* OrderResult::mutable_report(int index) {
  // @@protoc_insertion_point(field_mutable:stock_api.OrderResult.report)
  return report_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stock_api::Report >*
OrderResult::mutable_report() {
  // @@protoc_insertion_point(field_mutable_list:stock_api.OrderResult.report)
  return &report_;
}
inline const ::stock_api::Report& OrderResult::_internal_report(int index) const {
  return report_.Get(index);
}
inline const ::stock_api::Report& OrderResult::report(int index) const {
  // @@protoc_insertion_point(field_get:stock_api.OrderResult.report)
  return _internal_report(index);
}
inline ::stock_api::Report* OrderResult::_internal_add_report() {
  return report_.Add();
}
inline ::stock_api::Report* OrderResult::add_report() {
  ::stock_api::Report* _add = _internal_add_report();
  // @@protoc_insertion_point(field_add:stock_api.OrderResult.report)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stock_api::Report >&
OrderResult::report() const {
  // @@protoc_insertion_point(field_list:stock_api.OrderResult.report)
  return report_;
}

// int32 current_balance = 2;
inline void OrderResult::clear_current_balance() {
  current_balance_ = 0;
}
inline int32_t OrderResult::_internal_current_balance() const {
  return current_balance_;
}
inline int32_t OrderResult::current_balance() const {
  // @@protoc_insertion_point(field_get:stock_api.OrderResult.current_balance)
  return _internal_current_balance();
}
inline void OrderResult::_internal_set_current_balance(int32_t value) {
  
  current_balance_ = value;
}
inline void OrderResult::set_current_balance(int32_t value) {
  _internal_set_current_balance(value);
  // @@protoc_insertion_point(field_set:stock_api.OrderResult.current_balance)
}

// -------------------------------------------------------------------

// CybosOrderResult

// .stock_api.OrderStatusFlag flag = 1;
inline void CybosOrderResult::clear_flag() {
  flag_ = 0;
}
inline ::stock_api::OrderStatusFlag CybosOrderResult::_internal_flag() const {
  return static_cast< ::stock_api::OrderStatusFlag >(flag_);
}
inline ::stock_api::OrderStatusFlag CybosOrderResult::flag() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosOrderResult.flag)
  return _internal_flag();
}
inline void CybosOrderResult::_internal_set_flag(::stock_api::OrderStatusFlag value) {
  
  flag_ = value;
}
inline void CybosOrderResult::set_flag(::stock_api::OrderStatusFlag value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosOrderResult.flag)
}

// string code = 2;
inline void CybosOrderResult::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& CybosOrderResult::code() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosOrderResult.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CybosOrderResult::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stock_api.CybosOrderResult.code)
}
inline std::string* CybosOrderResult::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:stock_api.CybosOrderResult.code)
  return _s;
}
inline const std::string& CybosOrderResult::_internal_code() const {
  return code_.Get();
}
inline void CybosOrderResult::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CybosOrderResult::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CybosOrderResult::release_code() {
  // @@protoc_insertion_point(field_release:stock_api.CybosOrderResult.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CybosOrderResult::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stock_api.CybosOrderResult.code)
}

// string order_number = 3;
inline void CybosOrderResult::clear_order_number() {
  order_number_.ClearToEmpty();
}
inline const std::string& CybosOrderResult::order_number() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosOrderResult.order_number)
  return _internal_order_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CybosOrderResult::set_order_number(ArgT0&& arg0, ArgT... args) {
 
 order_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stock_api.CybosOrderResult.order_number)
}
inline std::string* CybosOrderResult::mutable_order_number() {
  std::string* _s = _internal_mutable_order_number();
  // @@protoc_insertion_point(field_mutable:stock_api.CybosOrderResult.order_number)
  return _s;
}
inline const std::string& CybosOrderResult::_internal_order_number() const {
  return order_number_.Get();
}
inline void CybosOrderResult::_internal_set_order_number(const std::string& value) {
  
  order_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CybosOrderResult::_internal_mutable_order_number() {
  
  return order_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CybosOrderResult::release_order_number() {
  // @@protoc_insertion_point(field_release:stock_api.CybosOrderResult.order_number)
  return order_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CybosOrderResult::set_allocated_order_number(std::string* order_number) {
  if (order_number != nullptr) {
    
  } else {
    
  }
  order_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_number,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    order_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stock_api.CybosOrderResult.order_number)
}

// int32 quantity = 4;
inline void CybosOrderResult::clear_quantity() {
  quantity_ = 0;
}
inline int32_t CybosOrderResult::_internal_quantity() const {
  return quantity_;
}
inline int32_t CybosOrderResult::quantity() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosOrderResult.quantity)
  return _internal_quantity();
}
inline void CybosOrderResult::_internal_set_quantity(int32_t value) {
  
  quantity_ = value;
}
inline void CybosOrderResult::set_quantity(int32_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosOrderResult.quantity)
}

// int32 price = 5;
inline void CybosOrderResult::clear_price() {
  price_ = 0;
}
inline int32_t CybosOrderResult::_internal_price() const {
  return price_;
}
inline int32_t CybosOrderResult::price() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosOrderResult.price)
  return _internal_price();
}
inline void CybosOrderResult::_internal_set_price(int32_t value) {
  
  price_ = value;
}
inline void CybosOrderResult::set_price(int32_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosOrderResult.price)
}

// bool is_buy = 6;
inline void CybosOrderResult::clear_is_buy() {
  is_buy_ = false;
}
inline bool CybosOrderResult::_internal_is_buy() const {
  return is_buy_;
}
inline bool CybosOrderResult::is_buy() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosOrderResult.is_buy)
  return _internal_is_buy();
}
inline void CybosOrderResult::_internal_set_is_buy(bool value) {
  
  is_buy_ = value;
}
inline void CybosOrderResult::set_is_buy(bool value) {
  _internal_set_is_buy(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosOrderResult.is_buy)
}

// int32 total_quantity = 7;
inline void CybosOrderResult::clear_total_quantity() {
  total_quantity_ = 0;
}
inline int32_t CybosOrderResult::_internal_total_quantity() const {
  return total_quantity_;
}
inline int32_t CybosOrderResult::total_quantity() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosOrderResult.total_quantity)
  return _internal_total_quantity();
}
inline void CybosOrderResult::_internal_set_total_quantity(int32_t value) {
  
  total_quantity_ = value;
}
inline void CybosOrderResult::set_total_quantity(int32_t value) {
  _internal_set_total_quantity(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosOrderResult.total_quantity)
}

// -------------------------------------------------------------------

// ListType

// string type_name = 1;
inline void ListType::clear_type_name() {
  type_name_.ClearToEmpty();
}
inline const std::string& ListType::type_name() const {
  // @@protoc_insertion_point(field_get:stock_api.ListType.type_name)
  return _internal_type_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListType::set_type_name(ArgT0&& arg0, ArgT... args) {
 
 type_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stock_api.ListType.type_name)
}
inline std::string* ListType::mutable_type_name() {
  std::string* _s = _internal_mutable_type_name();
  // @@protoc_insertion_point(field_mutable:stock_api.ListType.type_name)
  return _s;
}
inline const std::string& ListType::_internal_type_name() const {
  return type_name_.Get();
}
inline void ListType::_internal_set_type_name(const std::string& value) {
  
  type_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListType::_internal_mutable_type_name() {
  
  return type_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListType::release_type_name() {
  // @@protoc_insertion_point(field_release:stock_api.ListType.type_name)
  return type_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListType::set_allocated_type_name(std::string* type_name) {
  if (type_name != nullptr) {
    
  } else {
    
  }
  type_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stock_api.ListType.type_name)
}

// -------------------------------------------------------------------

// CompanyName

// string company_name = 1;
inline void CompanyName::clear_company_name() {
  company_name_.ClearToEmpty();
}
inline const std::string& CompanyName::company_name() const {
  // @@protoc_insertion_point(field_get:stock_api.CompanyName.company_name)
  return _internal_company_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompanyName::set_company_name(ArgT0&& arg0, ArgT... args) {
 
 company_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stock_api.CompanyName.company_name)
}
inline std::string* CompanyName::mutable_company_name() {
  std::string* _s = _internal_mutable_company_name();
  // @@protoc_insertion_point(field_mutable:stock_api.CompanyName.company_name)
  return _s;
}
inline const std::string& CompanyName::_internal_company_name() const {
  return company_name_.Get();
}
inline void CompanyName::_internal_set_company_name(const std::string& value) {
  
  company_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CompanyName::_internal_mutable_company_name() {
  
  return company_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CompanyName::release_company_name() {
  // @@protoc_insertion_point(field_release:stock_api.CompanyName.company_name)
  return company_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CompanyName::set_allocated_company_name(std::string* company_name) {
  if (company_name != nullptr) {
    
  } else {
    
  }
  company_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), company_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (company_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    company_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stock_api.CompanyName.company_name)
}

// -------------------------------------------------------------------

// PastMinuteQuery

// string code = 1;
inline void PastMinuteQuery::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& PastMinuteQuery::code() const {
  // @@protoc_insertion_point(field_get:stock_api.PastMinuteQuery.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PastMinuteQuery::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stock_api.PastMinuteQuery.code)
}
inline std::string* PastMinuteQuery::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:stock_api.PastMinuteQuery.code)
  return _s;
}
inline const std::string& PastMinuteQuery::_internal_code() const {
  return code_.Get();
}
inline void PastMinuteQuery::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PastMinuteQuery::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PastMinuteQuery::release_code() {
  // @@protoc_insertion_point(field_release:stock_api.PastMinuteQuery.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PastMinuteQuery::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stock_api.PastMinuteQuery.code)
}

// uint32 count_of_days = 2;
inline void PastMinuteQuery::clear_count_of_days() {
  count_of_days_ = 0u;
}
inline uint32_t PastMinuteQuery::_internal_count_of_days() const {
  return count_of_days_;
}
inline uint32_t PastMinuteQuery::count_of_days() const {
  // @@protoc_insertion_point(field_get:stock_api.PastMinuteQuery.count_of_days)
  return _internal_count_of_days();
}
inline void PastMinuteQuery::_internal_set_count_of_days(uint32_t value) {
  
  count_of_days_ = value;
}
inline void PastMinuteQuery::set_count_of_days(uint32_t value) {
  _internal_set_count_of_days(value);
  // @@protoc_insertion_point(field_set:stock_api.PastMinuteQuery.count_of_days)
}

// .google.protobuf.Timestamp today = 3;
inline bool PastMinuteQuery::_internal_has_today() const {
  return this != internal_default_instance() && today_ != nullptr;
}
inline bool PastMinuteQuery::has_today() const {
  return _internal_has_today();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PastMinuteQuery::_internal_today() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = today_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PastMinuteQuery::today() const {
  // @@protoc_insertion_point(field_get:stock_api.PastMinuteQuery.today)
  return _internal_today();
}
inline void PastMinuteQuery::unsafe_arena_set_allocated_today(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* today) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(today_);
  }
  today_ = today;
  if (today) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_api.PastMinuteQuery.today)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PastMinuteQuery::release_today() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = today_;
  today_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PastMinuteQuery::unsafe_arena_release_today() {
  // @@protoc_insertion_point(field_release:stock_api.PastMinuteQuery.today)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = today_;
  today_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PastMinuteQuery::_internal_mutable_today() {
  
  if (today_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    today_ = p;
  }
  return today_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PastMinuteQuery::mutable_today() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_today();
  // @@protoc_insertion_point(field_mutable:stock_api.PastMinuteQuery.today)
  return _msg;
}
inline void PastMinuteQuery::set_allocated_today(::PROTOBUF_NAMESPACE_ID::Timestamp* today) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(today_);
  }
  if (today) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(today));
    if (message_arena != submessage_arena) {
      today = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, today, submessage_arena);
    }
    
  } else {
    
  }
  today_ = today;
  // @@protoc_insertion_point(field_set_allocated:stock_api.PastMinuteQuery.today)
}

// -------------------------------------------------------------------

// CybosDayData

// uint32 date = 1;
inline void CybosDayData::clear_date() {
  date_ = 0u;
}
inline uint32_t CybosDayData::_internal_date() const {
  return date_;
}
inline uint32_t CybosDayData::date() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosDayData.date)
  return _internal_date();
}
inline void CybosDayData::_internal_set_date(uint32_t value) {
  
  date_ = value;
}
inline void CybosDayData::set_date(uint32_t value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosDayData.date)
}

// uint32 time = 2;
inline void CybosDayData::clear_time() {
  time_ = 0u;
}
inline uint32_t CybosDayData::_internal_time() const {
  return time_;
}
inline uint32_t CybosDayData::time() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosDayData.time)
  return _internal_time();
}
inline void CybosDayData::_internal_set_time(uint32_t value) {
  
  time_ = value;
}
inline void CybosDayData::set_time(uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosDayData.time)
}

// uint32 start_price = 3;
inline void CybosDayData::clear_start_price() {
  start_price_ = 0u;
}
inline uint32_t CybosDayData::_internal_start_price() const {
  return start_price_;
}
inline uint32_t CybosDayData::start_price() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosDayData.start_price)
  return _internal_start_price();
}
inline void CybosDayData::_internal_set_start_price(uint32_t value) {
  
  start_price_ = value;
}
inline void CybosDayData::set_start_price(uint32_t value) {
  _internal_set_start_price(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosDayData.start_price)
}

// uint32 highest_price = 4;
inline void CybosDayData::clear_highest_price() {
  highest_price_ = 0u;
}
inline uint32_t CybosDayData::_internal_highest_price() const {
  return highest_price_;
}
inline uint32_t CybosDayData::highest_price() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosDayData.highest_price)
  return _internal_highest_price();
}
inline void CybosDayData::_internal_set_highest_price(uint32_t value) {
  
  highest_price_ = value;
}
inline void CybosDayData::set_highest_price(uint32_t value) {
  _internal_set_highest_price(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosDayData.highest_price)
}

// uint32 lowest_price = 5;
inline void CybosDayData::clear_lowest_price() {
  lowest_price_ = 0u;
}
inline uint32_t CybosDayData::_internal_lowest_price() const {
  return lowest_price_;
}
inline uint32_t CybosDayData::lowest_price() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosDayData.lowest_price)
  return _internal_lowest_price();
}
inline void CybosDayData::_internal_set_lowest_price(uint32_t value) {
  
  lowest_price_ = value;
}
inline void CybosDayData::set_lowest_price(uint32_t value) {
  _internal_set_lowest_price(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosDayData.lowest_price)
}

// uint32 close_price = 6;
inline void CybosDayData::clear_close_price() {
  close_price_ = 0u;
}
inline uint32_t CybosDayData::_internal_close_price() const {
  return close_price_;
}
inline uint32_t CybosDayData::close_price() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosDayData.close_price)
  return _internal_close_price();
}
inline void CybosDayData::_internal_set_close_price(uint32_t value) {
  
  close_price_ = value;
}
inline void CybosDayData::set_close_price(uint32_t value) {
  _internal_set_close_price(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosDayData.close_price)
}

// int64 volume = 7;
inline void CybosDayData::clear_volume() {
  volume_ = int64_t{0};
}
inline int64_t CybosDayData::_internal_volume() const {
  return volume_;
}
inline int64_t CybosDayData::volume() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosDayData.volume)
  return _internal_volume();
}
inline void CybosDayData::_internal_set_volume(int64_t value) {
  
  volume_ = value;
}
inline void CybosDayData::set_volume(int64_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosDayData.volume)
}

// uint64 amount = 8;
inline void CybosDayData::clear_amount() {
  amount_ = uint64_t{0u};
}
inline uint64_t CybosDayData::_internal_amount() const {
  return amount_;
}
inline uint64_t CybosDayData::amount() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosDayData.amount)
  return _internal_amount();
}
inline void CybosDayData::_internal_set_amount(uint64_t value) {
  
  amount_ = value;
}
inline void CybosDayData::set_amount(uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosDayData.amount)
}

// uint64 cum_sell_volume = 9;
inline void CybosDayData::clear_cum_sell_volume() {
  cum_sell_volume_ = uint64_t{0u};
}
inline uint64_t CybosDayData::_internal_cum_sell_volume() const {
  return cum_sell_volume_;
}
inline uint64_t CybosDayData::cum_sell_volume() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosDayData.cum_sell_volume)
  return _internal_cum_sell_volume();
}
inline void CybosDayData::_internal_set_cum_sell_volume(uint64_t value) {
  
  cum_sell_volume_ = value;
}
inline void CybosDayData::set_cum_sell_volume(uint64_t value) {
  _internal_set_cum_sell_volume(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosDayData.cum_sell_volume)
}

// uint64 cum_buy_volume = 10;
inline void CybosDayData::clear_cum_buy_volume() {
  cum_buy_volume_ = uint64_t{0u};
}
inline uint64_t CybosDayData::_internal_cum_buy_volume() const {
  return cum_buy_volume_;
}
inline uint64_t CybosDayData::cum_buy_volume() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosDayData.cum_buy_volume)
  return _internal_cum_buy_volume();
}
inline void CybosDayData::_internal_set_cum_buy_volume(uint64_t value) {
  
  cum_buy_volume_ = value;
}
inline void CybosDayData::set_cum_buy_volume(uint64_t value) {
  _internal_set_cum_buy_volume(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosDayData.cum_buy_volume)
}

// int64 foreigner_hold_volume = 11;
inline void CybosDayData::clear_foreigner_hold_volume() {
  foreigner_hold_volume_ = int64_t{0};
}
inline int64_t CybosDayData::_internal_foreigner_hold_volume() const {
  return foreigner_hold_volume_;
}
inline int64_t CybosDayData::foreigner_hold_volume() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosDayData.foreigner_hold_volume)
  return _internal_foreigner_hold_volume();
}
inline void CybosDayData::_internal_set_foreigner_hold_volume(int64_t value) {
  
  foreigner_hold_volume_ = value;
}
inline void CybosDayData::set_foreigner_hold_volume(int64_t value) {
  _internal_set_foreigner_hold_volume(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosDayData.foreigner_hold_volume)
}

// float foreigner_hold_rate = 12;
inline void CybosDayData::clear_foreigner_hold_rate() {
  foreigner_hold_rate_ = 0;
}
inline float CybosDayData::_internal_foreigner_hold_rate() const {
  return foreigner_hold_rate_;
}
inline float CybosDayData::foreigner_hold_rate() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosDayData.foreigner_hold_rate)
  return _internal_foreigner_hold_rate();
}
inline void CybosDayData::_internal_set_foreigner_hold_rate(float value) {
  
  foreigner_hold_rate_ = value;
}
inline void CybosDayData::set_foreigner_hold_rate(float value) {
  _internal_set_foreigner_hold_rate(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosDayData.foreigner_hold_rate)
}

// int64 institution_buy_volume = 13;
inline void CybosDayData::clear_institution_buy_volume() {
  institution_buy_volume_ = int64_t{0};
}
inline int64_t CybosDayData::_internal_institution_buy_volume() const {
  return institution_buy_volume_;
}
inline int64_t CybosDayData::institution_buy_volume() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosDayData.institution_buy_volume)
  return _internal_institution_buy_volume();
}
inline void CybosDayData::_internal_set_institution_buy_volume(int64_t value) {
  
  institution_buy_volume_ = value;
}
inline void CybosDayData::set_institution_buy_volume(int64_t value) {
  _internal_set_institution_buy_volume(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosDayData.institution_buy_volume)
}

// int64 institution_cum_buy_volume = 14;
inline void CybosDayData::clear_institution_cum_buy_volume() {
  institution_cum_buy_volume_ = int64_t{0};
}
inline int64_t CybosDayData::_internal_institution_cum_buy_volume() const {
  return institution_cum_buy_volume_;
}
inline int64_t CybosDayData::institution_cum_buy_volume() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosDayData.institution_cum_buy_volume)
  return _internal_institution_cum_buy_volume();
}
inline void CybosDayData::_internal_set_institution_cum_buy_volume(int64_t value) {
  
  institution_cum_buy_volume_ = value;
}
inline void CybosDayData::set_institution_cum_buy_volume(int64_t value) {
  _internal_set_institution_cum_buy_volume(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosDayData.institution_cum_buy_volume)
}

// bool is_synchronized_bidding = 15;
inline void CybosDayData::clear_is_synchronized_bidding() {
  is_synchronized_bidding_ = false;
}
inline bool CybosDayData::_internal_is_synchronized_bidding() const {
  return is_synchronized_bidding_;
}
inline bool CybosDayData::is_synchronized_bidding() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosDayData.is_synchronized_bidding)
  return _internal_is_synchronized_bidding();
}
inline void CybosDayData::_internal_set_is_synchronized_bidding(bool value) {
  
  is_synchronized_bidding_ = value;
}
inline void CybosDayData::set_is_synchronized_bidding(bool value) {
  _internal_set_is_synchronized_bidding(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosDayData.is_synchronized_bidding)
}

// -------------------------------------------------------------------

// CybosDayDatas

// repeated .stock_api.CybosDayData day_data = 1;
inline int CybosDayDatas::_internal_day_data_size() const {
  return day_data_.size();
}
inline int CybosDayDatas::day_data_size() const {
  return _internal_day_data_size();
}
inline void CybosDayDatas::clear_day_data() {
  day_data_.Clear();
}
inline ::stock_api::CybosDayData* CybosDayDatas::mutable_day_data(int index) {
  // @@protoc_insertion_point(field_mutable:stock_api.CybosDayDatas.day_data)
  return day_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stock_api::CybosDayData >*
CybosDayDatas::mutable_day_data() {
  // @@protoc_insertion_point(field_mutable_list:stock_api.CybosDayDatas.day_data)
  return &day_data_;
}
inline const ::stock_api::CybosDayData& CybosDayDatas::_internal_day_data(int index) const {
  return day_data_.Get(index);
}
inline const ::stock_api::CybosDayData& CybosDayDatas::day_data(int index) const {
  // @@protoc_insertion_point(field_get:stock_api.CybosDayDatas.day_data)
  return _internal_day_data(index);
}
inline ::stock_api::CybosDayData* CybosDayDatas::_internal_add_day_data() {
  return day_data_.Add();
}
inline ::stock_api::CybosDayData* CybosDayDatas::add_day_data() {
  ::stock_api::CybosDayData* _add = _internal_add_day_data();
  // @@protoc_insertion_point(field_add:stock_api.CybosDayDatas.day_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stock_api::CybosDayData >&
CybosDayDatas::day_data() const {
  // @@protoc_insertion_point(field_list:stock_api.CybosDayDatas.day_data)
  return day_data_;
}

// -------------------------------------------------------------------

// CybosSubjectTickData

// .google.protobuf.Timestamp tick_date = 1;
inline bool CybosSubjectTickData::_internal_has_tick_date() const {
  return this != internal_default_instance() && tick_date_ != nullptr;
}
inline bool CybosSubjectTickData::has_tick_date() const {
  return _internal_has_tick_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CybosSubjectTickData::_internal_tick_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = tick_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CybosSubjectTickData::tick_date() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosSubjectTickData.tick_date)
  return _internal_tick_date();
}
inline void CybosSubjectTickData::unsafe_arena_set_allocated_tick_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* tick_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tick_date_);
  }
  tick_date_ = tick_date;
  if (tick_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_api.CybosSubjectTickData.tick_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CybosSubjectTickData::release_tick_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = tick_date_;
  tick_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CybosSubjectTickData::unsafe_arena_release_tick_date() {
  // @@protoc_insertion_point(field_release:stock_api.CybosSubjectTickData.tick_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = tick_date_;
  tick_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CybosSubjectTickData::_internal_mutable_tick_date() {
  
  if (tick_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    tick_date_ = p;
  }
  return tick_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CybosSubjectTickData::mutable_tick_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_tick_date();
  // @@protoc_insertion_point(field_mutable:stock_api.CybosSubjectTickData.tick_date)
  return _msg;
}
inline void CybosSubjectTickData::set_allocated_tick_date(::PROTOBUF_NAMESPACE_ID::Timestamp* tick_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tick_date_);
  }
  if (tick_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tick_date));
    if (message_arena != submessage_arena) {
      tick_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tick_date, submessage_arena);
    }
    
  } else {
    
  }
  tick_date_ = tick_date;
  // @@protoc_insertion_point(field_set_allocated:stock_api.CybosSubjectTickData.tick_date)
}

// uint32 time = 2;
inline void CybosSubjectTickData::clear_time() {
  time_ = 0u;
}
inline uint32_t CybosSubjectTickData::_internal_time() const {
  return time_;
}
inline uint32_t CybosSubjectTickData::time() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosSubjectTickData.time)
  return _internal_time();
}
inline void CybosSubjectTickData::_internal_set_time(uint32_t value) {
  
  time_ = value;
}
inline void CybosSubjectTickData::set_time(uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosSubjectTickData.time)
}

// string name = 3;
inline void CybosSubjectTickData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CybosSubjectTickData::name() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosSubjectTickData.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CybosSubjectTickData::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stock_api.CybosSubjectTickData.name)
}
inline std::string* CybosSubjectTickData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:stock_api.CybosSubjectTickData.name)
  return _s;
}
inline const std::string& CybosSubjectTickData::_internal_name() const {
  return name_.Get();
}
inline void CybosSubjectTickData::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CybosSubjectTickData::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CybosSubjectTickData::release_name() {
  // @@protoc_insertion_point(field_release:stock_api.CybosSubjectTickData.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CybosSubjectTickData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stock_api.CybosSubjectTickData.name)
}

// string code = 4;
inline void CybosSubjectTickData::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& CybosSubjectTickData::code() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosSubjectTickData.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CybosSubjectTickData::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stock_api.CybosSubjectTickData.code)
}
inline std::string* CybosSubjectTickData::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:stock_api.CybosSubjectTickData.code)
  return _s;
}
inline const std::string& CybosSubjectTickData::_internal_code() const {
  return code_.Get();
}
inline void CybosSubjectTickData::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CybosSubjectTickData::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CybosSubjectTickData::release_code() {
  // @@protoc_insertion_point(field_release:stock_api.CybosSubjectTickData.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CybosSubjectTickData::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stock_api.CybosSubjectTickData.code)
}

// string company_name = 5;
inline void CybosSubjectTickData::clear_company_name() {
  company_name_.ClearToEmpty();
}
inline const std::string& CybosSubjectTickData::company_name() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosSubjectTickData.company_name)
  return _internal_company_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CybosSubjectTickData::set_company_name(ArgT0&& arg0, ArgT... args) {
 
 company_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stock_api.CybosSubjectTickData.company_name)
}
inline std::string* CybosSubjectTickData::mutable_company_name() {
  std::string* _s = _internal_mutable_company_name();
  // @@protoc_insertion_point(field_mutable:stock_api.CybosSubjectTickData.company_name)
  return _s;
}
inline const std::string& CybosSubjectTickData::_internal_company_name() const {
  return company_name_.Get();
}
inline void CybosSubjectTickData::_internal_set_company_name(const std::string& value) {
  
  company_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CybosSubjectTickData::_internal_mutable_company_name() {
  
  return company_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CybosSubjectTickData::release_company_name() {
  // @@protoc_insertion_point(field_release:stock_api.CybosSubjectTickData.company_name)
  return company_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CybosSubjectTickData::set_allocated_company_name(std::string* company_name) {
  if (company_name != nullptr) {
    
  } else {
    
  }
  company_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), company_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (company_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    company_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stock_api.CybosSubjectTickData.company_name)
}

// bool buy_or_sell = 6;
inline void CybosSubjectTickData::clear_buy_or_sell() {
  buy_or_sell_ = false;
}
inline bool CybosSubjectTickData::_internal_buy_or_sell() const {
  return buy_or_sell_;
}
inline bool CybosSubjectTickData::buy_or_sell() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosSubjectTickData.buy_or_sell)
  return _internal_buy_or_sell();
}
inline void CybosSubjectTickData::_internal_set_buy_or_sell(bool value) {
  
  buy_or_sell_ = value;
}
inline void CybosSubjectTickData::set_buy_or_sell(bool value) {
  _internal_set_buy_or_sell(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosSubjectTickData.buy_or_sell)
}

// uint64 volume = 7;
inline void CybosSubjectTickData::clear_volume() {
  volume_ = uint64_t{0u};
}
inline uint64_t CybosSubjectTickData::_internal_volume() const {
  return volume_;
}
inline uint64_t CybosSubjectTickData::volume() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosSubjectTickData.volume)
  return _internal_volume();
}
inline void CybosSubjectTickData::_internal_set_volume(uint64_t value) {
  
  volume_ = value;
}
inline void CybosSubjectTickData::set_volume(uint64_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosSubjectTickData.volume)
}

// int64 total_volume = 8;
inline void CybosSubjectTickData::clear_total_volume() {
  total_volume_ = int64_t{0};
}
inline int64_t CybosSubjectTickData::_internal_total_volume() const {
  return total_volume_;
}
inline int64_t CybosSubjectTickData::total_volume() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosSubjectTickData.total_volume)
  return _internal_total_volume();
}
inline void CybosSubjectTickData::_internal_set_total_volume(int64_t value) {
  
  total_volume_ = value;
}
inline void CybosSubjectTickData::set_total_volume(int64_t value) {
  _internal_set_total_volume(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosSubjectTickData.total_volume)
}

// int64 foreigner_total_volume = 9;
inline void CybosSubjectTickData::clear_foreigner_total_volume() {
  foreigner_total_volume_ = int64_t{0};
}
inline int64_t CybosSubjectTickData::_internal_foreigner_total_volume() const {
  return foreigner_total_volume_;
}
inline int64_t CybosSubjectTickData::foreigner_total_volume() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosSubjectTickData.foreigner_total_volume)
  return _internal_foreigner_total_volume();
}
inline void CybosSubjectTickData::_internal_set_foreigner_total_volume(int64_t value) {
  
  foreigner_total_volume_ = value;
}
inline void CybosSubjectTickData::set_foreigner_total_volume(int64_t value) {
  _internal_set_foreigner_total_volume(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosSubjectTickData.foreigner_total_volume)
}

// -------------------------------------------------------------------

// CybosTickDatas

// repeated .stock_api.CybosTickData tick_data = 1;
inline int CybosTickDatas::_internal_tick_data_size() const {
  return tick_data_.size();
}
inline int CybosTickDatas::tick_data_size() const {
  return _internal_tick_data_size();
}
inline void CybosTickDatas::clear_tick_data() {
  tick_data_.Clear();
}
inline ::stock_api::CybosTickData* CybosTickDatas::mutable_tick_data(int index) {
  // @@protoc_insertion_point(field_mutable:stock_api.CybosTickDatas.tick_data)
  return tick_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stock_api::CybosTickData >*
CybosTickDatas::mutable_tick_data() {
  // @@protoc_insertion_point(field_mutable_list:stock_api.CybosTickDatas.tick_data)
  return &tick_data_;
}
inline const ::stock_api::CybosTickData& CybosTickDatas::_internal_tick_data(int index) const {
  return tick_data_.Get(index);
}
inline const ::stock_api::CybosTickData& CybosTickDatas::tick_data(int index) const {
  // @@protoc_insertion_point(field_get:stock_api.CybosTickDatas.tick_data)
  return _internal_tick_data(index);
}
inline ::stock_api::CybosTickData* CybosTickDatas::_internal_add_tick_data() {
  return tick_data_.Add();
}
inline ::stock_api::CybosTickData* CybosTickDatas::add_tick_data() {
  ::stock_api::CybosTickData* _add = _internal_add_tick_data();
  // @@protoc_insertion_point(field_add:stock_api.CybosTickDatas.tick_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stock_api::CybosTickData >&
CybosTickDatas::tick_data() const {
  // @@protoc_insertion_point(field_list:stock_api.CybosTickDatas.tick_data)
  return tick_data_;
}

// -------------------------------------------------------------------

// CybosTickData

// .google.protobuf.Timestamp tick_date = 1;
inline bool CybosTickData::_internal_has_tick_date() const {
  return this != internal_default_instance() && tick_date_ != nullptr;
}
inline bool CybosTickData::has_tick_date() const {
  return _internal_has_tick_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CybosTickData::_internal_tick_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = tick_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CybosTickData::tick_date() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosTickData.tick_date)
  return _internal_tick_date();
}
inline void CybosTickData::unsafe_arena_set_allocated_tick_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* tick_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tick_date_);
  }
  tick_date_ = tick_date;
  if (tick_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_api.CybosTickData.tick_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CybosTickData::release_tick_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = tick_date_;
  tick_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CybosTickData::unsafe_arena_release_tick_date() {
  // @@protoc_insertion_point(field_release:stock_api.CybosTickData.tick_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = tick_date_;
  tick_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CybosTickData::_internal_mutable_tick_date() {
  
  if (tick_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    tick_date_ = p;
  }
  return tick_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CybosTickData::mutable_tick_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_tick_date();
  // @@protoc_insertion_point(field_mutable:stock_api.CybosTickData.tick_date)
  return _msg;
}
inline void CybosTickData::set_allocated_tick_date(::PROTOBUF_NAMESPACE_ID::Timestamp* tick_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tick_date_);
  }
  if (tick_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tick_date));
    if (message_arena != submessage_arena) {
      tick_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tick_date, submessage_arena);
    }
    
  } else {
    
  }
  tick_date_ = tick_date;
  // @@protoc_insertion_point(field_set_allocated:stock_api.CybosTickData.tick_date)
}

// string code = 2;
inline void CybosTickData::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& CybosTickData::code() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosTickData.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CybosTickData::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stock_api.CybosTickData.code)
}
inline std::string* CybosTickData::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:stock_api.CybosTickData.code)
  return _s;
}
inline const std::string& CybosTickData::_internal_code() const {
  return code_.Get();
}
inline void CybosTickData::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CybosTickData::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CybosTickData::release_code() {
  // @@protoc_insertion_point(field_release:stock_api.CybosTickData.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CybosTickData::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stock_api.CybosTickData.code)
}

// string company_name = 3;
inline void CybosTickData::clear_company_name() {
  company_name_.ClearToEmpty();
}
inline const std::string& CybosTickData::company_name() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosTickData.company_name)
  return _internal_company_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CybosTickData::set_company_name(ArgT0&& arg0, ArgT... args) {
 
 company_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stock_api.CybosTickData.company_name)
}
inline std::string* CybosTickData::mutable_company_name() {
  std::string* _s = _internal_mutable_company_name();
  // @@protoc_insertion_point(field_mutable:stock_api.CybosTickData.company_name)
  return _s;
}
inline const std::string& CybosTickData::_internal_company_name() const {
  return company_name_.Get();
}
inline void CybosTickData::_internal_set_company_name(const std::string& value) {
  
  company_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CybosTickData::_internal_mutable_company_name() {
  
  return company_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CybosTickData::release_company_name() {
  // @@protoc_insertion_point(field_release:stock_api.CybosTickData.company_name)
  return company_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CybosTickData::set_allocated_company_name(std::string* company_name) {
  if (company_name != nullptr) {
    
  } else {
    
  }
  company_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), company_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (company_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    company_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stock_api.CybosTickData.company_name)
}

// int32 yesterday_diff = 4;
inline void CybosTickData::clear_yesterday_diff() {
  yesterday_diff_ = 0;
}
inline int32_t CybosTickData::_internal_yesterday_diff() const {
  return yesterday_diff_;
}
inline int32_t CybosTickData::yesterday_diff() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosTickData.yesterday_diff)
  return _internal_yesterday_diff();
}
inline void CybosTickData::_internal_set_yesterday_diff(int32_t value) {
  
  yesterday_diff_ = value;
}
inline void CybosTickData::set_yesterday_diff(int32_t value) {
  _internal_set_yesterday_diff(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosTickData.yesterday_diff)
}

// uint32 time = 5;
inline void CybosTickData::clear_time() {
  time_ = 0u;
}
inline uint32_t CybosTickData::_internal_time() const {
  return time_;
}
inline uint32_t CybosTickData::time() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosTickData.time)
  return _internal_time();
}
inline void CybosTickData::_internal_set_time(uint32_t value) {
  
  time_ = value;
}
inline void CybosTickData::set_time(uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosTickData.time)
}

// uint32 start_price = 6;
inline void CybosTickData::clear_start_price() {
  start_price_ = 0u;
}
inline uint32_t CybosTickData::_internal_start_price() const {
  return start_price_;
}
inline uint32_t CybosTickData::start_price() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosTickData.start_price)
  return _internal_start_price();
}
inline void CybosTickData::_internal_set_start_price(uint32_t value) {
  
  start_price_ = value;
}
inline void CybosTickData::set_start_price(uint32_t value) {
  _internal_set_start_price(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosTickData.start_price)
}

// uint32 highest_price = 7;
inline void CybosTickData::clear_highest_price() {
  highest_price_ = 0u;
}
inline uint32_t CybosTickData::_internal_highest_price() const {
  return highest_price_;
}
inline uint32_t CybosTickData::highest_price() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosTickData.highest_price)
  return _internal_highest_price();
}
inline void CybosTickData::_internal_set_highest_price(uint32_t value) {
  
  highest_price_ = value;
}
inline void CybosTickData::set_highest_price(uint32_t value) {
  _internal_set_highest_price(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosTickData.highest_price)
}

// uint32 lowest_price = 8;
inline void CybosTickData::clear_lowest_price() {
  lowest_price_ = 0u;
}
inline uint32_t CybosTickData::_internal_lowest_price() const {
  return lowest_price_;
}
inline uint32_t CybosTickData::lowest_price() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosTickData.lowest_price)
  return _internal_lowest_price();
}
inline void CybosTickData::_internal_set_lowest_price(uint32_t value) {
  
  lowest_price_ = value;
}
inline void CybosTickData::set_lowest_price(uint32_t value) {
  _internal_set_lowest_price(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosTickData.lowest_price)
}

// uint32 ask_price = 9;
inline void CybosTickData::clear_ask_price() {
  ask_price_ = 0u;
}
inline uint32_t CybosTickData::_internal_ask_price() const {
  return ask_price_;
}
inline uint32_t CybosTickData::ask_price() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosTickData.ask_price)
  return _internal_ask_price();
}
inline void CybosTickData::_internal_set_ask_price(uint32_t value) {
  
  ask_price_ = value;
}
inline void CybosTickData::set_ask_price(uint32_t value) {
  _internal_set_ask_price(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosTickData.ask_price)
}

// uint32 bid_price = 10;
inline void CybosTickData::clear_bid_price() {
  bid_price_ = 0u;
}
inline uint32_t CybosTickData::_internal_bid_price() const {
  return bid_price_;
}
inline uint32_t CybosTickData::bid_price() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosTickData.bid_price)
  return _internal_bid_price();
}
inline void CybosTickData::_internal_set_bid_price(uint32_t value) {
  
  bid_price_ = value;
}
inline void CybosTickData::set_bid_price(uint32_t value) {
  _internal_set_bid_price(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosTickData.bid_price)
}

// uint64 cum_volume = 11;
inline void CybosTickData::clear_cum_volume() {
  cum_volume_ = uint64_t{0u};
}
inline uint64_t CybosTickData::_internal_cum_volume() const {
  return cum_volume_;
}
inline uint64_t CybosTickData::cum_volume() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosTickData.cum_volume)
  return _internal_cum_volume();
}
inline void CybosTickData::_internal_set_cum_volume(uint64_t value) {
  
  cum_volume_ = value;
}
inline void CybosTickData::set_cum_volume(uint64_t value) {
  _internal_set_cum_volume(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosTickData.cum_volume)
}

// uint64 cum_amount = 12;
inline void CybosTickData::clear_cum_amount() {
  cum_amount_ = uint64_t{0u};
}
inline uint64_t CybosTickData::_internal_cum_amount() const {
  return cum_amount_;
}
inline uint64_t CybosTickData::cum_amount() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosTickData.cum_amount)
  return _internal_cum_amount();
}
inline void CybosTickData::_internal_set_cum_amount(uint64_t value) {
  
  cum_amount_ = value;
}
inline void CybosTickData::set_cum_amount(uint64_t value) {
  _internal_set_cum_amount(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosTickData.cum_amount)
}

// uint32 current_price = 13;
inline void CybosTickData::clear_current_price() {
  current_price_ = 0u;
}
inline uint32_t CybosTickData::_internal_current_price() const {
  return current_price_;
}
inline uint32_t CybosTickData::current_price() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosTickData.current_price)
  return _internal_current_price();
}
inline void CybosTickData::_internal_set_current_price(uint32_t value) {
  
  current_price_ = value;
}
inline void CybosTickData::set_current_price(uint32_t value) {
  _internal_set_current_price(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosTickData.current_price)
}

// bool buy_or_sell = 14;
inline void CybosTickData::clear_buy_or_sell() {
  buy_or_sell_ = false;
}
inline bool CybosTickData::_internal_buy_or_sell() const {
  return buy_or_sell_;
}
inline bool CybosTickData::buy_or_sell() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosTickData.buy_or_sell)
  return _internal_buy_or_sell();
}
inline void CybosTickData::_internal_set_buy_or_sell(bool value) {
  
  buy_or_sell_ = value;
}
inline void CybosTickData::set_buy_or_sell(bool value) {
  _internal_set_buy_or_sell(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosTickData.buy_or_sell)
}

// uint64 cum_sell_volume_by_price = 15;
inline void CybosTickData::clear_cum_sell_volume_by_price() {
  cum_sell_volume_by_price_ = uint64_t{0u};
}
inline uint64_t CybosTickData::_internal_cum_sell_volume_by_price() const {
  return cum_sell_volume_by_price_;
}
inline uint64_t CybosTickData::cum_sell_volume_by_price() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosTickData.cum_sell_volume_by_price)
  return _internal_cum_sell_volume_by_price();
}
inline void CybosTickData::_internal_set_cum_sell_volume_by_price(uint64_t value) {
  
  cum_sell_volume_by_price_ = value;
}
inline void CybosTickData::set_cum_sell_volume_by_price(uint64_t value) {
  _internal_set_cum_sell_volume_by_price(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosTickData.cum_sell_volume_by_price)
}

// uint64 cum_buy_volume_by_price = 16;
inline void CybosTickData::clear_cum_buy_volume_by_price() {
  cum_buy_volume_by_price_ = uint64_t{0u};
}
inline uint64_t CybosTickData::_internal_cum_buy_volume_by_price() const {
  return cum_buy_volume_by_price_;
}
inline uint64_t CybosTickData::cum_buy_volume_by_price() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosTickData.cum_buy_volume_by_price)
  return _internal_cum_buy_volume_by_price();
}
inline void CybosTickData::_internal_set_cum_buy_volume_by_price(uint64_t value) {
  
  cum_buy_volume_by_price_ = value;
}
inline void CybosTickData::set_cum_buy_volume_by_price(uint64_t value) {
  _internal_set_cum_buy_volume_by_price(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosTickData.cum_buy_volume_by_price)
}

// int64 volume = 17;
inline void CybosTickData::clear_volume() {
  volume_ = int64_t{0};
}
inline int64_t CybosTickData::_internal_volume() const {
  return volume_;
}
inline int64_t CybosTickData::volume() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosTickData.volume)
  return _internal_volume();
}
inline void CybosTickData::_internal_set_volume(int64_t value) {
  
  volume_ = value;
}
inline void CybosTickData::set_volume(int64_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosTickData.volume)
}

// uint32 time_with_sec = 18;
inline void CybosTickData::clear_time_with_sec() {
  time_with_sec_ = 0u;
}
inline uint32_t CybosTickData::_internal_time_with_sec() const {
  return time_with_sec_;
}
inline uint32_t CybosTickData::time_with_sec() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosTickData.time_with_sec)
  return _internal_time_with_sec();
}
inline void CybosTickData::_internal_set_time_with_sec(uint32_t value) {
  
  time_with_sec_ = value;
}
inline void CybosTickData::set_time_with_sec(uint32_t value) {
  _internal_set_time_with_sec(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosTickData.time_with_sec)
}

// uint32 market_type_exp = 19;
inline void CybosTickData::clear_market_type_exp() {
  market_type_exp_ = 0u;
}
inline uint32_t CybosTickData::_internal_market_type_exp() const {
  return market_type_exp_;
}
inline uint32_t CybosTickData::market_type_exp() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosTickData.market_type_exp)
  return _internal_market_type_exp();
}
inline void CybosTickData::_internal_set_market_type_exp(uint32_t value) {
  
  market_type_exp_ = value;
}
inline void CybosTickData::set_market_type_exp(uint32_t value) {
  _internal_set_market_type_exp(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosTickData.market_type_exp)
}

// uint32 market_type = 20;
inline void CybosTickData::clear_market_type() {
  market_type_ = 0u;
}
inline uint32_t CybosTickData::_internal_market_type() const {
  return market_type_;
}
inline uint32_t CybosTickData::market_type() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosTickData.market_type)
  return _internal_market_type();
}
inline void CybosTickData::_internal_set_market_type(uint32_t value) {
  
  market_type_ = value;
}
inline void CybosTickData::set_market_type(uint32_t value) {
  _internal_set_market_type(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosTickData.market_type)
}

// uint64 out_time_volume = 21;
inline void CybosTickData::clear_out_time_volume() {
  out_time_volume_ = uint64_t{0u};
}
inline uint64_t CybosTickData::_internal_out_time_volume() const {
  return out_time_volume_;
}
inline uint64_t CybosTickData::out_time_volume() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosTickData.out_time_volume)
  return _internal_out_time_volume();
}
inline void CybosTickData::_internal_set_out_time_volume(uint64_t value) {
  
  out_time_volume_ = value;
}
inline void CybosTickData::set_out_time_volume(uint64_t value) {
  _internal_set_out_time_volume(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosTickData.out_time_volume)
}

// uint64 cum_sell_volume = 22;
inline void CybosTickData::clear_cum_sell_volume() {
  cum_sell_volume_ = uint64_t{0u};
}
inline uint64_t CybosTickData::_internal_cum_sell_volume() const {
  return cum_sell_volume_;
}
inline uint64_t CybosTickData::cum_sell_volume() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosTickData.cum_sell_volume)
  return _internal_cum_sell_volume();
}
inline void CybosTickData::_internal_set_cum_sell_volume(uint64_t value) {
  
  cum_sell_volume_ = value;
}
inline void CybosTickData::set_cum_sell_volume(uint64_t value) {
  _internal_set_cum_sell_volume(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosTickData.cum_sell_volume)
}

// uint64 cum_buy_volume = 23;
inline void CybosTickData::clear_cum_buy_volume() {
  cum_buy_volume_ = uint64_t{0u};
}
inline uint64_t CybosTickData::_internal_cum_buy_volume() const {
  return cum_buy_volume_;
}
inline uint64_t CybosTickData::cum_buy_volume() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosTickData.cum_buy_volume)
  return _internal_cum_buy_volume();
}
inline void CybosTickData::_internal_set_cum_buy_volume(uint64_t value) {
  
  cum_buy_volume_ = value;
}
inline void CybosTickData::set_cum_buy_volume(uint64_t value) {
  _internal_set_cum_buy_volume(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosTickData.cum_buy_volume)
}

// bool is_kospi = 24;
inline void CybosTickData::clear_is_kospi() {
  is_kospi_ = false;
}
inline bool CybosTickData::_internal_is_kospi() const {
  return is_kospi_;
}
inline bool CybosTickData::is_kospi() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosTickData.is_kospi)
  return _internal_is_kospi();
}
inline void CybosTickData::_internal_set_is_kospi(bool value) {
  
  is_kospi_ = value;
}
inline void CybosTickData::set_is_kospi(bool value) {
  _internal_set_is_kospi(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosTickData.is_kospi)
}

// float amount_ratio = 25;
inline void CybosTickData::clear_amount_ratio() {
  amount_ratio_ = 0;
}
inline float CybosTickData::_internal_amount_ratio() const {
  return amount_ratio_;
}
inline float CybosTickData::amount_ratio() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosTickData.amount_ratio)
  return _internal_amount_ratio();
}
inline void CybosTickData::_internal_set_amount_ratio(float value) {
  
  amount_ratio_ = value;
}
inline void CybosTickData::set_amount_ratio(float value) {
  _internal_set_amount_ratio(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosTickData.amount_ratio)
}

// -------------------------------------------------------------------

// CybosBidAskTickData

// .google.protobuf.Timestamp tick_date = 1;
inline bool CybosBidAskTickData::_internal_has_tick_date() const {
  return this != internal_default_instance() && tick_date_ != nullptr;
}
inline bool CybosBidAskTickData::has_tick_date() const {
  return _internal_has_tick_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CybosBidAskTickData::_internal_tick_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = tick_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CybosBidAskTickData::tick_date() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosBidAskTickData.tick_date)
  return _internal_tick_date();
}
inline void CybosBidAskTickData::unsafe_arena_set_allocated_tick_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* tick_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tick_date_);
  }
  tick_date_ = tick_date;
  if (tick_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_api.CybosBidAskTickData.tick_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CybosBidAskTickData::release_tick_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = tick_date_;
  tick_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CybosBidAskTickData::unsafe_arena_release_tick_date() {
  // @@protoc_insertion_point(field_release:stock_api.CybosBidAskTickData.tick_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = tick_date_;
  tick_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CybosBidAskTickData::_internal_mutable_tick_date() {
  
  if (tick_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    tick_date_ = p;
  }
  return tick_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CybosBidAskTickData::mutable_tick_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_tick_date();
  // @@protoc_insertion_point(field_mutable:stock_api.CybosBidAskTickData.tick_date)
  return _msg;
}
inline void CybosBidAskTickData::set_allocated_tick_date(::PROTOBUF_NAMESPACE_ID::Timestamp* tick_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tick_date_);
  }
  if (tick_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tick_date));
    if (message_arena != submessage_arena) {
      tick_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tick_date, submessage_arena);
    }
    
  } else {
    
  }
  tick_date_ = tick_date;
  // @@protoc_insertion_point(field_set_allocated:stock_api.CybosBidAskTickData.tick_date)
}

// string code = 2;
inline void CybosBidAskTickData::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& CybosBidAskTickData::code() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosBidAskTickData.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CybosBidAskTickData::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stock_api.CybosBidAskTickData.code)
}
inline std::string* CybosBidAskTickData::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:stock_api.CybosBidAskTickData.code)
  return _s;
}
inline const std::string& CybosBidAskTickData::_internal_code() const {
  return code_.Get();
}
inline void CybosBidAskTickData::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CybosBidAskTickData::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CybosBidAskTickData::release_code() {
  // @@protoc_insertion_point(field_release:stock_api.CybosBidAskTickData.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CybosBidAskTickData::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stock_api.CybosBidAskTickData.code)
}

// uint32 time = 3;
inline void CybosBidAskTickData::clear_time() {
  time_ = 0u;
}
inline uint32_t CybosBidAskTickData::_internal_time() const {
  return time_;
}
inline uint32_t CybosBidAskTickData::time() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosBidAskTickData.time)
  return _internal_time();
}
inline void CybosBidAskTickData::_internal_set_time(uint32_t value) {
  
  time_ = value;
}
inline void CybosBidAskTickData::set_time(uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosBidAskTickData.time)
}

// uint64 volume = 4;
inline void CybosBidAskTickData::clear_volume() {
  volume_ = uint64_t{0u};
}
inline uint64_t CybosBidAskTickData::_internal_volume() const {
  return volume_;
}
inline uint64_t CybosBidAskTickData::volume() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosBidAskTickData.volume)
  return _internal_volume();
}
inline void CybosBidAskTickData::_internal_set_volume(uint64_t value) {
  
  volume_ = value;
}
inline void CybosBidAskTickData::set_volume(uint64_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosBidAskTickData.volume)
}

// repeated int32 ask_prices = 5;
inline int CybosBidAskTickData::_internal_ask_prices_size() const {
  return ask_prices_.size();
}
inline int CybosBidAskTickData::ask_prices_size() const {
  return _internal_ask_prices_size();
}
inline void CybosBidAskTickData::clear_ask_prices() {
  ask_prices_.Clear();
}
inline int32_t CybosBidAskTickData::_internal_ask_prices(int index) const {
  return ask_prices_.Get(index);
}
inline int32_t CybosBidAskTickData::ask_prices(int index) const {
  // @@protoc_insertion_point(field_get:stock_api.CybosBidAskTickData.ask_prices)
  return _internal_ask_prices(index);
}
inline void CybosBidAskTickData::set_ask_prices(int index, int32_t value) {
  ask_prices_.Set(index, value);
  // @@protoc_insertion_point(field_set:stock_api.CybosBidAskTickData.ask_prices)
}
inline void CybosBidAskTickData::_internal_add_ask_prices(int32_t value) {
  ask_prices_.Add(value);
}
inline void CybosBidAskTickData::add_ask_prices(int32_t value) {
  _internal_add_ask_prices(value);
  // @@protoc_insertion_point(field_add:stock_api.CybosBidAskTickData.ask_prices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CybosBidAskTickData::_internal_ask_prices() const {
  return ask_prices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CybosBidAskTickData::ask_prices() const {
  // @@protoc_insertion_point(field_list:stock_api.CybosBidAskTickData.ask_prices)
  return _internal_ask_prices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CybosBidAskTickData::_internal_mutable_ask_prices() {
  return &ask_prices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CybosBidAskTickData::mutable_ask_prices() {
  // @@protoc_insertion_point(field_mutable_list:stock_api.CybosBidAskTickData.ask_prices)
  return _internal_mutable_ask_prices();
}

// repeated int32 bid_prices = 6;
inline int CybosBidAskTickData::_internal_bid_prices_size() const {
  return bid_prices_.size();
}
inline int CybosBidAskTickData::bid_prices_size() const {
  return _internal_bid_prices_size();
}
inline void CybosBidAskTickData::clear_bid_prices() {
  bid_prices_.Clear();
}
inline int32_t CybosBidAskTickData::_internal_bid_prices(int index) const {
  return bid_prices_.Get(index);
}
inline int32_t CybosBidAskTickData::bid_prices(int index) const {
  // @@protoc_insertion_point(field_get:stock_api.CybosBidAskTickData.bid_prices)
  return _internal_bid_prices(index);
}
inline void CybosBidAskTickData::set_bid_prices(int index, int32_t value) {
  bid_prices_.Set(index, value);
  // @@protoc_insertion_point(field_set:stock_api.CybosBidAskTickData.bid_prices)
}
inline void CybosBidAskTickData::_internal_add_bid_prices(int32_t value) {
  bid_prices_.Add(value);
}
inline void CybosBidAskTickData::add_bid_prices(int32_t value) {
  _internal_add_bid_prices(value);
  // @@protoc_insertion_point(field_add:stock_api.CybosBidAskTickData.bid_prices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CybosBidAskTickData::_internal_bid_prices() const {
  return bid_prices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CybosBidAskTickData::bid_prices() const {
  // @@protoc_insertion_point(field_list:stock_api.CybosBidAskTickData.bid_prices)
  return _internal_bid_prices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CybosBidAskTickData::_internal_mutable_bid_prices() {
  return &bid_prices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CybosBidAskTickData::mutable_bid_prices() {
  // @@protoc_insertion_point(field_mutable_list:stock_api.CybosBidAskTickData.bid_prices)
  return _internal_mutable_bid_prices();
}

// repeated uint32 ask_remains = 7;
inline int CybosBidAskTickData::_internal_ask_remains_size() const {
  return ask_remains_.size();
}
inline int CybosBidAskTickData::ask_remains_size() const {
  return _internal_ask_remains_size();
}
inline void CybosBidAskTickData::clear_ask_remains() {
  ask_remains_.Clear();
}
inline uint32_t CybosBidAskTickData::_internal_ask_remains(int index) const {
  return ask_remains_.Get(index);
}
inline uint32_t CybosBidAskTickData::ask_remains(int index) const {
  // @@protoc_insertion_point(field_get:stock_api.CybosBidAskTickData.ask_remains)
  return _internal_ask_remains(index);
}
inline void CybosBidAskTickData::set_ask_remains(int index, uint32_t value) {
  ask_remains_.Set(index, value);
  // @@protoc_insertion_point(field_set:stock_api.CybosBidAskTickData.ask_remains)
}
inline void CybosBidAskTickData::_internal_add_ask_remains(uint32_t value) {
  ask_remains_.Add(value);
}
inline void CybosBidAskTickData::add_ask_remains(uint32_t value) {
  _internal_add_ask_remains(value);
  // @@protoc_insertion_point(field_add:stock_api.CybosBidAskTickData.ask_remains)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CybosBidAskTickData::_internal_ask_remains() const {
  return ask_remains_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CybosBidAskTickData::ask_remains() const {
  // @@protoc_insertion_point(field_list:stock_api.CybosBidAskTickData.ask_remains)
  return _internal_ask_remains();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CybosBidAskTickData::_internal_mutable_ask_remains() {
  return &ask_remains_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CybosBidAskTickData::mutable_ask_remains() {
  // @@protoc_insertion_point(field_mutable_list:stock_api.CybosBidAskTickData.ask_remains)
  return _internal_mutable_ask_remains();
}

// repeated uint32 bid_remains = 8;
inline int CybosBidAskTickData::_internal_bid_remains_size() const {
  return bid_remains_.size();
}
inline int CybosBidAskTickData::bid_remains_size() const {
  return _internal_bid_remains_size();
}
inline void CybosBidAskTickData::clear_bid_remains() {
  bid_remains_.Clear();
}
inline uint32_t CybosBidAskTickData::_internal_bid_remains(int index) const {
  return bid_remains_.Get(index);
}
inline uint32_t CybosBidAskTickData::bid_remains(int index) const {
  // @@protoc_insertion_point(field_get:stock_api.CybosBidAskTickData.bid_remains)
  return _internal_bid_remains(index);
}
inline void CybosBidAskTickData::set_bid_remains(int index, uint32_t value) {
  bid_remains_.Set(index, value);
  // @@protoc_insertion_point(field_set:stock_api.CybosBidAskTickData.bid_remains)
}
inline void CybosBidAskTickData::_internal_add_bid_remains(uint32_t value) {
  bid_remains_.Add(value);
}
inline void CybosBidAskTickData::add_bid_remains(uint32_t value) {
  _internal_add_bid_remains(value);
  // @@protoc_insertion_point(field_add:stock_api.CybosBidAskTickData.bid_remains)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CybosBidAskTickData::_internal_bid_remains() const {
  return bid_remains_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CybosBidAskTickData::bid_remains() const {
  // @@protoc_insertion_point(field_list:stock_api.CybosBidAskTickData.bid_remains)
  return _internal_bid_remains();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CybosBidAskTickData::_internal_mutable_bid_remains() {
  return &bid_remains_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CybosBidAskTickData::mutable_bid_remains() {
  // @@protoc_insertion_point(field_mutable_list:stock_api.CybosBidAskTickData.bid_remains)
  return _internal_mutable_bid_remains();
}

// uint64 total_ask_remain = 9;
inline void CybosBidAskTickData::clear_total_ask_remain() {
  total_ask_remain_ = uint64_t{0u};
}
inline uint64_t CybosBidAskTickData::_internal_total_ask_remain() const {
  return total_ask_remain_;
}
inline uint64_t CybosBidAskTickData::total_ask_remain() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosBidAskTickData.total_ask_remain)
  return _internal_total_ask_remain();
}
inline void CybosBidAskTickData::_internal_set_total_ask_remain(uint64_t value) {
  
  total_ask_remain_ = value;
}
inline void CybosBidAskTickData::set_total_ask_remain(uint64_t value) {
  _internal_set_total_ask_remain(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosBidAskTickData.total_ask_remain)
}

// uint64 total_bid_remain = 10;
inline void CybosBidAskTickData::clear_total_bid_remain() {
  total_bid_remain_ = uint64_t{0u};
}
inline uint64_t CybosBidAskTickData::_internal_total_bid_remain() const {
  return total_bid_remain_;
}
inline uint64_t CybosBidAskTickData::total_bid_remain() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosBidAskTickData.total_bid_remain)
  return _internal_total_bid_remain();
}
inline void CybosBidAskTickData::_internal_set_total_bid_remain(uint64_t value) {
  
  total_bid_remain_ = value;
}
inline void CybosBidAskTickData::set_total_bid_remain(uint64_t value) {
  _internal_set_total_bid_remain(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosBidAskTickData.total_bid_remain)
}

// int64 out_time_total_ask_remain = 11;
inline void CybosBidAskTickData::clear_out_time_total_ask_remain() {
  out_time_total_ask_remain_ = int64_t{0};
}
inline int64_t CybosBidAskTickData::_internal_out_time_total_ask_remain() const {
  return out_time_total_ask_remain_;
}
inline int64_t CybosBidAskTickData::out_time_total_ask_remain() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosBidAskTickData.out_time_total_ask_remain)
  return _internal_out_time_total_ask_remain();
}
inline void CybosBidAskTickData::_internal_set_out_time_total_ask_remain(int64_t value) {
  
  out_time_total_ask_remain_ = value;
}
inline void CybosBidAskTickData::set_out_time_total_ask_remain(int64_t value) {
  _internal_set_out_time_total_ask_remain(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosBidAskTickData.out_time_total_ask_remain)
}

// int64 out_time_total_bid_remain = 12;
inline void CybosBidAskTickData::clear_out_time_total_bid_remain() {
  out_time_total_bid_remain_ = int64_t{0};
}
inline int64_t CybosBidAskTickData::_internal_out_time_total_bid_remain() const {
  return out_time_total_bid_remain_;
}
inline int64_t CybosBidAskTickData::out_time_total_bid_remain() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosBidAskTickData.out_time_total_bid_remain)
  return _internal_out_time_total_bid_remain();
}
inline void CybosBidAskTickData::_internal_set_out_time_total_bid_remain(int64_t value) {
  
  out_time_total_bid_remain_ = value;
}
inline void CybosBidAskTickData::set_out_time_total_bid_remain(int64_t value) {
  _internal_set_out_time_total_bid_remain(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosBidAskTickData.out_time_total_bid_remain)
}

// -------------------------------------------------------------------

// CybosStockAlarm

// .google.protobuf.Timestamp tick_date = 1;
inline bool CybosStockAlarm::_internal_has_tick_date() const {
  return this != internal_default_instance() && tick_date_ != nullptr;
}
inline bool CybosStockAlarm::has_tick_date() const {
  return _internal_has_tick_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CybosStockAlarm::_internal_tick_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = tick_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CybosStockAlarm::tick_date() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosStockAlarm.tick_date)
  return _internal_tick_date();
}
inline void CybosStockAlarm::unsafe_arena_set_allocated_tick_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* tick_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tick_date_);
  }
  tick_date_ = tick_date;
  if (tick_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_api.CybosStockAlarm.tick_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CybosStockAlarm::release_tick_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = tick_date_;
  tick_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CybosStockAlarm::unsafe_arena_release_tick_date() {
  // @@protoc_insertion_point(field_release:stock_api.CybosStockAlarm.tick_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = tick_date_;
  tick_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CybosStockAlarm::_internal_mutable_tick_date() {
  
  if (tick_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    tick_date_ = p;
  }
  return tick_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CybosStockAlarm::mutable_tick_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_tick_date();
  // @@protoc_insertion_point(field_mutable:stock_api.CybosStockAlarm.tick_date)
  return _msg;
}
inline void CybosStockAlarm::set_allocated_tick_date(::PROTOBUF_NAMESPACE_ID::Timestamp* tick_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tick_date_);
  }
  if (tick_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tick_date));
    if (message_arena != submessage_arena) {
      tick_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tick_date, submessage_arena);
    }
    
  } else {
    
  }
  tick_date_ = tick_date;
  // @@protoc_insertion_point(field_set_allocated:stock_api.CybosStockAlarm.tick_date)
}

// uint32 time = 2;
inline void CybosStockAlarm::clear_time() {
  time_ = 0u;
}
inline uint32_t CybosStockAlarm::_internal_time() const {
  return time_;
}
inline uint32_t CybosStockAlarm::time() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosStockAlarm.time)
  return _internal_time();
}
inline void CybosStockAlarm::_internal_set_time(uint32_t value) {
  
  time_ = value;
}
inline void CybosStockAlarm::set_time(uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosStockAlarm.time)
}

// int32 type_category = 3;
inline void CybosStockAlarm::clear_type_category() {
  type_category_ = 0;
}
inline int32_t CybosStockAlarm::_internal_type_category() const {
  return type_category_;
}
inline int32_t CybosStockAlarm::type_category() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosStockAlarm.type_category)
  return _internal_type_category();
}
inline void CybosStockAlarm::_internal_set_type_category(int32_t value) {
  
  type_category_ = value;
}
inline void CybosStockAlarm::set_type_category(int32_t value) {
  _internal_set_type_category(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosStockAlarm.type_category)
}

// int32 market_category = 4;
inline void CybosStockAlarm::clear_market_category() {
  market_category_ = 0;
}
inline int32_t CybosStockAlarm::_internal_market_category() const {
  return market_category_;
}
inline int32_t CybosStockAlarm::market_category() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosStockAlarm.market_category)
  return _internal_market_category();
}
inline void CybosStockAlarm::_internal_set_market_category(int32_t value) {
  
  market_category_ = value;
}
inline void CybosStockAlarm::set_market_category(int32_t value) {
  _internal_set_market_category(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosStockAlarm.market_category)
}

// string code = 5;
inline void CybosStockAlarm::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& CybosStockAlarm::code() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosStockAlarm.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CybosStockAlarm::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stock_api.CybosStockAlarm.code)
}
inline std::string* CybosStockAlarm::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:stock_api.CybosStockAlarm.code)
  return _s;
}
inline const std::string& CybosStockAlarm::_internal_code() const {
  return code_.Get();
}
inline void CybosStockAlarm::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CybosStockAlarm::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CybosStockAlarm::release_code() {
  // @@protoc_insertion_point(field_release:stock_api.CybosStockAlarm.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CybosStockAlarm::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stock_api.CybosStockAlarm.code)
}

// int32 alarm_category = 6;
inline void CybosStockAlarm::clear_alarm_category() {
  alarm_category_ = 0;
}
inline int32_t CybosStockAlarm::_internal_alarm_category() const {
  return alarm_category_;
}
inline int32_t CybosStockAlarm::alarm_category() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosStockAlarm.alarm_category)
  return _internal_alarm_category();
}
inline void CybosStockAlarm::_internal_set_alarm_category(int32_t value) {
  
  alarm_category_ = value;
}
inline void CybosStockAlarm::set_alarm_category(int32_t value) {
  _internal_set_alarm_category(value);
  // @@protoc_insertion_point(field_set:stock_api.CybosStockAlarm.alarm_category)
}

// string title = 7;
inline void CybosStockAlarm::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& CybosStockAlarm::title() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosStockAlarm.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CybosStockAlarm::set_title(ArgT0&& arg0, ArgT... args) {
 
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stock_api.CybosStockAlarm.title)
}
inline std::string* CybosStockAlarm::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:stock_api.CybosStockAlarm.title)
  return _s;
}
inline const std::string& CybosStockAlarm::_internal_title() const {
  return title_.Get();
}
inline void CybosStockAlarm::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CybosStockAlarm::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CybosStockAlarm::release_title() {
  // @@protoc_insertion_point(field_release:stock_api.CybosStockAlarm.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CybosStockAlarm::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stock_api.CybosStockAlarm.title)
}

// string content = 8;
inline void CybosStockAlarm::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& CybosStockAlarm::content() const {
  // @@protoc_insertion_point(field_get:stock_api.CybosStockAlarm.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CybosStockAlarm::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stock_api.CybosStockAlarm.content)
}
inline std::string* CybosStockAlarm::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:stock_api.CybosStockAlarm.content)
  return _s;
}
inline const std::string& CybosStockAlarm::_internal_content() const {
  return content_.Get();
}
inline void CybosStockAlarm::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CybosStockAlarm::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CybosStockAlarm::release_content() {
  // @@protoc_insertion_point(field_release:stock_api.CybosStockAlarm.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CybosStockAlarm::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stock_api.CybosStockAlarm.content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace stock_api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::stock_api::SimulationMsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::stock_api::SimulationMsgType>() {
  return ::stock_api::SimulationMsgType_descriptor();
}
template <> struct is_proto_enum< ::stock_api::TodayTopSelection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::stock_api::TodayTopSelection>() {
  return ::stock_api::TodayTopSelection_descriptor();
}
template <> struct is_proto_enum< ::stock_api::OrderStatusFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::stock_api::OrderStatusFlag>() {
  return ::stock_api::OrderStatusFlag_descriptor();
}
template <> struct is_proto_enum< ::stock_api::OrderMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::stock_api::OrderMethod>() {
  return ::stock_api::OrderMethod_descriptor();
}
template <> struct is_proto_enum< ::stock_api::OrderType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::stock_api::OrderType>() {
  return ::stock_api::OrderType_descriptor();
}
template <> struct is_proto_enum< ::stock_api::TradeMsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::stock_api::TradeMsgType>() {
  return ::stock_api::TradeMsgType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_stock_5fprovider_2eproto
