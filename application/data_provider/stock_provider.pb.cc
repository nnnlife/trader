// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stock_provider.proto

#include "stock_provider.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace stock_api {
constexpr StockCodeQuery::StockCodeQuery(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct StockCodeQueryDefaultTypeInternal {
  constexpr StockCodeQueryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StockCodeQueryDefaultTypeInternal() {}
  union {
    StockCodeQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StockCodeQueryDefaultTypeInternal _StockCodeQuery_default_instance_;
constexpr CodeList::CodeList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : codelist_(){}
struct CodeListDefaultTypeInternal {
  constexpr CodeListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CodeListDefaultTypeInternal() {}
  union {
    CodeList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CodeListDefaultTypeInternal _CodeList_default_instance_;
constexpr ViPriceInfo::ViPriceInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : price_()
  , _price_cached_byte_size_(0)
  , code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ViPriceInfoDefaultTypeInternal {
  constexpr ViPriceInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ViPriceInfoDefaultTypeInternal() {}
  union {
    ViPriceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ViPriceInfoDefaultTypeInternal _ViPriceInfo_default_instance_;
constexpr Prices::Prices(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : price_()
  , _price_cached_byte_size_(0){}
struct PricesDefaultTypeInternal {
  constexpr PricesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PricesDefaultTypeInternal() {}
  union {
    Prices _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PricesDefaultTypeInternal _Prices_default_instance_;
constexpr Bool::Bool(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ret_(false){}
struct BoolDefaultTypeInternal {
  constexpr BoolDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoolDefaultTypeInternal() {}
  union {
    Bool _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoolDefaultTypeInternal _Bool_default_instance_;
constexpr BrokerLog_BuyBrokerEntry_DoNotUse::BrokerLog_BuyBrokerEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct BrokerLog_BuyBrokerEntry_DoNotUseDefaultTypeInternal {
  constexpr BrokerLog_BuyBrokerEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BrokerLog_BuyBrokerEntry_DoNotUseDefaultTypeInternal() {}
  union {
    BrokerLog_BuyBrokerEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BrokerLog_BuyBrokerEntry_DoNotUseDefaultTypeInternal _BrokerLog_BuyBrokerEntry_DoNotUse_default_instance_;
constexpr BrokerLog_SellBrokerEntry_DoNotUse::BrokerLog_SellBrokerEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct BrokerLog_SellBrokerEntry_DoNotUseDefaultTypeInternal {
  constexpr BrokerLog_SellBrokerEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BrokerLog_SellBrokerEntry_DoNotUseDefaultTypeInternal() {}
  union {
    BrokerLog_SellBrokerEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BrokerLog_SellBrokerEntry_DoNotUseDefaultTypeInternal _BrokerLog_SellBrokerEntry_DoNotUse_default_instance_;
constexpr BrokerLog::BrokerLog(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buy_broker_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , sell_broker_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , from_price_(0)
  , until_price_(0)
  , buy_volume_(int64_t{0})
  , sell_volume_(int64_t{0})
  , buy_volume_domestic_(int64_t{0})
  , buy_volume_foreign_(int64_t{0})
  , sell_volume_domestic_(int64_t{0})
  , sell_volume_foreign_(int64_t{0}){}
struct BrokerLogDefaultTypeInternal {
  constexpr BrokerLogDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BrokerLogDefaultTypeInternal() {}
  union {
    BrokerLog _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BrokerLogDefaultTypeInternal _BrokerLog_default_instance_;
constexpr BrokerSummary::BrokerSummary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broker_log_()
  , code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , foreigner_total_(int64_t{0})
  , max_volume_(int64_t{0}){}
struct BrokerSummaryDefaultTypeInternal {
  constexpr BrokerSummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BrokerSummaryDefaultTypeInternal() {}
  union {
    BrokerSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BrokerSummaryDefaultTypeInternal _BrokerSummary_default_instance_;
constexpr BrokerStat::BrokerStat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buy_volume_(int64_t{0})
  , sell_volume_(int64_t{0}){}
struct BrokerStatDefaultTypeInternal {
  constexpr BrokerStatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BrokerStatDefaultTypeInternal() {}
  union {
    BrokerStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BrokerStatDefaultTypeInternal _BrokerStat_default_instance_;
constexpr BrokerMinuteTickList::BrokerMinuteTickList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : minute_tick_()
  , code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BrokerMinuteTickListDefaultTypeInternal {
  constexpr BrokerMinuteTickListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BrokerMinuteTickListDefaultTypeInternal() {}
  union {
    BrokerMinuteTickList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BrokerMinuteTickListDefaultTypeInternal _BrokerMinuteTickList_default_instance_;
constexpr BrokerMinuteTick_BrokersMapEntry_DoNotUse::BrokerMinuteTick_BrokersMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct BrokerMinuteTick_BrokersMapEntry_DoNotUseDefaultTypeInternal {
  constexpr BrokerMinuteTick_BrokersMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BrokerMinuteTick_BrokersMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    BrokerMinuteTick_BrokersMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BrokerMinuteTick_BrokersMapEntry_DoNotUseDefaultTypeInternal _BrokerMinuteTick_BrokersMapEntry_DoNotUse_default_instance_;
constexpr BrokerMinuteTick::BrokerMinuteTick(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : brokers_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_datetime_(nullptr)
  , until_datetime_(nullptr){}
struct BrokerMinuteTickDefaultTypeInternal {
  constexpr BrokerMinuteTickDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BrokerMinuteTickDefaultTypeInternal() {}
  union {
    BrokerMinuteTick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BrokerMinuteTickDefaultTypeInternal _BrokerMinuteTick_default_instance_;
constexpr YearHighInfo::YearHighInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : high_date_(nullptr)
  , price_(0)
  , days_distance_(0){}
struct YearHighInfoDefaultTypeInternal {
  constexpr YearHighInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~YearHighInfoDefaultTypeInternal() {}
  union {
    YearHighInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT YearHighInfoDefaultTypeInternal _YearHighInfo_default_instance_;
constexpr SimulationMsg::SimulationMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tick_(nullptr)
  , bidask_(nullptr)
  , subject_(nullptr)
  , alarm_(nullptr)
  , msgtype_(0)
{}
struct SimulationMsgDefaultTypeInternal {
  constexpr SimulationMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimulationMsgDefaultTypeInternal() {}
  union {
    SimulationMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimulationMsgDefaultTypeInternal _SimulationMsg_default_instance_;
constexpr TodayTopOption::TodayTopOption(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : selection_(0)
{}
struct TodayTopOptionDefaultTypeInternal {
  constexpr TodayTopOptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TodayTopOptionDefaultTypeInternal() {}
  union {
    TodayTopOption _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TodayTopOptionDefaultTypeInternal _TodayTopOption_default_instance_;
constexpr Balance::Balance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : balance_(0){}
struct BalanceDefaultTypeInternal {
  constexpr BalanceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BalanceDefaultTypeInternal() {}
  union {
    Balance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BalanceDefaultTypeInternal _Balance_default_instance_;
constexpr StockQuery::StockQuery(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_datetime_(nullptr)
  , until_datetime_(nullptr){}
struct StockQueryDefaultTypeInternal {
  constexpr StockQueryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StockQueryDefaultTypeInternal() {}
  union {
    StockQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StockQueryDefaultTypeInternal _StockQuery_default_instance_;
constexpr TopList::TopList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : codelist_()
  , is_today_data_(false)
  , date_(0u){}
struct TopListDefaultTypeInternal {
  constexpr TopListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TopListDefaultTypeInternal() {}
  union {
    TopList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TopListDefaultTypeInternal _TopList_default_instance_;
constexpr SimulationOperation::SimulationOperation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_datetime_(nullptr)
  , is_on_(false)
  , speed_(0){}
struct SimulationOperationDefaultTypeInternal {
  constexpr SimulationOperationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimulationOperationDefaultTypeInternal() {}
  union {
    SimulationOperation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimulationOperationDefaultTypeInternal _SimulationOperation_default_instance_;
constexpr SimulationStatus::SimulationStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : simulation_on_(false)
  , simulation_speed_(0){}
struct SimulationStatusDefaultTypeInternal {
  constexpr SimulationStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimulationStatusDefaultTypeInternal() {}
  union {
    SimulationStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimulationStatusDefaultTypeInternal _SimulationStatus_default_instance_;
constexpr OrderMsg::OrderMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , order_num_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_buy_(false)
  , price_(0)
  , quantity_(0)
  , percentage_(0)
  , method_(0)

  , order_type_(0)
{}
struct OrderMsgDefaultTypeInternal {
  constexpr OrderMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OrderMsgDefaultTypeInternal() {}
  union {
    OrderMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OrderMsgDefaultTypeInternal _OrderMsg_default_instance_;
constexpr TradeMsg::TradeMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : order_msg_(nullptr)
  , msg_type_(0){}
struct TradeMsgDefaultTypeInternal {
  constexpr TradeMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TradeMsgDefaultTypeInternal() {}
  union {
    TradeMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TradeMsgDefaultTypeInternal _TradeMsg_default_instance_;
constexpr CybosOrderReturn::CybosOrderReturn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)
  , order_num_(0){}
struct CybosOrderReturnDefaultTypeInternal {
  constexpr CybosOrderReturnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CybosOrderReturnDefaultTypeInternal() {}
  union {
    CybosOrderReturn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CybosOrderReturnDefaultTypeInternal _CybosOrderReturn_default_instance_;
constexpr Report::Report(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , company_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , internal_order_num_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , order_num_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_update_datetime_(nullptr)
  , is_buy_(false)
  , flag_(0)

  , method_(0)

  , hold_price_(0)
  , price_(0)
  , quantity_(0)
  , traded_quantity_(0)
  , traded_price_(0){}
struct ReportDefaultTypeInternal {
  constexpr ReportDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReportDefaultTypeInternal() {}
  union {
    Report _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReportDefaultTypeInternal _Report_default_instance_;
constexpr OrderResult::OrderResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : report_()
  , current_balance_(0){}
struct OrderResultDefaultTypeInternal {
  constexpr OrderResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OrderResultDefaultTypeInternal() {}
  union {
    OrderResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OrderResultDefaultTypeInternal _OrderResult_default_instance_;
constexpr CybosOrderResult::CybosOrderResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , order_number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , flag_(0)

  , quantity_(0)
  , price_(0)
  , is_buy_(false)
  , total_quantity_(0){}
struct CybosOrderResultDefaultTypeInternal {
  constexpr CybosOrderResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CybosOrderResultDefaultTypeInternal() {}
  union {
    CybosOrderResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CybosOrderResultDefaultTypeInternal _CybosOrderResult_default_instance_;
constexpr ListType::ListType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListTypeDefaultTypeInternal {
  constexpr ListTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListTypeDefaultTypeInternal() {}
  union {
    ListType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListTypeDefaultTypeInternal _ListType_default_instance_;
constexpr CompanyName::CompanyName(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : company_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CompanyNameDefaultTypeInternal {
  constexpr CompanyNameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompanyNameDefaultTypeInternal() {}
  union {
    CompanyName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompanyNameDefaultTypeInternal _CompanyName_default_instance_;
constexpr PastMinuteQuery::PastMinuteQuery(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , today_(nullptr)
  , count_of_days_(0u){}
struct PastMinuteQueryDefaultTypeInternal {
  constexpr PastMinuteQueryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PastMinuteQueryDefaultTypeInternal() {}
  union {
    PastMinuteQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PastMinuteQueryDefaultTypeInternal _PastMinuteQuery_default_instance_;
constexpr CybosDayData::CybosDayData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : date_(0u)
  , time_(0u)
  , start_price_(0u)
  , highest_price_(0u)
  , lowest_price_(0u)
  , close_price_(0u)
  , volume_(int64_t{0})
  , amount_(uint64_t{0u})
  , cum_sell_volume_(uint64_t{0u})
  , cum_buy_volume_(uint64_t{0u})
  , foreigner_hold_volume_(int64_t{0})
  , institution_buy_volume_(int64_t{0})
  , foreigner_hold_rate_(0)
  , is_synchronized_bidding_(false)
  , institution_cum_buy_volume_(int64_t{0}){}
struct CybosDayDataDefaultTypeInternal {
  constexpr CybosDayDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CybosDayDataDefaultTypeInternal() {}
  union {
    CybosDayData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CybosDayDataDefaultTypeInternal _CybosDayData_default_instance_;
constexpr CybosDayDatas::CybosDayDatas(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : day_data_(){}
struct CybosDayDatasDefaultTypeInternal {
  constexpr CybosDayDatasDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CybosDayDatasDefaultTypeInternal() {}
  union {
    CybosDayDatas _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CybosDayDatasDefaultTypeInternal _CybosDayDatas_default_instance_;
constexpr CybosSubjectTickData::CybosSubjectTickData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , company_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tick_date_(nullptr)
  , time_(0u)
  , buy_or_sell_(false)
  , volume_(uint64_t{0u})
  , total_volume_(int64_t{0})
  , foreigner_total_volume_(int64_t{0}){}
struct CybosSubjectTickDataDefaultTypeInternal {
  constexpr CybosSubjectTickDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CybosSubjectTickDataDefaultTypeInternal() {}
  union {
    CybosSubjectTickData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CybosSubjectTickDataDefaultTypeInternal _CybosSubjectTickData_default_instance_;
constexpr CybosTickDatas::CybosTickDatas(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tick_data_(){}
struct CybosTickDatasDefaultTypeInternal {
  constexpr CybosTickDatasDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CybosTickDatasDefaultTypeInternal() {}
  union {
    CybosTickDatas _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CybosTickDatasDefaultTypeInternal _CybosTickDatas_default_instance_;
constexpr CybosTickData::CybosTickData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , company_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tick_date_(nullptr)
  , yesterday_diff_(0)
  , time_(0u)
  , start_price_(0u)
  , highest_price_(0u)
  , lowest_price_(0u)
  , ask_price_(0u)
  , cum_volume_(uint64_t{0u})
  , bid_price_(0u)
  , current_price_(0u)
  , cum_amount_(uint64_t{0u})
  , cum_sell_volume_by_price_(uint64_t{0u})
  , cum_buy_volume_by_price_(uint64_t{0u})
  , volume_(int64_t{0})
  , time_with_sec_(0u)
  , market_type_exp_(0u)
  , buy_or_sell_(false)
  , is_kospi_(false)
  , market_type_(0u)
  , out_time_volume_(uint64_t{0u})
  , cum_sell_volume_(uint64_t{0u})
  , cum_buy_volume_(uint64_t{0u})
  , amount_ratio_(0){}
struct CybosTickDataDefaultTypeInternal {
  constexpr CybosTickDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CybosTickDataDefaultTypeInternal() {}
  union {
    CybosTickData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CybosTickDataDefaultTypeInternal _CybosTickData_default_instance_;
constexpr CybosBidAskTickData::CybosBidAskTickData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ask_prices_()
  , _ask_prices_cached_byte_size_(0)
  , bid_prices_()
  , _bid_prices_cached_byte_size_(0)
  , ask_remains_()
  , _ask_remains_cached_byte_size_(0)
  , bid_remains_()
  , _bid_remains_cached_byte_size_(0)
  , code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tick_date_(nullptr)
  , volume_(uint64_t{0u})
  , total_ask_remain_(uint64_t{0u})
  , total_bid_remain_(uint64_t{0u})
  , out_time_total_ask_remain_(int64_t{0})
  , out_time_total_bid_remain_(int64_t{0})
  , time_(0u){}
struct CybosBidAskTickDataDefaultTypeInternal {
  constexpr CybosBidAskTickDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CybosBidAskTickDataDefaultTypeInternal() {}
  union {
    CybosBidAskTickData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CybosBidAskTickDataDefaultTypeInternal _CybosBidAskTickData_default_instance_;
constexpr CybosStockAlarm::CybosStockAlarm(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tick_date_(nullptr)
  , time_(0u)
  , type_category_(0)
  , market_category_(0)
  , alarm_category_(0){}
struct CybosStockAlarmDefaultTypeInternal {
  constexpr CybosStockAlarmDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CybosStockAlarmDefaultTypeInternal() {}
  union {
    CybosStockAlarm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CybosStockAlarmDefaultTypeInternal _CybosStockAlarm_default_instance_;
}  // namespace stock_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_stock_5fprovider_2eproto[37];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_stock_5fprovider_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_stock_5fprovider_2eproto = nullptr;

const uint32_t TableStruct_stock_5fprovider_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::StockCodeQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::StockCodeQuery, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::CodeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::CodeList, codelist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::ViPriceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::ViPriceInfo, code_),
  PROTOBUF_FIELD_OFFSET(::stock_api::ViPriceInfo, price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::Prices, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::Prices, price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::Bool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::Bool, ret_),
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerLog_BuyBrokerEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerLog_BuyBrokerEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerLog_BuyBrokerEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerLog_BuyBrokerEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerLog_SellBrokerEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerLog_SellBrokerEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerLog_SellBrokerEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerLog_SellBrokerEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerLog, from_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerLog, until_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerLog, buy_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerLog, sell_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerLog, buy_volume_domestic_),
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerLog, buy_volume_foreign_),
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerLog, sell_volume_domestic_),
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerLog, sell_volume_foreign_),
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerLog, buy_broker_),
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerLog, sell_broker_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerSummary, code_),
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerSummary, foreigner_total_),
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerSummary, broker_log_),
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerSummary, max_volume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerStat, buy_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerStat, sell_volume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerMinuteTickList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerMinuteTickList, code_),
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerMinuteTickList, minute_tick_),
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerMinuteTick_BrokersMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerMinuteTick_BrokersMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerMinuteTick_BrokersMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerMinuteTick_BrokersMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerMinuteTick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerMinuteTick, code_),
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerMinuteTick, from_datetime_),
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerMinuteTick, until_datetime_),
  PROTOBUF_FIELD_OFFSET(::stock_api::BrokerMinuteTick, brokers_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::YearHighInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::YearHighInfo, price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::YearHighInfo, high_date_),
  PROTOBUF_FIELD_OFFSET(::stock_api::YearHighInfo, days_distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::SimulationMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::SimulationMsg, msgtype_),
  PROTOBUF_FIELD_OFFSET(::stock_api::SimulationMsg, tick_),
  PROTOBUF_FIELD_OFFSET(::stock_api::SimulationMsg, bidask_),
  PROTOBUF_FIELD_OFFSET(::stock_api::SimulationMsg, subject_),
  PROTOBUF_FIELD_OFFSET(::stock_api::SimulationMsg, alarm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::TodayTopOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::TodayTopOption, selection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::Balance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::Balance, balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::StockQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::StockQuery, code_),
  PROTOBUF_FIELD_OFFSET(::stock_api::StockQuery, from_datetime_),
  PROTOBUF_FIELD_OFFSET(::stock_api::StockQuery, until_datetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::TopList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::TopList, codelist_),
  PROTOBUF_FIELD_OFFSET(::stock_api::TopList, is_today_data_),
  PROTOBUF_FIELD_OFFSET(::stock_api::TopList, date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::SimulationOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::SimulationOperation, is_on_),
  PROTOBUF_FIELD_OFFSET(::stock_api::SimulationOperation, start_datetime_),
  PROTOBUF_FIELD_OFFSET(::stock_api::SimulationOperation, speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::SimulationStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::SimulationStatus, simulation_on_),
  PROTOBUF_FIELD_OFFSET(::stock_api::SimulationStatus, simulation_speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::OrderMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::OrderMsg, code_),
  PROTOBUF_FIELD_OFFSET(::stock_api::OrderMsg, is_buy_),
  PROTOBUF_FIELD_OFFSET(::stock_api::OrderMsg, price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::OrderMsg, quantity_),
  PROTOBUF_FIELD_OFFSET(::stock_api::OrderMsg, percentage_),
  PROTOBUF_FIELD_OFFSET(::stock_api::OrderMsg, method_),
  PROTOBUF_FIELD_OFFSET(::stock_api::OrderMsg, order_num_),
  PROTOBUF_FIELD_OFFSET(::stock_api::OrderMsg, order_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::TradeMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::TradeMsg, msg_type_),
  PROTOBUF_FIELD_OFFSET(::stock_api::TradeMsg, order_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosOrderReturn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosOrderReturn, result_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosOrderReturn, msg_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosOrderReturn, order_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::Report, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::Report, code_),
  PROTOBUF_FIELD_OFFSET(::stock_api::Report, company_name_),
  PROTOBUF_FIELD_OFFSET(::stock_api::Report, is_buy_),
  PROTOBUF_FIELD_OFFSET(::stock_api::Report, last_update_datetime_),
  PROTOBUF_FIELD_OFFSET(::stock_api::Report, flag_),
  PROTOBUF_FIELD_OFFSET(::stock_api::Report, method_),
  PROTOBUF_FIELD_OFFSET(::stock_api::Report, hold_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::Report, price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::Report, quantity_),
  PROTOBUF_FIELD_OFFSET(::stock_api::Report, internal_order_num_),
  PROTOBUF_FIELD_OFFSET(::stock_api::Report, order_num_),
  PROTOBUF_FIELD_OFFSET(::stock_api::Report, traded_quantity_),
  PROTOBUF_FIELD_OFFSET(::stock_api::Report, traded_price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::OrderResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::OrderResult, report_),
  PROTOBUF_FIELD_OFFSET(::stock_api::OrderResult, current_balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosOrderResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosOrderResult, flag_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosOrderResult, code_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosOrderResult, order_number_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosOrderResult, quantity_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosOrderResult, price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosOrderResult, is_buy_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosOrderResult, total_quantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::ListType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::ListType, type_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::CompanyName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::CompanyName, company_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::PastMinuteQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::PastMinuteQuery, code_),
  PROTOBUF_FIELD_OFFSET(::stock_api::PastMinuteQuery, count_of_days_),
  PROTOBUF_FIELD_OFFSET(::stock_api::PastMinuteQuery, today_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, date_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, time_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, start_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, highest_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, lowest_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, close_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, amount_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, cum_sell_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, cum_buy_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, foreigner_hold_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, foreigner_hold_rate_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, institution_buy_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, institution_cum_buy_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayData, is_synchronized_bidding_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayDatas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosDayDatas, day_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, tick_date_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, time_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, name_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, code_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, company_name_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, buy_or_sell_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, total_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosSubjectTickData, foreigner_total_volume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickDatas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickDatas, tick_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, tick_date_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, code_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, company_name_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, yesterday_diff_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, time_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, start_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, highest_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, lowest_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, ask_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, bid_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, cum_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, cum_amount_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, current_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, buy_or_sell_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, cum_sell_volume_by_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, cum_buy_volume_by_price_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, time_with_sec_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, market_type_exp_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, market_type_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, out_time_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, cum_sell_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, cum_buy_volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, is_kospi_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosTickData, amount_ratio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, tick_date_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, code_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, time_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, volume_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, ask_prices_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, bid_prices_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, ask_remains_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, bid_remains_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, total_ask_remain_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, total_bid_remain_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, out_time_total_ask_remain_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosBidAskTickData, out_time_total_bid_remain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosStockAlarm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosStockAlarm, tick_date_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosStockAlarm, time_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosStockAlarm, type_category_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosStockAlarm, market_category_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosStockAlarm, code_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosStockAlarm, alarm_category_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosStockAlarm, title_),
  PROTOBUF_FIELD_OFFSET(::stock_api::CybosStockAlarm, content_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::stock_api::StockCodeQuery)},
  { 7, -1, -1, sizeof(::stock_api::CodeList)},
  { 14, -1, -1, sizeof(::stock_api::ViPriceInfo)},
  { 22, -1, -1, sizeof(::stock_api::Prices)},
  { 29, -1, -1, sizeof(::stock_api::Bool)},
  { 36, 44, -1, sizeof(::stock_api::BrokerLog_BuyBrokerEntry_DoNotUse)},
  { 46, 54, -1, sizeof(::stock_api::BrokerLog_SellBrokerEntry_DoNotUse)},
  { 56, -1, -1, sizeof(::stock_api::BrokerLog)},
  { 72, -1, -1, sizeof(::stock_api::BrokerSummary)},
  { 82, -1, -1, sizeof(::stock_api::BrokerStat)},
  { 90, -1, -1, sizeof(::stock_api::BrokerMinuteTickList)},
  { 98, 106, -1, sizeof(::stock_api::BrokerMinuteTick_BrokersMapEntry_DoNotUse)},
  { 108, -1, -1, sizeof(::stock_api::BrokerMinuteTick)},
  { 118, -1, -1, sizeof(::stock_api::YearHighInfo)},
  { 127, -1, -1, sizeof(::stock_api::SimulationMsg)},
  { 138, -1, -1, sizeof(::stock_api::TodayTopOption)},
  { 145, -1, -1, sizeof(::stock_api::Balance)},
  { 152, -1, -1, sizeof(::stock_api::StockQuery)},
  { 161, -1, -1, sizeof(::stock_api::TopList)},
  { 170, -1, -1, sizeof(::stock_api::SimulationOperation)},
  { 179, -1, -1, sizeof(::stock_api::SimulationStatus)},
  { 187, -1, -1, sizeof(::stock_api::OrderMsg)},
  { 201, -1, -1, sizeof(::stock_api::TradeMsg)},
  { 209, -1, -1, sizeof(::stock_api::CybosOrderReturn)},
  { 218, -1, -1, sizeof(::stock_api::Report)},
  { 237, -1, -1, sizeof(::stock_api::OrderResult)},
  { 245, -1, -1, sizeof(::stock_api::CybosOrderResult)},
  { 258, -1, -1, sizeof(::stock_api::ListType)},
  { 265, -1, -1, sizeof(::stock_api::CompanyName)},
  { 272, -1, -1, sizeof(::stock_api::PastMinuteQuery)},
  { 281, -1, -1, sizeof(::stock_api::CybosDayData)},
  { 302, -1, -1, sizeof(::stock_api::CybosDayDatas)},
  { 309, -1, -1, sizeof(::stock_api::CybosSubjectTickData)},
  { 324, -1, -1, sizeof(::stock_api::CybosTickDatas)},
  { 331, -1, -1, sizeof(::stock_api::CybosTickData)},
  { 362, -1, -1, sizeof(::stock_api::CybosBidAskTickData)},
  { 380, -1, -1, sizeof(::stock_api::CybosStockAlarm)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_StockCodeQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_CodeList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_ViPriceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_Prices_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_Bool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_BrokerLog_BuyBrokerEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_BrokerLog_SellBrokerEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_BrokerLog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_BrokerSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_BrokerStat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_BrokerMinuteTickList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_BrokerMinuteTick_BrokersMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_BrokerMinuteTick_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_YearHighInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_SimulationMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_TodayTopOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_Balance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_StockQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_TopList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_SimulationOperation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_SimulationStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_OrderMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_TradeMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_CybosOrderReturn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_Report_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_OrderResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_CybosOrderResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_ListType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_CompanyName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_PastMinuteQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_CybosDayData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_CybosDayDatas_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_CybosSubjectTickData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_CybosTickDatas_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_CybosTickData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_CybosBidAskTickData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stock_api::_CybosStockAlarm_default_instance_),
};

const char descriptor_table_protodef_stock_5fprovider_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024stock_provider.proto\022\tstock_api\032\037googl"
  "e/protobuf/timestamp.proto\032\033google/proto"
  "buf/empty.proto\"\036\n\016StockCodeQuery\022\014\n\004cod"
  "e\030\001 \001(\t\"\034\n\010CodeList\022\020\n\010codelist\030\001 \003(\t\"*\n"
  "\013ViPriceInfo\022\014\n\004code\030\001 \001(\t\022\r\n\005price\030\002 \003("
  "\005\"\027\n\006Prices\022\r\n\005price\030\001 \003(\005\"\023\n\004Bool\022\013\n\003re"
  "t\030\001 \001(\010\"\252\003\n\tBrokerLog\022\022\n\nfrom_price\030\001 \001("
  "\002\022\023\n\013until_price\030\002 \001(\002\022\022\n\nbuy_volume\030\003 \001"
  "(\003\022\023\n\013sell_volume\030\004 \001(\003\022\033\n\023buy_volume_do"
  "mestic\030\005 \001(\003\022\032\n\022buy_volume_foreign\030\006 \001(\003"
  "\022\034\n\024sell_volume_domestic\030\007 \001(\003\022\033\n\023sell_v"
  "olume_foreign\030\010 \001(\003\0227\n\nbuy_broker\030\t \003(\0132"
  "#.stock_api.BrokerLog.BuyBrokerEntry\0229\n\013"
  "sell_broker\030\n \003(\0132$.stock_api.BrokerLog."
  "SellBrokerEntry\0320\n\016BuyBrokerEntry\022\013\n\003key"
  "\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\0321\n\017SellBrokerE"
  "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\"t\n\r"
  "BrokerSummary\022\014\n\004code\030\001 \001(\t\022\027\n\017foreigner"
  "_total\030\002 \001(\003\022(\n\nbroker_log\030\003 \003(\0132\024.stock"
  "_api.BrokerLog\022\022\n\nmax_volume\030\004 \001(\003\"5\n\nBr"
  "okerStat\022\022\n\nbuy_volume\030\001 \001(\003\022\023\n\013sell_vol"
  "ume\030\002 \001(\003\"V\n\024BrokerMinuteTickList\022\014\n\004cod"
  "e\030\001 \001(\t\0220\n\013minute_tick\030\002 \003(\0132\033.stock_api"
  ".BrokerMinuteTick\"\223\002\n\020BrokerMinuteTick\022\014"
  "\n\004code\030\001 \001(\t\0221\n\rfrom_datetime\030\002 \001(\0132\032.go"
  "ogle.protobuf.Timestamp\0222\n\016until_datetim"
  "e\030\003 \001(\0132\032.google.protobuf.Timestamp\022@\n\013b"
  "rokers_map\030\004 \003(\0132+.stock_api.BrokerMinut"
  "eTick.BrokersMapEntry\032H\n\017BrokersMapEntry"
  "\022\013\n\003key\030\001 \001(\t\022$\n\005value\030\002 \001(\0132\025.stock_api"
  ".BrokerStat:\0028\001\"c\n\014YearHighInfo\022\r\n\005price"
  "\030\001 \001(\005\022-\n\thigh_date\030\002 \001(\0132\032.google.proto"
  "buf.Timestamp\022\025\n\rdays_distance\030\003 \001(\005\"\363\001\n"
  "\rSimulationMsg\022-\n\007msgtype\030\001 \001(\0162\034.stock_"
  "api.SimulationMsgType\022&\n\004tick\030\002 \001(\0132\030.st"
  "ock_api.CybosTickData\022.\n\006bidask\030\003 \001(\0132\036."
  "stock_api.CybosBidAskTickData\0220\n\007subject"
  "\030\004 \001(\0132\037.stock_api.CybosSubjectTickData\022"
  ")\n\005alarm\030\005 \001(\0132\032.stock_api.CybosStockAla"
  "rm\"A\n\016TodayTopOption\022/\n\tselection\030\001 \001(\0162"
  "\034.stock_api.TodayTopSelection\"\032\n\007Balance"
  "\022\017\n\007balance\030\001 \001(\005\"\201\001\n\nStockQuery\022\014\n\004code"
  "\030\001 \001(\t\0221\n\rfrom_datetime\030\002 \001(\0132\032.google.p"
  "rotobuf.Timestamp\0222\n\016until_datetime\030\003 \001("
  "\0132\032.google.protobuf.Timestamp\"@\n\007TopList"
  "\022\020\n\010codelist\030\001 \003(\t\022\025\n\ris_today_data\030\002 \001("
  "\010\022\014\n\004date\030\003 \001(\r\"g\n\023SimulationOperation\022\r"
  "\n\005is_on\030\001 \001(\010\0222\n\016start_datetime\030\002 \001(\0132\032."
  "google.protobuf.Timestamp\022\r\n\005speed\030\003 \001(\002"
  "\"C\n\020SimulationStatus\022\025\n\rsimulation_on\030\001 "
  "\001(\010\022\030\n\020simulation_speed\030\002 \001(\002\"\302\001\n\010OrderM"
  "sg\022\014\n\004code\030\001 \001(\t\022\016\n\006is_buy\030\002 \001(\010\022\r\n\005pric"
  "e\030\003 \001(\005\022\020\n\010quantity\030\004 \001(\005\022\022\n\npercentage\030"
  "\005 \001(\005\022&\n\006method\030\006 \001(\0162\026.stock_api.OrderM"
  "ethod\022\021\n\torder_num\030\007 \001(\t\022(\n\norder_type\030\010"
  " \001(\0162\024.stock_api.OrderType\"D\n\010TradeMsg\022\020"
  "\n\010msg_type\030\001 \001(\005\022&\n\torder_msg\030\002 \001(\0132\023.st"
  "ock_api.OrderMsg\"B\n\020CybosOrderReturn\022\016\n\006"
  "result\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\022\021\n\torder_num\030\003"
  " \001(\005\"\333\002\n\006Report\022\014\n\004code\030\001 \001(\t\022\024\n\014company"
  "_name\030\002 \001(\t\022\016\n\006is_buy\030\003 \001(\010\0228\n\024last_upda"
  "te_datetime\030\004 \001(\0132\032.google.protobuf.Time"
  "stamp\022(\n\004flag\030\005 \001(\0162\032.stock_api.OrderSta"
  "tusFlag\022&\n\006method\030\006 \001(\0162\026.stock_api.Orde"
  "rMethod\022\022\n\nhold_price\030\007 \001(\002\022\r\n\005price\030\010 \001"
  "(\005\022\020\n\010quantity\030\t \001(\005\022\032\n\022internal_order_n"
  "um\030\n \001(\t\022\021\n\torder_num\030\013 \001(\t\022\027\n\017traded_qu"
  "antity\030\014 \001(\005\022\024\n\014traded_price\030\r \001(\002\"I\n\013Or"
  "derResult\022!\n\006report\030\001 \003(\0132\021.stock_api.Re"
  "port\022\027\n\017current_balance\030\002 \001(\005\"\251\001\n\020CybosO"
  "rderResult\022(\n\004flag\030\001 \001(\0162\032.stock_api.Ord"
  "erStatusFlag\022\014\n\004code\030\002 \001(\t\022\024\n\014order_numb"
  "er\030\003 \001(\t\022\020\n\010quantity\030\004 \001(\005\022\r\n\005price\030\005 \001("
  "\005\022\016\n\006is_buy\030\006 \001(\010\022\026\n\016total_quantity\030\007 \001("
  "\005\"\035\n\010ListType\022\021\n\ttype_name\030\001 \001(\t\"#\n\013Comp"
  "anyName\022\024\n\014company_name\030\001 \001(\t\"a\n\017PastMin"
  "uteQuery\022\014\n\004code\030\001 \001(\t\022\025\n\rcount_of_days\030"
  "\002 \001(\r\022)\n\005today\030\003 \001(\0132\032.google.protobuf.T"
  "imestamp\"\363\002\n\014CybosDayData\022\014\n\004date\030\001 \001(\r\022"
  "\014\n\004time\030\002 \001(\r\022\023\n\013start_price\030\003 \001(\r\022\025\n\rhi"
  "ghest_price\030\004 \001(\r\022\024\n\014lowest_price\030\005 \001(\r\022"
  "\023\n\013close_price\030\006 \001(\r\022\016\n\006volume\030\007 \001(\003\022\016\n\006"
  "amount\030\010 \001(\004\022\027\n\017cum_sell_volume\030\t \001(\004\022\026\n"
  "\016cum_buy_volume\030\n \001(\004\022\035\n\025foreigner_hold_"
  "volume\030\013 \001(\003\022\033\n\023foreigner_hold_rate\030\014 \001("
  "\002\022\036\n\026institution_buy_volume\030\r \001(\003\022\"\n\032ins"
  "titution_cum_buy_volume\030\016 \001(\003\022\037\n\027is_sync"
  "hronized_bidding\030\017 \001(\010\":\n\rCybosDayDatas\022"
  ")\n\010day_data\030\001 \003(\0132\027.stock_api.CybosDayDa"
  "ta\"\340\001\n\024CybosSubjectTickData\022-\n\ttick_date"
  "\030\001 \001(\0132\032.google.protobuf.Timestamp\022\014\n\004ti"
  "me\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\014\n\004code\030\004 \001(\t\022\024\n\014"
  "company_name\030\005 \001(\t\022\023\n\013buy_or_sell\030\006 \001(\010\022"
  "\016\n\006volume\030\007 \001(\004\022\024\n\014total_volume\030\010 \001(\003\022\036\n"
  "\026foreigner_total_volume\030\t \001(\003\"=\n\016CybosTi"
  "ckDatas\022+\n\ttick_data\030\001 \003(\0132\030.stock_api.C"
  "ybosTickData\"\316\004\n\rCybosTickData\022-\n\ttick_d"
  "ate\030\001 \001(\0132\032.google.protobuf.Timestamp\022\014\n"
  "\004code\030\002 \001(\t\022\024\n\014company_name\030\003 \001(\t\022\026\n\016yes"
  "terday_diff\030\004 \001(\005\022\014\n\004time\030\005 \001(\r\022\023\n\013start"
  "_price\030\006 \001(\r\022\025\n\rhighest_price\030\007 \001(\r\022\024\n\014l"
  "owest_price\030\010 \001(\r\022\021\n\task_price\030\t \001(\r\022\021\n\t"
  "bid_price\030\n \001(\r\022\022\n\ncum_volume\030\013 \001(\004\022\022\n\nc"
  "um_amount\030\014 \001(\004\022\025\n\rcurrent_price\030\r \001(\r\022\023"
  "\n\013buy_or_sell\030\016 \001(\010\022 \n\030cum_sell_volume_b"
  "y_price\030\017 \001(\004\022\037\n\027cum_buy_volume_by_price"
  "\030\020 \001(\004\022\016\n\006volume\030\021 \001(\003\022\025\n\rtime_with_sec\030"
  "\022 \001(\r\022\027\n\017market_type_exp\030\023 \001(\r\022\023\n\013market"
  "_type\030\024 \001(\r\022\027\n\017out_time_volume\030\025 \001(\004\022\027\n\017"
  "cum_sell_volume\030\026 \001(\004\022\026\n\016cum_buy_volume\030"
  "\027 \001(\004\022\020\n\010is_kospi\030\030 \001(\010\022\024\n\014amount_ratio\030"
  "\031 \001(\002\"\274\002\n\023CybosBidAskTickData\022-\n\ttick_da"
  "te\030\001 \001(\0132\032.google.protobuf.Timestamp\022\014\n\004"
  "code\030\002 \001(\t\022\014\n\004time\030\003 \001(\r\022\016\n\006volume\030\004 \001(\004"
  "\022\022\n\nask_prices\030\005 \003(\005\022\022\n\nbid_prices\030\006 \003(\005"
  "\022\023\n\013ask_remains\030\007 \003(\r\022\023\n\013bid_remains\030\010 \003"
  "(\r\022\030\n\020total_ask_remain\030\t \001(\004\022\030\n\020total_bi"
  "d_remain\030\n \001(\004\022!\n\031out_time_total_ask_rem"
  "ain\030\013 \001(\003\022!\n\031out_time_total_bid_remain\030\014"
  " \001(\003\"\304\001\n\017CybosStockAlarm\022-\n\ttick_date\030\001 "
  "\001(\0132\032.google.protobuf.Timestamp\022\014\n\004time\030"
  "\002 \001(\r\022\025\n\rtype_category\030\003 \001(\005\022\027\n\017market_c"
  "ategory\030\004 \001(\005\022\014\n\004code\030\005 \001(\t\022\026\n\016alarm_cat"
  "egory\030\006 \001(\005\022\r\n\005title\030\007 \001(\t\022\017\n\007content\030\010 "
  "\001(\t*Q\n\021SimulationMsgType\022\014\n\010MSG_TICK\020\000\022\016"
  "\n\nMSG_BIDASK\020\001\022\017\n\013MSG_SUBJECT\020\002\022\r\n\tMSG_A"
  "LARM\020\003*M\n\021TodayTopSelection\022\020\n\014TOP_BY_RA"
  "TIO\020\000\022\023\n\017TOP_BY_MOMENTUM\020\001\022\021\n\rTOP_BY_AMO"
  "UNT\020\002*\240\001\n\017OrderStatusFlag\022\022\n\016STATUS_UNKN"
  "OWN\020\000\022\025\n\021STATUS_REGISTERED\020\001\022\022\n\016STATUS_T"
  "RADING\020\002\022\021\n\rSTATUS_TRADED\0201\022\022\n\016STATUS_CO"
  "NFIRM\0202\022\021\n\rSTATUS_DENIED\0203\022\024\n\020STATUS_SUB"
  "MITTED\0204*f\n\013OrderMethod\022\021\n\rTRADE_UNKNOWN"
  "\020\000\022\025\n\021TRADE_IMMEDIATELY\020\001\022\031\n\025TRADE_ON_BI"
  "D_ASK_MEET\020\002\022\022\n\016TRADE_ON_PRICE\020\003*,\n\tOrde"
  "rType\022\007\n\003NEW\020\000\022\n\n\006MODIFY\020\001\022\n\n\006CANCEL\020\002*N"
  "\n\014TradeMsgType\022\013\n\007UNKNOWN\020\000\022\r\n\tORDER_MSG"
  "\020\001\022\021\n\rREQ_ALL_ORDER\020\002\022\017\n\013GET_BALANCE\020\0032\330"
  "\"\n\005Stock\022<\n\010SayHello\022\026.google.protobuf.E"
  "mpty\032\026.google.protobuf.Empty\"\000\022\?\n\nGetDay"
  "Data\022\025.stock_api.StockQuery\032\030.stock_api."
  "CybosDayDatas\"\000\022B\n\rGetMinuteData\022\025.stock"
  "_api.StockQuery\032\030.stock_api.CybosDayData"
  "s\"\000\022K\n\022GetTodayMinuteData\022\031.stock_api.St"
  "ockCodeQuery\032\030.stock_api.CybosDayDatas\"\000"
  "\022K\n\021GetPastMinuteData\022\032.stock_api.PastMi"
  "nuteQuery\032\030.stock_api.CybosDayDatas\"\000\022B\n"
  "\021GetSubscribeCodes\022\026.google.protobuf.Emp"
  "ty\032\023.stock_api.CodeList\"\000\022:\n\nGetBalance\022"
  "\026.google.protobuf.Empty\032\022.stock_api.Bala"
  "nce\"\000\022@\n\nOrderStock\022\023.stock_api.OrderMsg"
  "\032\033.stock_api.CybosOrderReturn\"\000\022A\n\013Chang"
  "eOrder\022\023.stock_api.OrderMsg\032\033.stock_api."
  "CybosOrderReturn\"\000\022A\n\013CancelOrder\022\023.stoc"
  "k_api.OrderMsg\032\033.stock_api.CybosOrderRet"
  "urn\"\000\022C\n\013GetYearHigh\022\031.stock_api.StockCo"
  "deQuery\032\027.stock_api.YearHighInfo\"\000\022K\n\024Re"
  "questCybosTickData\022\031.stock_api.StockCode"
  "Query\032\026.google.protobuf.Empty\"\000\022I\n\022Reque"
  "stCybosBidAsk\022\031.stock_api.StockCodeQuery"
  "\032\026.google.protobuf.Empty\"\000\022J\n\023RequestCyb"
  "osSubject\022\031.stock_api.StockCodeQuery\032\026.g"
  "oogle.protobuf.Empty\"\000\022E\n\021RequestCybosAl"
  "arm\022\026.google.protobuf.Empty\032\026.google.pro"
  "tobuf.Empty\"\000\022@\n\017RequestToTrader\022\023.stock"
  "_api.TradeMsg\032\026.google.protobuf.Empty\"\000\022"
  "K\n\027RequestCybosTradeResult\022\026.google.prot"
  "obuf.Empty\032\026.google.protobuf.Empty\"\000\022E\n\021"
  "ReportOrderResult\022\026.stock_api.OrderResul"
  "t\032\026.google.protobuf.Empty\"\000\0227\n\007IsKospi\022\031"
  ".stock_api.StockCodeQuery\032\017.stock_api.Bo"
  "ol\"\000\022B\n\016SetViPriceInfo\022\026.stock_api.ViPri"
  "ceInfo\032\026.google.protobuf.Empty\"\000\022<\n\nGetV"
  "iPrice\022\031.stock_api.StockCodeQuery\032\021.stoc"
  "k_api.Prices\"\000\022B\n\017ListenTraderMsg\022\026.goog"
  "le.protobuf.Empty\032\023.stock_api.TradeMsg\"\000"
  "0\001\022Q\n\026ListenCybosOrderResult\022\026.google.pr"
  "otobuf.Empty\032\033.stock_api.CybosOrderResul"
  "t\"\0000\001\022G\n\021ListenOrderResult\022\026.google.prot"
  "obuf.Empty\032\026.stock_api.OrderResult\"\0000\001\022F"
  "\n\017SetCurrentStock\022\031.stock_api.StockCodeQ"
  "uery\032\026.google.protobuf.Empty\"\000\022J\n\022SetCur"
  "rentDateTime\022\032.google.protobuf.Timestamp"
  "\032\026.google.protobuf.Empty\"\000\022E\n\016GetCompany"
  "Name\022\031.stock_api.StockCodeQuery\032\026.stock_"
  "api.CompanyName\"\000\022@\n\017GetFavoriteList\022\026.g"
  "oogle.protobuf.Empty\032\023.stock_api.CodeLis"
  "t\"\000\022B\n\013AddFavorite\022\031.stock_api.StockCode"
  "Query\032\026.google.protobuf.Empty\"\000\022E\n\016Remov"
  "eFavorite\022\031.stock_api.StockCodeQuery\032\026.g"
  "oogle.protobuf.Empty\"\000\022C\n\017ClearRecentLis"
  "t\022\026.google.protobuf.Empty\032\026.google.proto"
  "buf.Empty\"\000\022M\n\031GetYesterdayTopAmountList"
  "\022\032.google.protobuf.Timestamp\032\022.stock_api"
  ".TopList\"\000\022K\n\032GetYesterdayUpperLimitList"
  "\022\026.google.protobuf.Empty\032\023.stock_api.Cod"
  "eList\"\000\022H\n\027SetTodayAmountRatioList\022\023.sto"
  "ck_api.CodeList\032\026.google.protobuf.Empty\""
  "\000\022K\n\032SetTodayAmountMomentumList\022\023.stock_"
  "api.CodeList\032\026.google.protobuf.Empty\"\000\022F"
  "\n\025SetTodayAmountTopList\022\023.stock_api.Code"
  "List\032\026.google.protobuf.Empty\"\000\022I\n\020GetBro"
  "kerSummary\022\031.stock_api.StockCodeQuery\032\030."
  "stock_api.BrokerSummary\"\000\022F\n\020SetBrokerSu"
  "mmary\022\030.stock_api.BrokerSummary\032\026.google"
  ".protobuf.Empty\"\000\022L\n\023AddBrokerMinuteTick"
  "\022\033.stock_api.BrokerMinuteTick\032\026.google.p"
  "rotobuf.Empty\"\000\022S\n\023GetBrokerMinuteTick\022\031"
  ".stock_api.StockCodeQuery\032\037.stock_api.Br"
  "okerMinuteTickList\"\000\022I\n\025GetTodayTopAmoun"
  "tList\022\031.stock_api.TodayTopOption\032\023.stock"
  "_api.CodeList\"\000\022@\n\017GetRecentSearch\022\026.goo"
  "gle.protobuf.Empty\032\023.stock_api.CodeList\""
  "\000\022:\n\tGetViList\022\026.google.protobuf.Empty\032\023"
  ".stock_api.CodeList\"\000\022@\n\017GetStrategyList"
  "\022\026.google.protobuf.Empty\032\023.stock_api.Cod"
  "eList\"\000\022@\n\017SetStrategyList\022\023.stock_api.C"
  "odeList\032\026.google.protobuf.Empty\"\000\022K\n\022Lis"
  "tenCurrentStock\022\026.google.protobuf.Empty\032"
  "\031.stock_api.StockCodeQuery\"\0000\001\022D\n\021Listen"
  "ListChanged\022\026.google.protobuf.Empty\032\023.st"
  "ock_api.ListType\"\0000\001\022K\n\023ListenBrokerSumm"
  "ary\022\026.google.protobuf.Empty\032\030.stock_api."
  "BrokerSummary\"\0000\001\022Q\n\026ListenBrokerMinuteT"
  "ick\022\026.google.protobuf.Empty\032\033.stock_api."
  "BrokerMinuteTick\"\0000\001\022K\n\023ListenCybosTickD"
  "ata\022\026.google.protobuf.Empty\032\030.stock_api."
  "CybosTickData\"\0000\001\022O\n\021ListenCybosBidAsk\022\026"
  ".google.protobuf.Empty\032\036.stock_api.Cybos"
  "BidAskTickData\"\0000\001\022K\n\021ListenCurrentTime\022"
  "\026.google.protobuf.Empty\032\032.google.protobu"
  "f.Timestamp\"\0000\001\022Q\n\022ListenCybosSubject\022\026."
  "google.protobuf.Empty\032\037.stock_api.CybosS"
  "ubjectTickData\"\0000\001\022J\n\020ListenCybosAlarm\022\026"
  ".google.protobuf.Empty\032\032.stock_api.Cybos"
  "StockAlarm\"\0000\001\022X\n\035ListenSimulationStatus"
  "Changed\022\026.google.protobuf.Empty\032\033.stock_"
  "api.SimulationStatus\"\0000\001\022H\n\016SimulationDa"
  "ta\022\030.stock_api.SimulationMsg\032\026.google.pr"
  "otobuf.Empty\"\000(\0010\001\022W\n\031ListenSimulationOp"
  "eration\022\026.google.protobuf.Empty\032\036.stock_"
  "api.SimulationOperation\"\0000\001\022D\n\017StartSimu"
  "lation\022\036.stock_api.SimulationOperation\032\017"
  ".stock_api.Bool\"\000\022B\n\016StopSimulation\022\026.go"
  "ogle.protobuf.Empty\032\026.google.protobuf.Em"
  "pty\"\000\022L\n\023SetSimulationStatus\022\033.stock_api"
  ".SimulationStatus\032\026.google.protobuf.Empt"
  "y\"\000\022L\n\023GetSimulationStatus\022\026.google.prot"
  "obuf.Empty\032\033.stock_api.SimulationStatus\""
  "\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_stock_5fprovider_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_stock_5fprovider_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stock_5fprovider_2eproto = {
  false, false, 9969, descriptor_table_protodef_stock_5fprovider_2eproto, "stock_provider.proto", 
  &descriptor_table_stock_5fprovider_2eproto_once, descriptor_table_stock_5fprovider_2eproto_deps, 2, 37,
  schemas, file_default_instances, TableStruct_stock_5fprovider_2eproto::offsets,
  file_level_metadata_stock_5fprovider_2eproto, file_level_enum_descriptors_stock_5fprovider_2eproto, file_level_service_descriptors_stock_5fprovider_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_stock_5fprovider_2eproto_getter() {
  return &descriptor_table_stock_5fprovider_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_stock_5fprovider_2eproto(&descriptor_table_stock_5fprovider_2eproto);
namespace stock_api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SimulationMsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stock_5fprovider_2eproto);
  return file_level_enum_descriptors_stock_5fprovider_2eproto[0];
}
bool SimulationMsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TodayTopSelection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stock_5fprovider_2eproto);
  return file_level_enum_descriptors_stock_5fprovider_2eproto[1];
}
bool TodayTopSelection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderStatusFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stock_5fprovider_2eproto);
  return file_level_enum_descriptors_stock_5fprovider_2eproto[2];
}
bool OrderStatusFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 49:
    case 50:
    case 51:
    case 52:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stock_5fprovider_2eproto);
  return file_level_enum_descriptors_stock_5fprovider_2eproto[3];
}
bool OrderMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stock_5fprovider_2eproto);
  return file_level_enum_descriptors_stock_5fprovider_2eproto[4];
}
bool OrderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TradeMsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stock_5fprovider_2eproto);
  return file_level_enum_descriptors_stock_5fprovider_2eproto[5];
}
bool TradeMsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class StockCodeQuery::_Internal {
 public:
};

StockCodeQuery::StockCodeQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.StockCodeQuery)
}
StockCodeQuery::StockCodeQuery(const StockCodeQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:stock_api.StockCodeQuery)
}

inline void StockCodeQuery::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StockCodeQuery::~StockCodeQuery() {
  // @@protoc_insertion_point(destructor:stock_api.StockCodeQuery)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StockCodeQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StockCodeQuery::ArenaDtor(void* object) {
  StockCodeQuery* _this = reinterpret_cast< StockCodeQuery* >(object);
  (void)_this;
}
void StockCodeQuery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StockCodeQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StockCodeQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.StockCodeQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StockCodeQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.StockCodeQuery.code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StockCodeQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.StockCodeQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.StockCodeQuery.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.StockCodeQuery)
  return target;
}

size_t StockCodeQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.StockCodeQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StockCodeQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StockCodeQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StockCodeQuery::GetClassData() const { return &_class_data_; }

void StockCodeQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StockCodeQuery *>(to)->MergeFrom(
      static_cast<const StockCodeQuery &>(from));
}


void StockCodeQuery::MergeFrom(const StockCodeQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.StockCodeQuery)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StockCodeQuery::CopyFrom(const StockCodeQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.StockCodeQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockCodeQuery::IsInitialized() const {
  return true;
}

void StockCodeQuery::InternalSwap(StockCodeQuery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, lhs_arena,
      &other->code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StockCodeQuery::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[0]);
}

// ===================================================================

class CodeList::_Internal {
 public:
};

CodeList::CodeList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  codelist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.CodeList)
}
CodeList::CodeList(const CodeList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      codelist_(from.codelist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:stock_api.CodeList)
}

inline void CodeList::SharedCtor() {
}

CodeList::~CodeList() {
  // @@protoc_insertion_point(destructor:stock_api.CodeList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CodeList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CodeList::ArenaDtor(void* object) {
  CodeList* _this = reinterpret_cast< CodeList* >(object);
  (void)_this;
}
void CodeList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CodeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CodeList::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.CodeList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  codelist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CodeList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string codelist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_codelist();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CodeList.codelist"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CodeList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.CodeList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string codelist = 1;
  for (int i = 0, n = this->_internal_codelist_size(); i < n; i++) {
    const auto& s = this->_internal_codelist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CodeList.codelist");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.CodeList)
  return target;
}

size_t CodeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.CodeList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string codelist = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(codelist_.size());
  for (int i = 0, n = codelist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      codelist_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CodeList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CodeList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CodeList::GetClassData() const { return &_class_data_; }

void CodeList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CodeList *>(to)->MergeFrom(
      static_cast<const CodeList &>(from));
}


void CodeList::MergeFrom(const CodeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.CodeList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  codelist_.MergeFrom(from.codelist_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CodeList::CopyFrom(const CodeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.CodeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CodeList::IsInitialized() const {
  return true;
}

void CodeList::InternalSwap(CodeList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  codelist_.InternalSwap(&other->codelist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CodeList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[1]);
}

// ===================================================================

class ViPriceInfo::_Internal {
 public:
};

ViPriceInfo::ViPriceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  price_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.ViPriceInfo)
}
ViPriceInfo::ViPriceInfo(const ViPriceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      price_(from.price_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:stock_api.ViPriceInfo)
}

inline void ViPriceInfo::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ViPriceInfo::~ViPriceInfo() {
  // @@protoc_insertion_point(destructor:stock_api.ViPriceInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ViPriceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ViPriceInfo::ArenaDtor(void* object) {
  ViPriceInfo* _this = reinterpret_cast< ViPriceInfo* >(object);
  (void)_this;
}
void ViPriceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ViPriceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ViPriceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.ViPriceInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  price_.Clear();
  code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViPriceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.ViPriceInfo.code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_price(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_price(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ViPriceInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.ViPriceInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.ViPriceInfo.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // repeated int32 price = 2;
  {
    int byte_size = _price_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_price(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.ViPriceInfo)
  return target;
}

size_t ViPriceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.ViPriceInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 price = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->price_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _price_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViPriceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ViPriceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViPriceInfo::GetClassData() const { return &_class_data_; }

void ViPriceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ViPriceInfo *>(to)->MergeFrom(
      static_cast<const ViPriceInfo &>(from));
}


void ViPriceInfo::MergeFrom(const ViPriceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.ViPriceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  price_.MergeFrom(from.price_);
  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViPriceInfo::CopyFrom(const ViPriceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.ViPriceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViPriceInfo::IsInitialized() const {
  return true;
}

void ViPriceInfo::InternalSwap(ViPriceInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  price_.InternalSwap(&other->price_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, lhs_arena,
      &other->code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ViPriceInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[2]);
}

// ===================================================================

class Prices::_Internal {
 public:
};

Prices::Prices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  price_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.Prices)
}
Prices::Prices(const Prices& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      price_(from.price_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:stock_api.Prices)
}

inline void Prices::SharedCtor() {
}

Prices::~Prices() {
  // @@protoc_insertion_point(destructor:stock_api.Prices)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Prices::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Prices::ArenaDtor(void* object) {
  Prices* _this = reinterpret_cast< Prices* >(object);
  (void)_this;
}
void Prices::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Prices::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Prices::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.Prices)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  price_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Prices::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_price(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_price(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Prices::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.Prices)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 price = 1;
  {
    int byte_size = _price_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_price(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.Prices)
  return target;
}

size_t Prices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.Prices)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 price = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->price_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _price_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Prices::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Prices::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Prices::GetClassData() const { return &_class_data_; }

void Prices::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Prices *>(to)->MergeFrom(
      static_cast<const Prices &>(from));
}


void Prices::MergeFrom(const Prices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.Prices)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  price_.MergeFrom(from.price_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Prices::CopyFrom(const Prices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.Prices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prices::IsInitialized() const {
  return true;
}

void Prices::InternalSwap(Prices* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  price_.InternalSwap(&other->price_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Prices::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[3]);
}

// ===================================================================

class Bool::_Internal {
 public:
};

Bool::Bool(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.Bool)
}
Bool::Bool(const Bool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:stock_api.Bool)
}

inline void Bool::SharedCtor() {
ret_ = false;
}

Bool::~Bool() {
  // @@protoc_insertion_point(destructor:stock_api.Bool)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Bool::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Bool::ArenaDtor(void* object) {
  Bool* _this = reinterpret_cast< Bool* >(object);
  (void)_this;
}
void Bool::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Bool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Bool::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.Bool)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Bool::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.Bool)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ret = 1;
  if (this->_internal_ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.Bool)
  return target;
}

size_t Bool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.Bool)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ret = 1;
  if (this->_internal_ret() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Bool::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Bool::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Bool::GetClassData() const { return &_class_data_; }

void Bool::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Bool *>(to)->MergeFrom(
      static_cast<const Bool &>(from));
}


void Bool::MergeFrom(const Bool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.Bool)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Bool::CopyFrom(const Bool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.Bool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bool::IsInitialized() const {
  return true;
}

void Bool::InternalSwap(Bool* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Bool::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[4]);
}

// ===================================================================

BrokerLog_BuyBrokerEntry_DoNotUse::BrokerLog_BuyBrokerEntry_DoNotUse() {}
BrokerLog_BuyBrokerEntry_DoNotUse::BrokerLog_BuyBrokerEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void BrokerLog_BuyBrokerEntry_DoNotUse::MergeFrom(const BrokerLog_BuyBrokerEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata BrokerLog_BuyBrokerEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[5]);
}

// ===================================================================

BrokerLog_SellBrokerEntry_DoNotUse::BrokerLog_SellBrokerEntry_DoNotUse() {}
BrokerLog_SellBrokerEntry_DoNotUse::BrokerLog_SellBrokerEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void BrokerLog_SellBrokerEntry_DoNotUse::MergeFrom(const BrokerLog_SellBrokerEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata BrokerLog_SellBrokerEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[6]);
}

// ===================================================================

class BrokerLog::_Internal {
 public:
};

BrokerLog::BrokerLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  buy_broker_(arena),
  sell_broker_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.BrokerLog)
}
BrokerLog::BrokerLog(const BrokerLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buy_broker_.MergeFrom(from.buy_broker_);
  sell_broker_.MergeFrom(from.sell_broker_);
  ::memcpy(&from_price_, &from.from_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&sell_volume_foreign_) -
    reinterpret_cast<char*>(&from_price_)) + sizeof(sell_volume_foreign_));
  // @@protoc_insertion_point(copy_constructor:stock_api.BrokerLog)
}

inline void BrokerLog::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sell_volume_foreign_) -
    reinterpret_cast<char*>(&from_price_)) + sizeof(sell_volume_foreign_));
}

BrokerLog::~BrokerLog() {
  // @@protoc_insertion_point(destructor:stock_api.BrokerLog)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BrokerLog::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BrokerLog::ArenaDtor(void* object) {
  BrokerLog* _this = reinterpret_cast< BrokerLog* >(object);
  (void)_this;
  _this->buy_broker_. ~MapField();
  _this->sell_broker_. ~MapField();
}
inline void BrokerLog::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &BrokerLog::ArenaDtor);
  }
}
void BrokerLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BrokerLog::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.BrokerLog)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buy_broker_.Clear();
  sell_broker_.Clear();
  ::memset(&from_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sell_volume_foreign_) -
      reinterpret_cast<char*>(&from_price_)) + sizeof(sell_volume_foreign_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BrokerLog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float from_price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          from_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float until_price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          until_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int64 buy_volume = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          buy_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 sell_volume = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          sell_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 buy_volume_domestic = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          buy_volume_domestic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 buy_volume_foreign = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          buy_volume_foreign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 sell_volume_domestic = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          sell_volume_domestic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 sell_volume_foreign = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          sell_volume_foreign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, int64> buy_broker = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&buy_broker_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, int64> sell_broker = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&sell_broker_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BrokerLog::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.BrokerLog)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float from_price = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_from_price = this->_internal_from_price();
  uint32_t raw_from_price;
  memcpy(&raw_from_price, &tmp_from_price, sizeof(tmp_from_price));
  if (raw_from_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_from_price(), target);
  }

  // float until_price = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_until_price = this->_internal_until_price();
  uint32_t raw_until_price;
  memcpy(&raw_until_price, &tmp_until_price, sizeof(tmp_until_price));
  if (raw_until_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_until_price(), target);
  }

  // int64 buy_volume = 3;
  if (this->_internal_buy_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_buy_volume(), target);
  }

  // int64 sell_volume = 4;
  if (this->_internal_sell_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_sell_volume(), target);
  }

  // int64 buy_volume_domestic = 5;
  if (this->_internal_buy_volume_domestic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_buy_volume_domestic(), target);
  }

  // int64 buy_volume_foreign = 6;
  if (this->_internal_buy_volume_foreign() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_buy_volume_foreign(), target);
  }

  // int64 sell_volume_domestic = 7;
  if (this->_internal_sell_volume_domestic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_sell_volume_domestic(), target);
  }

  // int64 sell_volume_foreign = 8;
  if (this->_internal_sell_volume_foreign() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_sell_volume_foreign(), target);
  }

  // map<string, int64> buy_broker = 9;
  if (!this->_internal_buy_broker().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "stock_api.BrokerLog.BuyBrokerEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_buy_broker().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_buy_broker().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_iterator
          it = this->_internal_buy_broker().begin();
          it != this->_internal_buy_broker().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = BrokerLog_BuyBrokerEntry_DoNotUse::Funcs::InternalSerialize(9, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_iterator
          it = this->_internal_buy_broker().begin();
          it != this->_internal_buy_broker().end(); ++it) {
        target = BrokerLog_BuyBrokerEntry_DoNotUse::Funcs::InternalSerialize(9, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, int64> sell_broker = 10;
  if (!this->_internal_sell_broker().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "stock_api.BrokerLog.SellBrokerEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_sell_broker().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_sell_broker().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_iterator
          it = this->_internal_sell_broker().begin();
          it != this->_internal_sell_broker().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = BrokerLog_SellBrokerEntry_DoNotUse::Funcs::InternalSerialize(10, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_iterator
          it = this->_internal_sell_broker().begin();
          it != this->_internal_sell_broker().end(); ++it) {
        target = BrokerLog_SellBrokerEntry_DoNotUse::Funcs::InternalSerialize(10, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.BrokerLog)
  return target;
}

size_t BrokerLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.BrokerLog)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int64> buy_broker = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_buy_broker_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_iterator
      it = this->_internal_buy_broker().begin();
      it != this->_internal_buy_broker().end(); ++it) {
    total_size += BrokerLog_BuyBrokerEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int64> sell_broker = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sell_broker_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_iterator
      it = this->_internal_sell_broker().begin();
      it != this->_internal_sell_broker().end(); ++it) {
    total_size += BrokerLog_SellBrokerEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // float from_price = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_from_price = this->_internal_from_price();
  uint32_t raw_from_price;
  memcpy(&raw_from_price, &tmp_from_price, sizeof(tmp_from_price));
  if (raw_from_price != 0) {
    total_size += 1 + 4;
  }

  // float until_price = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_until_price = this->_internal_until_price();
  uint32_t raw_until_price;
  memcpy(&raw_until_price, &tmp_until_price, sizeof(tmp_until_price));
  if (raw_until_price != 0) {
    total_size += 1 + 4;
  }

  // int64 buy_volume = 3;
  if (this->_internal_buy_volume() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_buy_volume());
  }

  // int64 sell_volume = 4;
  if (this->_internal_sell_volume() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_sell_volume());
  }

  // int64 buy_volume_domestic = 5;
  if (this->_internal_buy_volume_domestic() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_buy_volume_domestic());
  }

  // int64 buy_volume_foreign = 6;
  if (this->_internal_buy_volume_foreign() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_buy_volume_foreign());
  }

  // int64 sell_volume_domestic = 7;
  if (this->_internal_sell_volume_domestic() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_sell_volume_domestic());
  }

  // int64 sell_volume_foreign = 8;
  if (this->_internal_sell_volume_foreign() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_sell_volume_foreign());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BrokerLog::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BrokerLog::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BrokerLog::GetClassData() const { return &_class_data_; }

void BrokerLog::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BrokerLog *>(to)->MergeFrom(
      static_cast<const BrokerLog &>(from));
}


void BrokerLog::MergeFrom(const BrokerLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.BrokerLog)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  buy_broker_.MergeFrom(from.buy_broker_);
  sell_broker_.MergeFrom(from.sell_broker_);
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_from_price = from._internal_from_price();
  uint32_t raw_from_price;
  memcpy(&raw_from_price, &tmp_from_price, sizeof(tmp_from_price));
  if (raw_from_price != 0) {
    _internal_set_from_price(from._internal_from_price());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_until_price = from._internal_until_price();
  uint32_t raw_until_price;
  memcpy(&raw_until_price, &tmp_until_price, sizeof(tmp_until_price));
  if (raw_until_price != 0) {
    _internal_set_until_price(from._internal_until_price());
  }
  if (from._internal_buy_volume() != 0) {
    _internal_set_buy_volume(from._internal_buy_volume());
  }
  if (from._internal_sell_volume() != 0) {
    _internal_set_sell_volume(from._internal_sell_volume());
  }
  if (from._internal_buy_volume_domestic() != 0) {
    _internal_set_buy_volume_domestic(from._internal_buy_volume_domestic());
  }
  if (from._internal_buy_volume_foreign() != 0) {
    _internal_set_buy_volume_foreign(from._internal_buy_volume_foreign());
  }
  if (from._internal_sell_volume_domestic() != 0) {
    _internal_set_sell_volume_domestic(from._internal_sell_volume_domestic());
  }
  if (from._internal_sell_volume_foreign() != 0) {
    _internal_set_sell_volume_foreign(from._internal_sell_volume_foreign());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BrokerLog::CopyFrom(const BrokerLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.BrokerLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerLog::IsInitialized() const {
  return true;
}

void BrokerLog::InternalSwap(BrokerLog* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  buy_broker_.InternalSwap(&other->buy_broker_);
  sell_broker_.InternalSwap(&other->sell_broker_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BrokerLog, sell_volume_foreign_)
      + sizeof(BrokerLog::sell_volume_foreign_)
      - PROTOBUF_FIELD_OFFSET(BrokerLog, from_price_)>(
          reinterpret_cast<char*>(&from_price_),
          reinterpret_cast<char*>(&other->from_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BrokerLog::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[7]);
}

// ===================================================================

class BrokerSummary::_Internal {
 public:
};

BrokerSummary::BrokerSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  broker_log_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.BrokerSummary)
}
BrokerSummary::BrokerSummary(const BrokerSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      broker_log_(from.broker_log_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  ::memcpy(&foreigner_total_, &from.foreigner_total_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_volume_) -
    reinterpret_cast<char*>(&foreigner_total_)) + sizeof(max_volume_));
  // @@protoc_insertion_point(copy_constructor:stock_api.BrokerSummary)
}

inline void BrokerSummary::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&foreigner_total_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_volume_) -
    reinterpret_cast<char*>(&foreigner_total_)) + sizeof(max_volume_));
}

BrokerSummary::~BrokerSummary() {
  // @@protoc_insertion_point(destructor:stock_api.BrokerSummary)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BrokerSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BrokerSummary::ArenaDtor(void* object) {
  BrokerSummary* _this = reinterpret_cast< BrokerSummary* >(object);
  (void)_this;
}
void BrokerSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BrokerSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BrokerSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.BrokerSummary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broker_log_.Clear();
  code_.ClearToEmpty();
  ::memset(&foreigner_total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_volume_) -
      reinterpret_cast<char*>(&foreigner_total_)) + sizeof(max_volume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BrokerSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.BrokerSummary.code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 foreigner_total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          foreigner_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .stock_api.BrokerLog broker_log = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_broker_log(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 max_volume = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          max_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BrokerSummary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.BrokerSummary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.BrokerSummary.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // int64 foreigner_total = 2;
  if (this->_internal_foreigner_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_foreigner_total(), target);
  }

  // repeated .stock_api.BrokerLog broker_log = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_broker_log_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_broker_log(i), target, stream);
  }

  // int64 max_volume = 4;
  if (this->_internal_max_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_max_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.BrokerSummary)
  return target;
}

size_t BrokerSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.BrokerSummary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .stock_api.BrokerLog broker_log = 3;
  total_size += 1UL * this->_internal_broker_log_size();
  for (const auto& msg : this->broker_log_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // int64 foreigner_total = 2;
  if (this->_internal_foreigner_total() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_foreigner_total());
  }

  // int64 max_volume = 4;
  if (this->_internal_max_volume() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_max_volume());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BrokerSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BrokerSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BrokerSummary::GetClassData() const { return &_class_data_; }

void BrokerSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BrokerSummary *>(to)->MergeFrom(
      static_cast<const BrokerSummary &>(from));
}


void BrokerSummary::MergeFrom(const BrokerSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.BrokerSummary)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  broker_log_.MergeFrom(from.broker_log_);
  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  if (from._internal_foreigner_total() != 0) {
    _internal_set_foreigner_total(from._internal_foreigner_total());
  }
  if (from._internal_max_volume() != 0) {
    _internal_set_max_volume(from._internal_max_volume());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BrokerSummary::CopyFrom(const BrokerSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.BrokerSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerSummary::IsInitialized() const {
  return true;
}

void BrokerSummary::InternalSwap(BrokerSummary* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  broker_log_.InternalSwap(&other->broker_log_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, lhs_arena,
      &other->code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BrokerSummary, max_volume_)
      + sizeof(BrokerSummary::max_volume_)
      - PROTOBUF_FIELD_OFFSET(BrokerSummary, foreigner_total_)>(
          reinterpret_cast<char*>(&foreigner_total_),
          reinterpret_cast<char*>(&other->foreigner_total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BrokerSummary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[8]);
}

// ===================================================================

class BrokerStat::_Internal {
 public:
};

BrokerStat::BrokerStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.BrokerStat)
}
BrokerStat::BrokerStat(const BrokerStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&buy_volume_, &from.buy_volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&sell_volume_) -
    reinterpret_cast<char*>(&buy_volume_)) + sizeof(sell_volume_));
  // @@protoc_insertion_point(copy_constructor:stock_api.BrokerStat)
}

inline void BrokerStat::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&buy_volume_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sell_volume_) -
    reinterpret_cast<char*>(&buy_volume_)) + sizeof(sell_volume_));
}

BrokerStat::~BrokerStat() {
  // @@protoc_insertion_point(destructor:stock_api.BrokerStat)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BrokerStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BrokerStat::ArenaDtor(void* object) {
  BrokerStat* _this = reinterpret_cast< BrokerStat* >(object);
  (void)_this;
}
void BrokerStat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BrokerStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BrokerStat::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.BrokerStat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&buy_volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sell_volume_) -
      reinterpret_cast<char*>(&buy_volume_)) + sizeof(sell_volume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BrokerStat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 buy_volume = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          buy_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 sell_volume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          sell_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BrokerStat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.BrokerStat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 buy_volume = 1;
  if (this->_internal_buy_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_buy_volume(), target);
  }

  // int64 sell_volume = 2;
  if (this->_internal_sell_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_sell_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.BrokerStat)
  return target;
}

size_t BrokerStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.BrokerStat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 buy_volume = 1;
  if (this->_internal_buy_volume() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_buy_volume());
  }

  // int64 sell_volume = 2;
  if (this->_internal_sell_volume() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_sell_volume());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BrokerStat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BrokerStat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BrokerStat::GetClassData() const { return &_class_data_; }

void BrokerStat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BrokerStat *>(to)->MergeFrom(
      static_cast<const BrokerStat &>(from));
}


void BrokerStat::MergeFrom(const BrokerStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.BrokerStat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_buy_volume() != 0) {
    _internal_set_buy_volume(from._internal_buy_volume());
  }
  if (from._internal_sell_volume() != 0) {
    _internal_set_sell_volume(from._internal_sell_volume());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BrokerStat::CopyFrom(const BrokerStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.BrokerStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerStat::IsInitialized() const {
  return true;
}

void BrokerStat::InternalSwap(BrokerStat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BrokerStat, sell_volume_)
      + sizeof(BrokerStat::sell_volume_)
      - PROTOBUF_FIELD_OFFSET(BrokerStat, buy_volume_)>(
          reinterpret_cast<char*>(&buy_volume_),
          reinterpret_cast<char*>(&other->buy_volume_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BrokerStat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[9]);
}

// ===================================================================

class BrokerMinuteTickList::_Internal {
 public:
};

BrokerMinuteTickList::BrokerMinuteTickList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  minute_tick_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.BrokerMinuteTickList)
}
BrokerMinuteTickList::BrokerMinuteTickList(const BrokerMinuteTickList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      minute_tick_(from.minute_tick_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:stock_api.BrokerMinuteTickList)
}

inline void BrokerMinuteTickList::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BrokerMinuteTickList::~BrokerMinuteTickList() {
  // @@protoc_insertion_point(destructor:stock_api.BrokerMinuteTickList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BrokerMinuteTickList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BrokerMinuteTickList::ArenaDtor(void* object) {
  BrokerMinuteTickList* _this = reinterpret_cast< BrokerMinuteTickList* >(object);
  (void)_this;
}
void BrokerMinuteTickList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BrokerMinuteTickList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BrokerMinuteTickList::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.BrokerMinuteTickList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  minute_tick_.Clear();
  code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BrokerMinuteTickList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.BrokerMinuteTickList.code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .stock_api.BrokerMinuteTick minute_tick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_minute_tick(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BrokerMinuteTickList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.BrokerMinuteTickList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.BrokerMinuteTickList.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // repeated .stock_api.BrokerMinuteTick minute_tick = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_minute_tick_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_minute_tick(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.BrokerMinuteTickList)
  return target;
}

size_t BrokerMinuteTickList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.BrokerMinuteTickList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .stock_api.BrokerMinuteTick minute_tick = 2;
  total_size += 1UL * this->_internal_minute_tick_size();
  for (const auto& msg : this->minute_tick_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BrokerMinuteTickList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BrokerMinuteTickList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BrokerMinuteTickList::GetClassData() const { return &_class_data_; }

void BrokerMinuteTickList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BrokerMinuteTickList *>(to)->MergeFrom(
      static_cast<const BrokerMinuteTickList &>(from));
}


void BrokerMinuteTickList::MergeFrom(const BrokerMinuteTickList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.BrokerMinuteTickList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  minute_tick_.MergeFrom(from.minute_tick_);
  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BrokerMinuteTickList::CopyFrom(const BrokerMinuteTickList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.BrokerMinuteTickList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerMinuteTickList::IsInitialized() const {
  return true;
}

void BrokerMinuteTickList::InternalSwap(BrokerMinuteTickList* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  minute_tick_.InternalSwap(&other->minute_tick_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, lhs_arena,
      &other->code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BrokerMinuteTickList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[10]);
}

// ===================================================================

BrokerMinuteTick_BrokersMapEntry_DoNotUse::BrokerMinuteTick_BrokersMapEntry_DoNotUse() {}
BrokerMinuteTick_BrokersMapEntry_DoNotUse::BrokerMinuteTick_BrokersMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void BrokerMinuteTick_BrokersMapEntry_DoNotUse::MergeFrom(const BrokerMinuteTick_BrokersMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata BrokerMinuteTick_BrokersMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[11]);
}

// ===================================================================

class BrokerMinuteTick::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& from_datetime(const BrokerMinuteTick* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& until_datetime(const BrokerMinuteTick* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
BrokerMinuteTick::_Internal::from_datetime(const BrokerMinuteTick* msg) {
  return *msg->from_datetime_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
BrokerMinuteTick::_Internal::until_datetime(const BrokerMinuteTick* msg) {
  return *msg->until_datetime_;
}
void BrokerMinuteTick::clear_from_datetime() {
  if (GetArenaForAllocation() == nullptr && from_datetime_ != nullptr) {
    delete from_datetime_;
  }
  from_datetime_ = nullptr;
}
void BrokerMinuteTick::clear_until_datetime() {
  if (GetArenaForAllocation() == nullptr && until_datetime_ != nullptr) {
    delete until_datetime_;
  }
  until_datetime_ = nullptr;
}
BrokerMinuteTick::BrokerMinuteTick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  brokers_map_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.BrokerMinuteTick)
}
BrokerMinuteTick::BrokerMinuteTick(const BrokerMinuteTick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  brokers_map_.MergeFrom(from.brokers_map_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_from_datetime()) {
    from_datetime_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.from_datetime_);
  } else {
    from_datetime_ = nullptr;
  }
  if (from._internal_has_until_datetime()) {
    until_datetime_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.until_datetime_);
  } else {
    until_datetime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:stock_api.BrokerMinuteTick)
}

inline void BrokerMinuteTick::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_datetime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&until_datetime_) -
    reinterpret_cast<char*>(&from_datetime_)) + sizeof(until_datetime_));
}

BrokerMinuteTick::~BrokerMinuteTick() {
  // @@protoc_insertion_point(destructor:stock_api.BrokerMinuteTick)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BrokerMinuteTick::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete from_datetime_;
  if (this != internal_default_instance()) delete until_datetime_;
}

void BrokerMinuteTick::ArenaDtor(void* object) {
  BrokerMinuteTick* _this = reinterpret_cast< BrokerMinuteTick* >(object);
  (void)_this;
  _this->brokers_map_. ~MapField();
}
inline void BrokerMinuteTick::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &BrokerMinuteTick::ArenaDtor);
  }
}
void BrokerMinuteTick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BrokerMinuteTick::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.BrokerMinuteTick)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  brokers_map_.Clear();
  code_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && from_datetime_ != nullptr) {
    delete from_datetime_;
  }
  from_datetime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && until_datetime_ != nullptr) {
    delete until_datetime_;
  }
  until_datetime_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BrokerMinuteTick::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.BrokerMinuteTick.code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp from_datetime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from_datetime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp until_datetime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_until_datetime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .stock_api.BrokerStat> brokers_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&brokers_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BrokerMinuteTick::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.BrokerMinuteTick)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.BrokerMinuteTick.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // .google.protobuf.Timestamp from_datetime = 2;
  if (this->_internal_has_from_datetime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::from_datetime(this), target, stream);
  }

  // .google.protobuf.Timestamp until_datetime = 3;
  if (this->_internal_has_until_datetime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::until_datetime(this), target, stream);
  }

  // map<string, .stock_api.BrokerStat> brokers_map = 4;
  if (!this->_internal_brokers_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::stock_api::BrokerStat >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "stock_api.BrokerMinuteTick.BrokersMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_brokers_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_brokers_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::stock_api::BrokerStat >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::stock_api::BrokerStat >::const_iterator
          it = this->_internal_brokers_map().begin();
          it != this->_internal_brokers_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = BrokerMinuteTick_BrokersMapEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::stock_api::BrokerStat >::const_iterator
          it = this->_internal_brokers_map().begin();
          it != this->_internal_brokers_map().end(); ++it) {
        target = BrokerMinuteTick_BrokersMapEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.BrokerMinuteTick)
  return target;
}

size_t BrokerMinuteTick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.BrokerMinuteTick)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .stock_api.BrokerStat> brokers_map = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_brokers_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::stock_api::BrokerStat >::const_iterator
      it = this->_internal_brokers_map().begin();
      it != this->_internal_brokers_map().end(); ++it) {
    total_size += BrokerMinuteTick_BrokersMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // .google.protobuf.Timestamp from_datetime = 2;
  if (this->_internal_has_from_datetime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_datetime_);
  }

  // .google.protobuf.Timestamp until_datetime = 3;
  if (this->_internal_has_until_datetime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *until_datetime_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BrokerMinuteTick::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BrokerMinuteTick::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BrokerMinuteTick::GetClassData() const { return &_class_data_; }

void BrokerMinuteTick::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BrokerMinuteTick *>(to)->MergeFrom(
      static_cast<const BrokerMinuteTick &>(from));
}


void BrokerMinuteTick::MergeFrom(const BrokerMinuteTick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.BrokerMinuteTick)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  brokers_map_.MergeFrom(from.brokers_map_);
  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  if (from._internal_has_from_datetime()) {
    _internal_mutable_from_datetime()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_from_datetime());
  }
  if (from._internal_has_until_datetime()) {
    _internal_mutable_until_datetime()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_until_datetime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BrokerMinuteTick::CopyFrom(const BrokerMinuteTick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.BrokerMinuteTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerMinuteTick::IsInitialized() const {
  return true;
}

void BrokerMinuteTick::InternalSwap(BrokerMinuteTick* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  brokers_map_.InternalSwap(&other->brokers_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, lhs_arena,
      &other->code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BrokerMinuteTick, until_datetime_)
      + sizeof(BrokerMinuteTick::until_datetime_)
      - PROTOBUF_FIELD_OFFSET(BrokerMinuteTick, from_datetime_)>(
          reinterpret_cast<char*>(&from_datetime_),
          reinterpret_cast<char*>(&other->from_datetime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BrokerMinuteTick::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[12]);
}

// ===================================================================

class YearHighInfo::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& high_date(const YearHighInfo* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
YearHighInfo::_Internal::high_date(const YearHighInfo* msg) {
  return *msg->high_date_;
}
void YearHighInfo::clear_high_date() {
  if (GetArenaForAllocation() == nullptr && high_date_ != nullptr) {
    delete high_date_;
  }
  high_date_ = nullptr;
}
YearHighInfo::YearHighInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.YearHighInfo)
}
YearHighInfo::YearHighInfo(const YearHighInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_high_date()) {
    high_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.high_date_);
  } else {
    high_date_ = nullptr;
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&days_distance_) -
    reinterpret_cast<char*>(&price_)) + sizeof(days_distance_));
  // @@protoc_insertion_point(copy_constructor:stock_api.YearHighInfo)
}

inline void YearHighInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&high_date_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&days_distance_) -
    reinterpret_cast<char*>(&high_date_)) + sizeof(days_distance_));
}

YearHighInfo::~YearHighInfo() {
  // @@protoc_insertion_point(destructor:stock_api.YearHighInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void YearHighInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete high_date_;
}

void YearHighInfo::ArenaDtor(void* object) {
  YearHighInfo* _this = reinterpret_cast< YearHighInfo* >(object);
  (void)_this;
}
void YearHighInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void YearHighInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void YearHighInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.YearHighInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && high_date_ != nullptr) {
    delete high_date_;
  }
  high_date_ = nullptr;
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&days_distance_) -
      reinterpret_cast<char*>(&price_)) + sizeof(days_distance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* YearHighInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp high_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_high_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 days_distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          days_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* YearHighInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.YearHighInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 price = 1;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_price(), target);
  }

  // .google.protobuf.Timestamp high_date = 2;
  if (this->_internal_has_high_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::high_date(this), target, stream);
  }

  // int32 days_distance = 3;
  if (this->_internal_days_distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_days_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.YearHighInfo)
  return target;
}

size_t YearHighInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.YearHighInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp high_date = 2;
  if (this->_internal_has_high_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *high_date_);
  }

  // int32 price = 1;
  if (this->_internal_price() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_price());
  }

  // int32 days_distance = 3;
  if (this->_internal_days_distance() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_days_distance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData YearHighInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    YearHighInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*YearHighInfo::GetClassData() const { return &_class_data_; }

void YearHighInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<YearHighInfo *>(to)->MergeFrom(
      static_cast<const YearHighInfo &>(from));
}


void YearHighInfo::MergeFrom(const YearHighInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.YearHighInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_high_date()) {
    _internal_mutable_high_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_high_date());
  }
  if (from._internal_price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from._internal_days_distance() != 0) {
    _internal_set_days_distance(from._internal_days_distance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void YearHighInfo::CopyFrom(const YearHighInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.YearHighInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YearHighInfo::IsInitialized() const {
  return true;
}

void YearHighInfo::InternalSwap(YearHighInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(YearHighInfo, days_distance_)
      + sizeof(YearHighInfo::days_distance_)
      - PROTOBUF_FIELD_OFFSET(YearHighInfo, high_date_)>(
          reinterpret_cast<char*>(&high_date_),
          reinterpret_cast<char*>(&other->high_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata YearHighInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[13]);
}

// ===================================================================

class SimulationMsg::_Internal {
 public:
  static const ::stock_api::CybosTickData& tick(const SimulationMsg* msg);
  static const ::stock_api::CybosBidAskTickData& bidask(const SimulationMsg* msg);
  static const ::stock_api::CybosSubjectTickData& subject(const SimulationMsg* msg);
  static const ::stock_api::CybosStockAlarm& alarm(const SimulationMsg* msg);
};

const ::stock_api::CybosTickData&
SimulationMsg::_Internal::tick(const SimulationMsg* msg) {
  return *msg->tick_;
}
const ::stock_api::CybosBidAskTickData&
SimulationMsg::_Internal::bidask(const SimulationMsg* msg) {
  return *msg->bidask_;
}
const ::stock_api::CybosSubjectTickData&
SimulationMsg::_Internal::subject(const SimulationMsg* msg) {
  return *msg->subject_;
}
const ::stock_api::CybosStockAlarm&
SimulationMsg::_Internal::alarm(const SimulationMsg* msg) {
  return *msg->alarm_;
}
SimulationMsg::SimulationMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.SimulationMsg)
}
SimulationMsg::SimulationMsg(const SimulationMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tick()) {
    tick_ = new ::stock_api::CybosTickData(*from.tick_);
  } else {
    tick_ = nullptr;
  }
  if (from._internal_has_bidask()) {
    bidask_ = new ::stock_api::CybosBidAskTickData(*from.bidask_);
  } else {
    bidask_ = nullptr;
  }
  if (from._internal_has_subject()) {
    subject_ = new ::stock_api::CybosSubjectTickData(*from.subject_);
  } else {
    subject_ = nullptr;
  }
  if (from._internal_has_alarm()) {
    alarm_ = new ::stock_api::CybosStockAlarm(*from.alarm_);
  } else {
    alarm_ = nullptr;
  }
  msgtype_ = from.msgtype_;
  // @@protoc_insertion_point(copy_constructor:stock_api.SimulationMsg)
}

inline void SimulationMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tick_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msgtype_) -
    reinterpret_cast<char*>(&tick_)) + sizeof(msgtype_));
}

SimulationMsg::~SimulationMsg() {
  // @@protoc_insertion_point(destructor:stock_api.SimulationMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SimulationMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete tick_;
  if (this != internal_default_instance()) delete bidask_;
  if (this != internal_default_instance()) delete subject_;
  if (this != internal_default_instance()) delete alarm_;
}

void SimulationMsg::ArenaDtor(void* object) {
  SimulationMsg* _this = reinterpret_cast< SimulationMsg* >(object);
  (void)_this;
}
void SimulationMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimulationMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimulationMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.SimulationMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && tick_ != nullptr) {
    delete tick_;
  }
  tick_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bidask_ != nullptr) {
    delete bidask_;
  }
  bidask_ = nullptr;
  if (GetArenaForAllocation() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
  if (GetArenaForAllocation() == nullptr && alarm_ != nullptr) {
    delete alarm_;
  }
  alarm_ = nullptr;
  msgtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulationMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .stock_api.SimulationMsgType msgtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msgtype(static_cast<::stock_api::SimulationMsgType>(val));
        } else
          goto handle_unusual;
        continue;
      // .stock_api.CybosTickData tick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tick(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .stock_api.CybosBidAskTickData bidask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bidask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .stock_api.CybosSubjectTickData subject = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .stock_api.CybosStockAlarm alarm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_alarm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimulationMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.SimulationMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .stock_api.SimulationMsgType msgtype = 1;
  if (this->_internal_msgtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_msgtype(), target);
  }

  // .stock_api.CybosTickData tick = 2;
  if (this->_internal_has_tick()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tick(this), target, stream);
  }

  // .stock_api.CybosBidAskTickData bidask = 3;
  if (this->_internal_has_bidask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bidask(this), target, stream);
  }

  // .stock_api.CybosSubjectTickData subject = 4;
  if (this->_internal_has_subject()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::subject(this), target, stream);
  }

  // .stock_api.CybosStockAlarm alarm = 5;
  if (this->_internal_has_alarm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::alarm(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.SimulationMsg)
  return target;
}

size_t SimulationMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.SimulationMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .stock_api.CybosTickData tick = 2;
  if (this->_internal_has_tick()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tick_);
  }

  // .stock_api.CybosBidAskTickData bidask = 3;
  if (this->_internal_has_bidask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bidask_);
  }

  // .stock_api.CybosSubjectTickData subject = 4;
  if (this->_internal_has_subject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subject_);
  }

  // .stock_api.CybosStockAlarm alarm = 5;
  if (this->_internal_has_alarm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *alarm_);
  }

  // .stock_api.SimulationMsgType msgtype = 1;
  if (this->_internal_msgtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msgtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimulationMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimulationMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimulationMsg::GetClassData() const { return &_class_data_; }

void SimulationMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimulationMsg *>(to)->MergeFrom(
      static_cast<const SimulationMsg &>(from));
}


void SimulationMsg::MergeFrom(const SimulationMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.SimulationMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tick()) {
    _internal_mutable_tick()->::stock_api::CybosTickData::MergeFrom(from._internal_tick());
  }
  if (from._internal_has_bidask()) {
    _internal_mutable_bidask()->::stock_api::CybosBidAskTickData::MergeFrom(from._internal_bidask());
  }
  if (from._internal_has_subject()) {
    _internal_mutable_subject()->::stock_api::CybosSubjectTickData::MergeFrom(from._internal_subject());
  }
  if (from._internal_has_alarm()) {
    _internal_mutable_alarm()->::stock_api::CybosStockAlarm::MergeFrom(from._internal_alarm());
  }
  if (from._internal_msgtype() != 0) {
    _internal_set_msgtype(from._internal_msgtype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimulationMsg::CopyFrom(const SimulationMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.SimulationMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationMsg::IsInitialized() const {
  return true;
}

void SimulationMsg::InternalSwap(SimulationMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimulationMsg, msgtype_)
      + sizeof(SimulationMsg::msgtype_)
      - PROTOBUF_FIELD_OFFSET(SimulationMsg, tick_)>(
          reinterpret_cast<char*>(&tick_),
          reinterpret_cast<char*>(&other->tick_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulationMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[14]);
}

// ===================================================================

class TodayTopOption::_Internal {
 public:
};

TodayTopOption::TodayTopOption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.TodayTopOption)
}
TodayTopOption::TodayTopOption(const TodayTopOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  selection_ = from.selection_;
  // @@protoc_insertion_point(copy_constructor:stock_api.TodayTopOption)
}

inline void TodayTopOption::SharedCtor() {
selection_ = 0;
}

TodayTopOption::~TodayTopOption() {
  // @@protoc_insertion_point(destructor:stock_api.TodayTopOption)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TodayTopOption::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TodayTopOption::ArenaDtor(void* object) {
  TodayTopOption* _this = reinterpret_cast< TodayTopOption* >(object);
  (void)_this;
}
void TodayTopOption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TodayTopOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TodayTopOption::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.TodayTopOption)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  selection_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TodayTopOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .stock_api.TodayTopSelection selection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_selection(static_cast<::stock_api::TodayTopSelection>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TodayTopOption::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.TodayTopOption)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .stock_api.TodayTopSelection selection = 1;
  if (this->_internal_selection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_selection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.TodayTopOption)
  return target;
}

size_t TodayTopOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.TodayTopOption)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .stock_api.TodayTopSelection selection = 1;
  if (this->_internal_selection() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_selection());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TodayTopOption::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TodayTopOption::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TodayTopOption::GetClassData() const { return &_class_data_; }

void TodayTopOption::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TodayTopOption *>(to)->MergeFrom(
      static_cast<const TodayTopOption &>(from));
}


void TodayTopOption::MergeFrom(const TodayTopOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.TodayTopOption)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_selection() != 0) {
    _internal_set_selection(from._internal_selection());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TodayTopOption::CopyFrom(const TodayTopOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.TodayTopOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TodayTopOption::IsInitialized() const {
  return true;
}

void TodayTopOption::InternalSwap(TodayTopOption* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(selection_, other->selection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TodayTopOption::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[15]);
}

// ===================================================================

class Balance::_Internal {
 public:
};

Balance::Balance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.Balance)
}
Balance::Balance(const Balance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  balance_ = from.balance_;
  // @@protoc_insertion_point(copy_constructor:stock_api.Balance)
}

inline void Balance::SharedCtor() {
balance_ = 0;
}

Balance::~Balance() {
  // @@protoc_insertion_point(destructor:stock_api.Balance)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Balance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Balance::ArenaDtor(void* object) {
  Balance* _this = reinterpret_cast< Balance* >(object);
  (void)_this;
}
void Balance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Balance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Balance::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.Balance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  balance_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Balance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 balance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Balance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.Balance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 balance = 1;
  if (this->_internal_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.Balance)
  return target;
}

size_t Balance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.Balance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 balance = 1;
  if (this->_internal_balance() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_balance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Balance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Balance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Balance::GetClassData() const { return &_class_data_; }

void Balance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Balance *>(to)->MergeFrom(
      static_cast<const Balance &>(from));
}


void Balance::MergeFrom(const Balance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.Balance)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_balance() != 0) {
    _internal_set_balance(from._internal_balance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Balance::CopyFrom(const Balance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.Balance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Balance::IsInitialized() const {
  return true;
}

void Balance::InternalSwap(Balance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(balance_, other->balance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Balance::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[16]);
}

// ===================================================================

class StockQuery::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& from_datetime(const StockQuery* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& until_datetime(const StockQuery* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StockQuery::_Internal::from_datetime(const StockQuery* msg) {
  return *msg->from_datetime_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StockQuery::_Internal::until_datetime(const StockQuery* msg) {
  return *msg->until_datetime_;
}
void StockQuery::clear_from_datetime() {
  if (GetArenaForAllocation() == nullptr && from_datetime_ != nullptr) {
    delete from_datetime_;
  }
  from_datetime_ = nullptr;
}
void StockQuery::clear_until_datetime() {
  if (GetArenaForAllocation() == nullptr && until_datetime_ != nullptr) {
    delete until_datetime_;
  }
  until_datetime_ = nullptr;
}
StockQuery::StockQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.StockQuery)
}
StockQuery::StockQuery(const StockQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_from_datetime()) {
    from_datetime_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.from_datetime_);
  } else {
    from_datetime_ = nullptr;
  }
  if (from._internal_has_until_datetime()) {
    until_datetime_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.until_datetime_);
  } else {
    until_datetime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:stock_api.StockQuery)
}

inline void StockQuery::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_datetime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&until_datetime_) -
    reinterpret_cast<char*>(&from_datetime_)) + sizeof(until_datetime_));
}

StockQuery::~StockQuery() {
  // @@protoc_insertion_point(destructor:stock_api.StockQuery)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StockQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete from_datetime_;
  if (this != internal_default_instance()) delete until_datetime_;
}

void StockQuery::ArenaDtor(void* object) {
  StockQuery* _this = reinterpret_cast< StockQuery* >(object);
  (void)_this;
}
void StockQuery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StockQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StockQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.StockQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && from_datetime_ != nullptr) {
    delete from_datetime_;
  }
  from_datetime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && until_datetime_ != nullptr) {
    delete until_datetime_;
  }
  until_datetime_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StockQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.StockQuery.code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp from_datetime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from_datetime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp until_datetime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_until_datetime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StockQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.StockQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.StockQuery.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // .google.protobuf.Timestamp from_datetime = 2;
  if (this->_internal_has_from_datetime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::from_datetime(this), target, stream);
  }

  // .google.protobuf.Timestamp until_datetime = 3;
  if (this->_internal_has_until_datetime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::until_datetime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.StockQuery)
  return target;
}

size_t StockQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.StockQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // .google.protobuf.Timestamp from_datetime = 2;
  if (this->_internal_has_from_datetime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_datetime_);
  }

  // .google.protobuf.Timestamp until_datetime = 3;
  if (this->_internal_has_until_datetime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *until_datetime_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StockQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StockQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StockQuery::GetClassData() const { return &_class_data_; }

void StockQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StockQuery *>(to)->MergeFrom(
      static_cast<const StockQuery &>(from));
}


void StockQuery::MergeFrom(const StockQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.StockQuery)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  if (from._internal_has_from_datetime()) {
    _internal_mutable_from_datetime()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_from_datetime());
  }
  if (from._internal_has_until_datetime()) {
    _internal_mutable_until_datetime()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_until_datetime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StockQuery::CopyFrom(const StockQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.StockQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockQuery::IsInitialized() const {
  return true;
}

void StockQuery::InternalSwap(StockQuery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, lhs_arena,
      &other->code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StockQuery, until_datetime_)
      + sizeof(StockQuery::until_datetime_)
      - PROTOBUF_FIELD_OFFSET(StockQuery, from_datetime_)>(
          reinterpret_cast<char*>(&from_datetime_),
          reinterpret_cast<char*>(&other->from_datetime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StockQuery::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[17]);
}

// ===================================================================

class TopList::_Internal {
 public:
};

TopList::TopList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  codelist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.TopList)
}
TopList::TopList(const TopList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      codelist_(from.codelist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_today_data_, &from.is_today_data_,
    static_cast<size_t>(reinterpret_cast<char*>(&date_) -
    reinterpret_cast<char*>(&is_today_data_)) + sizeof(date_));
  // @@protoc_insertion_point(copy_constructor:stock_api.TopList)
}

inline void TopList::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_today_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&date_) -
    reinterpret_cast<char*>(&is_today_data_)) + sizeof(date_));
}

TopList::~TopList() {
  // @@protoc_insertion_point(destructor:stock_api.TopList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TopList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TopList::ArenaDtor(void* object) {
  TopList* _this = reinterpret_cast< TopList* >(object);
  (void)_this;
}
void TopList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TopList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TopList::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.TopList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  codelist_.Clear();
  ::memset(&is_today_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&date_) -
      reinterpret_cast<char*>(&is_today_data_)) + sizeof(date_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string codelist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_codelist();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.TopList.codelist"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool is_today_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          is_today_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TopList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.TopList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string codelist = 1;
  for (int i = 0, n = this->_internal_codelist_size(); i < n; i++) {
    const auto& s = this->_internal_codelist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.TopList.codelist");
    target = stream->WriteString(1, s, target);
  }

  // bool is_today_data = 2;
  if (this->_internal_is_today_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_today_data(), target);
  }

  // uint32 date = 3;
  if (this->_internal_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.TopList)
  return target;
}

size_t TopList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.TopList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string codelist = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(codelist_.size());
  for (int i = 0, n = codelist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      codelist_.Get(i));
  }

  // bool is_today_data = 2;
  if (this->_internal_is_today_data() != 0) {
    total_size += 1 + 1;
  }

  // uint32 date = 3;
  if (this->_internal_date() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_date());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TopList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TopList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TopList::GetClassData() const { return &_class_data_; }

void TopList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TopList *>(to)->MergeFrom(
      static_cast<const TopList &>(from));
}


void TopList::MergeFrom(const TopList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.TopList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  codelist_.MergeFrom(from.codelist_);
  if (from._internal_is_today_data() != 0) {
    _internal_set_is_today_data(from._internal_is_today_data());
  }
  if (from._internal_date() != 0) {
    _internal_set_date(from._internal_date());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TopList::CopyFrom(const TopList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.TopList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopList::IsInitialized() const {
  return true;
}

void TopList::InternalSwap(TopList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  codelist_.InternalSwap(&other->codelist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TopList, date_)
      + sizeof(TopList::date_)
      - PROTOBUF_FIELD_OFFSET(TopList, is_today_data_)>(
          reinterpret_cast<char*>(&is_today_data_),
          reinterpret_cast<char*>(&other->is_today_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TopList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[18]);
}

// ===================================================================

class SimulationOperation::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_datetime(const SimulationOperation* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SimulationOperation::_Internal::start_datetime(const SimulationOperation* msg) {
  return *msg->start_datetime_;
}
void SimulationOperation::clear_start_datetime() {
  if (GetArenaForAllocation() == nullptr && start_datetime_ != nullptr) {
    delete start_datetime_;
  }
  start_datetime_ = nullptr;
}
SimulationOperation::SimulationOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.SimulationOperation)
}
SimulationOperation::SimulationOperation(const SimulationOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start_datetime()) {
    start_datetime_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_datetime_);
  } else {
    start_datetime_ = nullptr;
  }
  ::memcpy(&is_on_, &from.is_on_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&is_on_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:stock_api.SimulationOperation)
}

inline void SimulationOperation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_datetime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&start_datetime_)) + sizeof(speed_));
}

SimulationOperation::~SimulationOperation() {
  // @@protoc_insertion_point(destructor:stock_api.SimulationOperation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SimulationOperation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete start_datetime_;
}

void SimulationOperation::ArenaDtor(void* object) {
  SimulationOperation* _this = reinterpret_cast< SimulationOperation* >(object);
  (void)_this;
}
void SimulationOperation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimulationOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimulationOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.SimulationOperation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && start_datetime_ != nullptr) {
    delete start_datetime_;
  }
  start_datetime_ = nullptr;
  ::memset(&is_on_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&is_on_)) + sizeof(speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulationOperation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_on = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          is_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_datetime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_datetime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimulationOperation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.SimulationOperation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_on = 1;
  if (this->_internal_is_on() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_on(), target);
  }

  // .google.protobuf.Timestamp start_datetime = 2;
  if (this->_internal_has_start_datetime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start_datetime(this), target, stream);
  }

  // float speed = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.SimulationOperation)
  return target;
}

size_t SimulationOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.SimulationOperation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_datetime = 2;
  if (this->_internal_has_start_datetime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_datetime_);
  }

  // bool is_on = 1;
  if (this->_internal_is_on() != 0) {
    total_size += 1 + 1;
  }

  // float speed = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimulationOperation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimulationOperation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimulationOperation::GetClassData() const { return &_class_data_; }

void SimulationOperation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimulationOperation *>(to)->MergeFrom(
      static_cast<const SimulationOperation &>(from));
}


void SimulationOperation::MergeFrom(const SimulationOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.SimulationOperation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_start_datetime()) {
    _internal_mutable_start_datetime()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_datetime());
  }
  if (from._internal_is_on() != 0) {
    _internal_set_is_on(from._internal_is_on());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = from._internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _internal_set_speed(from._internal_speed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimulationOperation::CopyFrom(const SimulationOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.SimulationOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationOperation::IsInitialized() const {
  return true;
}

void SimulationOperation::InternalSwap(SimulationOperation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimulationOperation, speed_)
      + sizeof(SimulationOperation::speed_)
      - PROTOBUF_FIELD_OFFSET(SimulationOperation, start_datetime_)>(
          reinterpret_cast<char*>(&start_datetime_),
          reinterpret_cast<char*>(&other->start_datetime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulationOperation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[19]);
}

// ===================================================================

class SimulationStatus::_Internal {
 public:
};

SimulationStatus::SimulationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.SimulationStatus)
}
SimulationStatus::SimulationStatus(const SimulationStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&simulation_on_, &from.simulation_on_,
    static_cast<size_t>(reinterpret_cast<char*>(&simulation_speed_) -
    reinterpret_cast<char*>(&simulation_on_)) + sizeof(simulation_speed_));
  // @@protoc_insertion_point(copy_constructor:stock_api.SimulationStatus)
}

inline void SimulationStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&simulation_on_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&simulation_speed_) -
    reinterpret_cast<char*>(&simulation_on_)) + sizeof(simulation_speed_));
}

SimulationStatus::~SimulationStatus() {
  // @@protoc_insertion_point(destructor:stock_api.SimulationStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SimulationStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SimulationStatus::ArenaDtor(void* object) {
  SimulationStatus* _this = reinterpret_cast< SimulationStatus* >(object);
  (void)_this;
}
void SimulationStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimulationStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimulationStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.SimulationStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&simulation_on_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&simulation_speed_) -
      reinterpret_cast<char*>(&simulation_on_)) + sizeof(simulation_speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulationStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool simulation_on = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          simulation_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float simulation_speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          simulation_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimulationStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.SimulationStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool simulation_on = 1;
  if (this->_internal_simulation_on() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_simulation_on(), target);
  }

  // float simulation_speed = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_simulation_speed = this->_internal_simulation_speed();
  uint32_t raw_simulation_speed;
  memcpy(&raw_simulation_speed, &tmp_simulation_speed, sizeof(tmp_simulation_speed));
  if (raw_simulation_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_simulation_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.SimulationStatus)
  return target;
}

size_t SimulationStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.SimulationStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool simulation_on = 1;
  if (this->_internal_simulation_on() != 0) {
    total_size += 1 + 1;
  }

  // float simulation_speed = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_simulation_speed = this->_internal_simulation_speed();
  uint32_t raw_simulation_speed;
  memcpy(&raw_simulation_speed, &tmp_simulation_speed, sizeof(tmp_simulation_speed));
  if (raw_simulation_speed != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimulationStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimulationStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimulationStatus::GetClassData() const { return &_class_data_; }

void SimulationStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimulationStatus *>(to)->MergeFrom(
      static_cast<const SimulationStatus &>(from));
}


void SimulationStatus::MergeFrom(const SimulationStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.SimulationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_simulation_on() != 0) {
    _internal_set_simulation_on(from._internal_simulation_on());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_simulation_speed = from._internal_simulation_speed();
  uint32_t raw_simulation_speed;
  memcpy(&raw_simulation_speed, &tmp_simulation_speed, sizeof(tmp_simulation_speed));
  if (raw_simulation_speed != 0) {
    _internal_set_simulation_speed(from._internal_simulation_speed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimulationStatus::CopyFrom(const SimulationStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.SimulationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationStatus::IsInitialized() const {
  return true;
}

void SimulationStatus::InternalSwap(SimulationStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimulationStatus, simulation_speed_)
      + sizeof(SimulationStatus::simulation_speed_)
      - PROTOBUF_FIELD_OFFSET(SimulationStatus, simulation_on_)>(
          reinterpret_cast<char*>(&simulation_on_),
          reinterpret_cast<char*>(&other->simulation_on_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulationStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[20]);
}

// ===================================================================

class OrderMsg::_Internal {
 public:
};

OrderMsg::OrderMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.OrderMsg)
}
OrderMsg::OrderMsg(const OrderMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  order_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_num_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_num().empty()) {
    order_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_order_num(), 
      GetArenaForAllocation());
  }
  ::memcpy(&is_buy_, &from.is_buy_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_type_) -
    reinterpret_cast<char*>(&is_buy_)) + sizeof(order_type_));
  // @@protoc_insertion_point(copy_constructor:stock_api.OrderMsg)
}

inline void OrderMsg::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_num_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_buy_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&order_type_) -
    reinterpret_cast<char*>(&is_buy_)) + sizeof(order_type_));
}

OrderMsg::~OrderMsg() {
  // @@protoc_insertion_point(destructor:stock_api.OrderMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OrderMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_num_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OrderMsg::ArenaDtor(void* object) {
  OrderMsg* _this = reinterpret_cast< OrderMsg* >(object);
  (void)_this;
}
void OrderMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OrderMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.OrderMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmpty();
  order_num_.ClearToEmpty();
  ::memset(&is_buy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_type_) -
      reinterpret_cast<char*>(&is_buy_)) + sizeof(order_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.OrderMsg.code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_buy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          is_buy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 quantity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 percentage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .stock_api.OrderMethod method = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_method(static_cast<::stock_api::OrderMethod>(val));
        } else
          goto handle_unusual;
        continue;
      // string order_num = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_order_num();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.OrderMsg.order_num"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .stock_api.OrderType order_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_order_type(static_cast<::stock_api::OrderType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrderMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.OrderMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.OrderMsg.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // bool is_buy = 2;
  if (this->_internal_is_buy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_buy(), target);
  }

  // int32 price = 3;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_price(), target);
  }

  // int32 quantity = 4;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_quantity(), target);
  }

  // int32 percentage = 5;
  if (this->_internal_percentage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_percentage(), target);
  }

  // .stock_api.OrderMethod method = 6;
  if (this->_internal_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_method(), target);
  }

  // string order_num = 7;
  if (!this->_internal_order_num().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_num().data(), static_cast<int>(this->_internal_order_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.OrderMsg.order_num");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_order_num(), target);
  }

  // .stock_api.OrderType order_type = 8;
  if (this->_internal_order_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_order_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.OrderMsg)
  return target;
}

size_t OrderMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.OrderMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string order_num = 7;
  if (!this->_internal_order_num().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_num());
  }

  // bool is_buy = 2;
  if (this->_internal_is_buy() != 0) {
    total_size += 1 + 1;
  }

  // int32 price = 3;
  if (this->_internal_price() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_price());
  }

  // int32 quantity = 4;
  if (this->_internal_quantity() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_quantity());
  }

  // int32 percentage = 5;
  if (this->_internal_percentage() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_percentage());
  }

  // .stock_api.OrderMethod method = 6;
  if (this->_internal_method() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_method());
  }

  // .stock_api.OrderType order_type = 8;
  if (this->_internal_order_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_order_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OrderMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderMsg::GetClassData() const { return &_class_data_; }

void OrderMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OrderMsg *>(to)->MergeFrom(
      static_cast<const OrderMsg &>(from));
}


void OrderMsg::MergeFrom(const OrderMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.OrderMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  if (!from._internal_order_num().empty()) {
    _internal_set_order_num(from._internal_order_num());
  }
  if (from._internal_is_buy() != 0) {
    _internal_set_is_buy(from._internal_is_buy());
  }
  if (from._internal_price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from._internal_quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (from._internal_percentage() != 0) {
    _internal_set_percentage(from._internal_percentage());
  }
  if (from._internal_method() != 0) {
    _internal_set_method(from._internal_method());
  }
  if (from._internal_order_type() != 0) {
    _internal_set_order_type(from._internal_order_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderMsg::CopyFrom(const OrderMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.OrderMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderMsg::IsInitialized() const {
  return true;
}

void OrderMsg::InternalSwap(OrderMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, lhs_arena,
      &other->code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &order_num_, lhs_arena,
      &other->order_num_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderMsg, order_type_)
      + sizeof(OrderMsg::order_type_)
      - PROTOBUF_FIELD_OFFSET(OrderMsg, is_buy_)>(
          reinterpret_cast<char*>(&is_buy_),
          reinterpret_cast<char*>(&other->is_buy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[21]);
}

// ===================================================================

class TradeMsg::_Internal {
 public:
  static const ::stock_api::OrderMsg& order_msg(const TradeMsg* msg);
};

const ::stock_api::OrderMsg&
TradeMsg::_Internal::order_msg(const TradeMsg* msg) {
  return *msg->order_msg_;
}
TradeMsg::TradeMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.TradeMsg)
}
TradeMsg::TradeMsg(const TradeMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_order_msg()) {
    order_msg_ = new ::stock_api::OrderMsg(*from.order_msg_);
  } else {
    order_msg_ = nullptr;
  }
  msg_type_ = from.msg_type_;
  // @@protoc_insertion_point(copy_constructor:stock_api.TradeMsg)
}

inline void TradeMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&order_msg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&order_msg_)) + sizeof(msg_type_));
}

TradeMsg::~TradeMsg() {
  // @@protoc_insertion_point(destructor:stock_api.TradeMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TradeMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete order_msg_;
}

void TradeMsg::ArenaDtor(void* object) {
  TradeMsg* _this = reinterpret_cast< TradeMsg* >(object);
  (void)_this;
}
void TradeMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradeMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TradeMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.TradeMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && order_msg_ != nullptr) {
    delete order_msg_;
  }
  order_msg_ = nullptr;
  msg_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradeMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .stock_api.OrderMsg order_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TradeMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.TradeMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msg_type = 1;
  if (this->_internal_msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_msg_type(), target);
  }

  // .stock_api.OrderMsg order_msg = 2;
  if (this->_internal_has_order_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::order_msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.TradeMsg)
  return target;
}

size_t TradeMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.TradeMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .stock_api.OrderMsg order_msg = 2;
  if (this->_internal_has_order_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_msg_);
  }

  // int32 msg_type = 1;
  if (this->_internal_msg_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_msg_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TradeMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TradeMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TradeMsg::GetClassData() const { return &_class_data_; }

void TradeMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TradeMsg *>(to)->MergeFrom(
      static_cast<const TradeMsg &>(from));
}


void TradeMsg::MergeFrom(const TradeMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.TradeMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_order_msg()) {
    _internal_mutable_order_msg()->::stock_api::OrderMsg::MergeFrom(from._internal_order_msg());
  }
  if (from._internal_msg_type() != 0) {
    _internal_set_msg_type(from._internal_msg_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TradeMsg::CopyFrom(const TradeMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.TradeMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeMsg::IsInitialized() const {
  return true;
}

void TradeMsg::InternalSwap(TradeMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradeMsg, msg_type_)
      + sizeof(TradeMsg::msg_type_)
      - PROTOBUF_FIELD_OFFSET(TradeMsg, order_msg_)>(
          reinterpret_cast<char*>(&order_msg_),
          reinterpret_cast<char*>(&other->order_msg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[22]);
}

// ===================================================================

class CybosOrderReturn::_Internal {
 public:
};

CybosOrderReturn::CybosOrderReturn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.CybosOrderReturn)
}
CybosOrderReturn::CybosOrderReturn(const CybosOrderReturn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_num_) -
    reinterpret_cast<char*>(&result_)) + sizeof(order_num_));
  // @@protoc_insertion_point(copy_constructor:stock_api.CybosOrderReturn)
}

inline void CybosOrderReturn::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&order_num_) -
    reinterpret_cast<char*>(&result_)) + sizeof(order_num_));
}

CybosOrderReturn::~CybosOrderReturn() {
  // @@protoc_insertion_point(destructor:stock_api.CybosOrderReturn)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CybosOrderReturn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CybosOrderReturn::ArenaDtor(void* object) {
  CybosOrderReturn* _this = reinterpret_cast< CybosOrderReturn* >(object);
  (void)_this;
}
void CybosOrderReturn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CybosOrderReturn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CybosOrderReturn::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.CybosOrderReturn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_num_) -
      reinterpret_cast<char*>(&result_)) + sizeof(order_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CybosOrderReturn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosOrderReturn.msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 order_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          order_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CybosOrderReturn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.CybosOrderReturn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosOrderReturn.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // int32 order_num = 3;
  if (this->_internal_order_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_order_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.CybosOrderReturn)
  return target;
}

size_t CybosOrderReturn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.CybosOrderReturn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  // int32 order_num = 3;
  if (this->_internal_order_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_order_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CybosOrderReturn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CybosOrderReturn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CybosOrderReturn::GetClassData() const { return &_class_data_; }

void CybosOrderReturn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CybosOrderReturn *>(to)->MergeFrom(
      static_cast<const CybosOrderReturn &>(from));
}


void CybosOrderReturn::MergeFrom(const CybosOrderReturn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.CybosOrderReturn)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from._internal_order_num() != 0) {
    _internal_set_order_num(from._internal_order_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CybosOrderReturn::CopyFrom(const CybosOrderReturn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.CybosOrderReturn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CybosOrderReturn::IsInitialized() const {
  return true;
}

void CybosOrderReturn::InternalSwap(CybosOrderReturn* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CybosOrderReturn, order_num_)
      + sizeof(CybosOrderReturn::order_num_)
      - PROTOBUF_FIELD_OFFSET(CybosOrderReturn, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CybosOrderReturn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[23]);
}

// ===================================================================

class Report::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_update_datetime(const Report* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Report::_Internal::last_update_datetime(const Report* msg) {
  return *msg->last_update_datetime_;
}
void Report::clear_last_update_datetime() {
  if (GetArenaForAllocation() == nullptr && last_update_datetime_ != nullptr) {
    delete last_update_datetime_;
  }
  last_update_datetime_ = nullptr;
}
Report::Report(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.Report)
}
Report::Report(const Report& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    company_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_company_name().empty()) {
    company_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_company_name(), 
      GetArenaForAllocation());
  }
  internal_order_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    internal_order_num_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_internal_order_num().empty()) {
    internal_order_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_internal_order_num(), 
      GetArenaForAllocation());
  }
  order_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_num_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_num().empty()) {
    order_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_order_num(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_last_update_datetime()) {
    last_update_datetime_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_update_datetime_);
  } else {
    last_update_datetime_ = nullptr;
  }
  ::memcpy(&is_buy_, &from.is_buy_,
    static_cast<size_t>(reinterpret_cast<char*>(&traded_price_) -
    reinterpret_cast<char*>(&is_buy_)) + sizeof(traded_price_));
  // @@protoc_insertion_point(copy_constructor:stock_api.Report)
}

inline void Report::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  company_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
internal_order_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  internal_order_num_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_num_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&last_update_datetime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&traded_price_) -
    reinterpret_cast<char*>(&last_update_datetime_)) + sizeof(traded_price_));
}

Report::~Report() {
  // @@protoc_insertion_point(destructor:stock_api.Report)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Report::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  internal_order_num_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_num_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete last_update_datetime_;
}

void Report::ArenaDtor(void* object) {
  Report* _this = reinterpret_cast< Report* >(object);
  (void)_this;
}
void Report::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Report::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Report::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.Report)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmpty();
  company_name_.ClearToEmpty();
  internal_order_num_.ClearToEmpty();
  order_num_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && last_update_datetime_ != nullptr) {
    delete last_update_datetime_;
  }
  last_update_datetime_ = nullptr;
  ::memset(&is_buy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&traded_price_) -
      reinterpret_cast<char*>(&is_buy_)) + sizeof(traded_price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Report::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.Report.code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string company_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_company_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.Report.company_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_buy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          is_buy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_update_datetime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_update_datetime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .stock_api.OrderStatusFlag flag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_flag(static_cast<::stock_api::OrderStatusFlag>(val));
        } else
          goto handle_unusual;
        continue;
      // .stock_api.OrderMethod method = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_method(static_cast<::stock_api::OrderMethod>(val));
        } else
          goto handle_unusual;
        continue;
      // float hold_price = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          hold_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 quantity = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string internal_order_num = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_internal_order_num();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.Report.internal_order_num"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string order_num = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_order_num();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.Report.order_num"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 traded_quantity = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          traded_quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float traded_price = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          traded_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Report::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.Report)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.Report.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // string company_name = 2;
  if (!this->_internal_company_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company_name().data(), static_cast<int>(this->_internal_company_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.Report.company_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_company_name(), target);
  }

  // bool is_buy = 3;
  if (this->_internal_is_buy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_buy(), target);
  }

  // .google.protobuf.Timestamp last_update_datetime = 4;
  if (this->_internal_has_last_update_datetime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::last_update_datetime(this), target, stream);
  }

  // .stock_api.OrderStatusFlag flag = 5;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_flag(), target);
  }

  // .stock_api.OrderMethod method = 6;
  if (this->_internal_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_method(), target);
  }

  // float hold_price = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hold_price = this->_internal_hold_price();
  uint32_t raw_hold_price;
  memcpy(&raw_hold_price, &tmp_hold_price, sizeof(tmp_hold_price));
  if (raw_hold_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_hold_price(), target);
  }

  // int32 price = 8;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_price(), target);
  }

  // int32 quantity = 9;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_quantity(), target);
  }

  // string internal_order_num = 10;
  if (!this->_internal_internal_order_num().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_internal_order_num().data(), static_cast<int>(this->_internal_internal_order_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.Report.internal_order_num");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_internal_order_num(), target);
  }

  // string order_num = 11;
  if (!this->_internal_order_num().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_num().data(), static_cast<int>(this->_internal_order_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.Report.order_num");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_order_num(), target);
  }

  // int32 traded_quantity = 12;
  if (this->_internal_traded_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_traded_quantity(), target);
  }

  // float traded_price = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_traded_price = this->_internal_traded_price();
  uint32_t raw_traded_price;
  memcpy(&raw_traded_price, &tmp_traded_price, sizeof(tmp_traded_price));
  if (raw_traded_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_traded_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.Report)
  return target;
}

size_t Report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.Report)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string company_name = 2;
  if (!this->_internal_company_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company_name());
  }

  // string internal_order_num = 10;
  if (!this->_internal_internal_order_num().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_internal_order_num());
  }

  // string order_num = 11;
  if (!this->_internal_order_num().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_num());
  }

  // .google.protobuf.Timestamp last_update_datetime = 4;
  if (this->_internal_has_last_update_datetime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_update_datetime_);
  }

  // bool is_buy = 3;
  if (this->_internal_is_buy() != 0) {
    total_size += 1 + 1;
  }

  // .stock_api.OrderStatusFlag flag = 5;
  if (this->_internal_flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_flag());
  }

  // .stock_api.OrderMethod method = 6;
  if (this->_internal_method() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_method());
  }

  // float hold_price = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hold_price = this->_internal_hold_price();
  uint32_t raw_hold_price;
  memcpy(&raw_hold_price, &tmp_hold_price, sizeof(tmp_hold_price));
  if (raw_hold_price != 0) {
    total_size += 1 + 4;
  }

  // int32 price = 8;
  if (this->_internal_price() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_price());
  }

  // int32 quantity = 9;
  if (this->_internal_quantity() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_quantity());
  }

  // int32 traded_quantity = 12;
  if (this->_internal_traded_quantity() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_traded_quantity());
  }

  // float traded_price = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_traded_price = this->_internal_traded_price();
  uint32_t raw_traded_price;
  memcpy(&raw_traded_price, &tmp_traded_price, sizeof(tmp_traded_price));
  if (raw_traded_price != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Report::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Report::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Report::GetClassData() const { return &_class_data_; }

void Report::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Report *>(to)->MergeFrom(
      static_cast<const Report &>(from));
}


void Report::MergeFrom(const Report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.Report)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  if (!from._internal_company_name().empty()) {
    _internal_set_company_name(from._internal_company_name());
  }
  if (!from._internal_internal_order_num().empty()) {
    _internal_set_internal_order_num(from._internal_internal_order_num());
  }
  if (!from._internal_order_num().empty()) {
    _internal_set_order_num(from._internal_order_num());
  }
  if (from._internal_has_last_update_datetime()) {
    _internal_mutable_last_update_datetime()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_update_datetime());
  }
  if (from._internal_is_buy() != 0) {
    _internal_set_is_buy(from._internal_is_buy());
  }
  if (from._internal_flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
  if (from._internal_method() != 0) {
    _internal_set_method(from._internal_method());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hold_price = from._internal_hold_price();
  uint32_t raw_hold_price;
  memcpy(&raw_hold_price, &tmp_hold_price, sizeof(tmp_hold_price));
  if (raw_hold_price != 0) {
    _internal_set_hold_price(from._internal_hold_price());
  }
  if (from._internal_price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from._internal_quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (from._internal_traded_quantity() != 0) {
    _internal_set_traded_quantity(from._internal_traded_quantity());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_traded_price = from._internal_traded_price();
  uint32_t raw_traded_price;
  memcpy(&raw_traded_price, &tmp_traded_price, sizeof(tmp_traded_price));
  if (raw_traded_price != 0) {
    _internal_set_traded_price(from._internal_traded_price());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Report::CopyFrom(const Report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.Report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Report::IsInitialized() const {
  return true;
}

void Report::InternalSwap(Report* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, lhs_arena,
      &other->code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &company_name_, lhs_arena,
      &other->company_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &internal_order_num_, lhs_arena,
      &other->internal_order_num_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &order_num_, lhs_arena,
      &other->order_num_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Report, traded_price_)
      + sizeof(Report::traded_price_)
      - PROTOBUF_FIELD_OFFSET(Report, last_update_datetime_)>(
          reinterpret_cast<char*>(&last_update_datetime_),
          reinterpret_cast<char*>(&other->last_update_datetime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Report::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[24]);
}

// ===================================================================

class OrderResult::_Internal {
 public:
};

OrderResult::OrderResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  report_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.OrderResult)
}
OrderResult::OrderResult(const OrderResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      report_(from.report_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  current_balance_ = from.current_balance_;
  // @@protoc_insertion_point(copy_constructor:stock_api.OrderResult)
}

inline void OrderResult::SharedCtor() {
current_balance_ = 0;
}

OrderResult::~OrderResult() {
  // @@protoc_insertion_point(destructor:stock_api.OrderResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OrderResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OrderResult::ArenaDtor(void* object) {
  OrderResult* _this = reinterpret_cast< OrderResult* >(object);
  (void)_this;
}
void OrderResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OrderResult::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.OrderResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  report_.Clear();
  current_balance_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .stock_api.Report report = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_report(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 current_balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          current_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrderResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.OrderResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .stock_api.Report report = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_report_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_report(i), target, stream);
  }

  // int32 current_balance = 2;
  if (this->_internal_current_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_current_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.OrderResult)
  return target;
}

size_t OrderResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.OrderResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .stock_api.Report report = 1;
  total_size += 1UL * this->_internal_report_size();
  for (const auto& msg : this->report_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 current_balance = 2;
  if (this->_internal_current_balance() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_current_balance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OrderResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderResult::GetClassData() const { return &_class_data_; }

void OrderResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OrderResult *>(to)->MergeFrom(
      static_cast<const OrderResult &>(from));
}


void OrderResult::MergeFrom(const OrderResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.OrderResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  report_.MergeFrom(from.report_);
  if (from._internal_current_balance() != 0) {
    _internal_set_current_balance(from._internal_current_balance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderResult::CopyFrom(const OrderResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.OrderResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderResult::IsInitialized() const {
  return true;
}

void OrderResult::InternalSwap(OrderResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  report_.InternalSwap(&other->report_);
  swap(current_balance_, other->current_balance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[25]);
}

// ===================================================================

class CybosOrderResult::_Internal {
 public:
};

CybosOrderResult::CybosOrderResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.CybosOrderResult)
}
CybosOrderResult::CybosOrderResult(const CybosOrderResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  order_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_number().empty()) {
    order_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_order_number(), 
      GetArenaForAllocation());
  }
  ::memcpy(&flag_, &from.flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_quantity_) -
    reinterpret_cast<char*>(&flag_)) + sizeof(total_quantity_));
  // @@protoc_insertion_point(copy_constructor:stock_api.CybosOrderResult)
}

inline void CybosOrderResult::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&flag_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_quantity_) -
    reinterpret_cast<char*>(&flag_)) + sizeof(total_quantity_));
}

CybosOrderResult::~CybosOrderResult() {
  // @@protoc_insertion_point(destructor:stock_api.CybosOrderResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CybosOrderResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CybosOrderResult::ArenaDtor(void* object) {
  CybosOrderResult* _this = reinterpret_cast< CybosOrderResult* >(object);
  (void)_this;
}
void CybosOrderResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CybosOrderResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CybosOrderResult::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.CybosOrderResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmpty();
  order_number_.ClearToEmpty();
  ::memset(&flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_quantity_) -
      reinterpret_cast<char*>(&flag_)) + sizeof(total_quantity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CybosOrderResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .stock_api.OrderStatusFlag flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_flag(static_cast<::stock_api::OrderStatusFlag>(val));
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosOrderResult.code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string order_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_order_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosOrderResult.order_number"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 quantity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_buy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          is_buy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_quantity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          total_quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CybosOrderResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.CybosOrderResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .stock_api.OrderStatusFlag flag = 1;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_flag(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosOrderResult.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // string order_number = 3;
  if (!this->_internal_order_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_number().data(), static_cast<int>(this->_internal_order_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosOrderResult.order_number");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_order_number(), target);
  }

  // int32 quantity = 4;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_quantity(), target);
  }

  // int32 price = 5;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_price(), target);
  }

  // bool is_buy = 6;
  if (this->_internal_is_buy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_buy(), target);
  }

  // int32 total_quantity = 7;
  if (this->_internal_total_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_total_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.CybosOrderResult)
  return target;
}

size_t CybosOrderResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.CybosOrderResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string order_number = 3;
  if (!this->_internal_order_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_number());
  }

  // .stock_api.OrderStatusFlag flag = 1;
  if (this->_internal_flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_flag());
  }

  // int32 quantity = 4;
  if (this->_internal_quantity() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_quantity());
  }

  // int32 price = 5;
  if (this->_internal_price() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_price());
  }

  // bool is_buy = 6;
  if (this->_internal_is_buy() != 0) {
    total_size += 1 + 1;
  }

  // int32 total_quantity = 7;
  if (this->_internal_total_quantity() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_total_quantity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CybosOrderResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CybosOrderResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CybosOrderResult::GetClassData() const { return &_class_data_; }

void CybosOrderResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CybosOrderResult *>(to)->MergeFrom(
      static_cast<const CybosOrderResult &>(from));
}


void CybosOrderResult::MergeFrom(const CybosOrderResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.CybosOrderResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  if (!from._internal_order_number().empty()) {
    _internal_set_order_number(from._internal_order_number());
  }
  if (from._internal_flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
  if (from._internal_quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (from._internal_price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from._internal_is_buy() != 0) {
    _internal_set_is_buy(from._internal_is_buy());
  }
  if (from._internal_total_quantity() != 0) {
    _internal_set_total_quantity(from._internal_total_quantity());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CybosOrderResult::CopyFrom(const CybosOrderResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.CybosOrderResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CybosOrderResult::IsInitialized() const {
  return true;
}

void CybosOrderResult::InternalSwap(CybosOrderResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, lhs_arena,
      &other->code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &order_number_, lhs_arena,
      &other->order_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CybosOrderResult, total_quantity_)
      + sizeof(CybosOrderResult::total_quantity_)
      - PROTOBUF_FIELD_OFFSET(CybosOrderResult, flag_)>(
          reinterpret_cast<char*>(&flag_),
          reinterpret_cast<char*>(&other->flag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CybosOrderResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[26]);
}

// ===================================================================

class ListType::_Internal {
 public:
};

ListType::ListType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.ListType)
}
ListType::ListType(const ListType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type_name().empty()) {
    type_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:stock_api.ListType)
}

inline void ListType::SharedCtor() {
type_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListType::~ListType() {
  // @@protoc_insertion_point(destructor:stock_api.ListType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListType::ArenaDtor(void* object) {
  ListType* _this = reinterpret_cast< ListType* >(object);
  (void)_this;
}
void ListType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListType::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.ListType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.ListType.type_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.ListType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type_name = 1;
  if (!this->_internal_type_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type_name().data(), static_cast<int>(this->_internal_type_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.ListType.type_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.ListType)
  return target;
}

size_t ListType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.ListType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type_name = 1;
  if (!this->_internal_type_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListType::GetClassData() const { return &_class_data_; }

void ListType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListType *>(to)->MergeFrom(
      static_cast<const ListType &>(from));
}


void ListType::MergeFrom(const ListType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.ListType)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type_name().empty()) {
    _internal_set_type_name(from._internal_type_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListType::CopyFrom(const ListType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.ListType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListType::IsInitialized() const {
  return true;
}

void ListType::InternalSwap(ListType* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_name_, lhs_arena,
      &other->type_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[27]);
}

// ===================================================================

class CompanyName::_Internal {
 public:
};

CompanyName::CompanyName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.CompanyName)
}
CompanyName::CompanyName(const CompanyName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    company_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_company_name().empty()) {
    company_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_company_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:stock_api.CompanyName)
}

inline void CompanyName::SharedCtor() {
company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  company_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CompanyName::~CompanyName() {
  // @@protoc_insertion_point(destructor:stock_api.CompanyName)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CompanyName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  company_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CompanyName::ArenaDtor(void* object) {
  CompanyName* _this = reinterpret_cast< CompanyName* >(object);
  (void)_this;
}
void CompanyName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompanyName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CompanyName::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.CompanyName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  company_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompanyName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string company_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_company_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CompanyName.company_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompanyName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.CompanyName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string company_name = 1;
  if (!this->_internal_company_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company_name().data(), static_cast<int>(this->_internal_company_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CompanyName.company_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_company_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.CompanyName)
  return target;
}

size_t CompanyName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.CompanyName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string company_name = 1;
  if (!this->_internal_company_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompanyName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CompanyName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompanyName::GetClassData() const { return &_class_data_; }

void CompanyName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CompanyName *>(to)->MergeFrom(
      static_cast<const CompanyName &>(from));
}


void CompanyName::MergeFrom(const CompanyName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.CompanyName)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_company_name().empty()) {
    _internal_set_company_name(from._internal_company_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompanyName::CopyFrom(const CompanyName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.CompanyName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompanyName::IsInitialized() const {
  return true;
}

void CompanyName::InternalSwap(CompanyName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &company_name_, lhs_arena,
      &other->company_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CompanyName::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[28]);
}

// ===================================================================

class PastMinuteQuery::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& today(const PastMinuteQuery* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
PastMinuteQuery::_Internal::today(const PastMinuteQuery* msg) {
  return *msg->today_;
}
void PastMinuteQuery::clear_today() {
  if (GetArenaForAllocation() == nullptr && today_ != nullptr) {
    delete today_;
  }
  today_ = nullptr;
}
PastMinuteQuery::PastMinuteQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.PastMinuteQuery)
}
PastMinuteQuery::PastMinuteQuery(const PastMinuteQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_today()) {
    today_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.today_);
  } else {
    today_ = nullptr;
  }
  count_of_days_ = from.count_of_days_;
  // @@protoc_insertion_point(copy_constructor:stock_api.PastMinuteQuery)
}

inline void PastMinuteQuery::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&today_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_of_days_) -
    reinterpret_cast<char*>(&today_)) + sizeof(count_of_days_));
}

PastMinuteQuery::~PastMinuteQuery() {
  // @@protoc_insertion_point(destructor:stock_api.PastMinuteQuery)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PastMinuteQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete today_;
}

void PastMinuteQuery::ArenaDtor(void* object) {
  PastMinuteQuery* _this = reinterpret_cast< PastMinuteQuery* >(object);
  (void)_this;
}
void PastMinuteQuery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PastMinuteQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PastMinuteQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.PastMinuteQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && today_ != nullptr) {
    delete today_;
  }
  today_ = nullptr;
  count_of_days_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PastMinuteQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.PastMinuteQuery.code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 count_of_days = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          count_of_days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp today = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_today(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PastMinuteQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.PastMinuteQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.PastMinuteQuery.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // uint32 count_of_days = 2;
  if (this->_internal_count_of_days() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count_of_days(), target);
  }

  // .google.protobuf.Timestamp today = 3;
  if (this->_internal_has_today()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::today(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.PastMinuteQuery)
  return target;
}

size_t PastMinuteQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.PastMinuteQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // .google.protobuf.Timestamp today = 3;
  if (this->_internal_has_today()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *today_);
  }

  // uint32 count_of_days = 2;
  if (this->_internal_count_of_days() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_count_of_days());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PastMinuteQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PastMinuteQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PastMinuteQuery::GetClassData() const { return &_class_data_; }

void PastMinuteQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PastMinuteQuery *>(to)->MergeFrom(
      static_cast<const PastMinuteQuery &>(from));
}


void PastMinuteQuery::MergeFrom(const PastMinuteQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.PastMinuteQuery)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  if (from._internal_has_today()) {
    _internal_mutable_today()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_today());
  }
  if (from._internal_count_of_days() != 0) {
    _internal_set_count_of_days(from._internal_count_of_days());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PastMinuteQuery::CopyFrom(const PastMinuteQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.PastMinuteQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PastMinuteQuery::IsInitialized() const {
  return true;
}

void PastMinuteQuery::InternalSwap(PastMinuteQuery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, lhs_arena,
      &other->code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PastMinuteQuery, count_of_days_)
      + sizeof(PastMinuteQuery::count_of_days_)
      - PROTOBUF_FIELD_OFFSET(PastMinuteQuery, today_)>(
          reinterpret_cast<char*>(&today_),
          reinterpret_cast<char*>(&other->today_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PastMinuteQuery::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[29]);
}

// ===================================================================

class CybosDayData::_Internal {
 public:
};

CybosDayData::CybosDayData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.CybosDayData)
}
CybosDayData::CybosDayData(const CybosDayData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&date_, &from.date_,
    static_cast<size_t>(reinterpret_cast<char*>(&institution_cum_buy_volume_) -
    reinterpret_cast<char*>(&date_)) + sizeof(institution_cum_buy_volume_));
  // @@protoc_insertion_point(copy_constructor:stock_api.CybosDayData)
}

inline void CybosDayData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&date_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&institution_cum_buy_volume_) -
    reinterpret_cast<char*>(&date_)) + sizeof(institution_cum_buy_volume_));
}

CybosDayData::~CybosDayData() {
  // @@protoc_insertion_point(destructor:stock_api.CybosDayData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CybosDayData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CybosDayData::ArenaDtor(void* object) {
  CybosDayData* _this = reinterpret_cast< CybosDayData* >(object);
  (void)_this;
}
void CybosDayData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CybosDayData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CybosDayData::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.CybosDayData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&institution_cum_buy_volume_) -
      reinterpret_cast<char*>(&date_)) + sizeof(institution_cum_buy_volume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CybosDayData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 start_price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          start_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 highest_price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          highest_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 lowest_price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          lowest_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 close_price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          close_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 volume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 amount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 cum_sell_volume = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          cum_sell_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 cum_buy_volume = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          cum_buy_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 foreigner_hold_volume = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          foreigner_hold_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float foreigner_hold_rate = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          foreigner_hold_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int64 institution_buy_volume = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          institution_buy_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 institution_cum_buy_volume = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          institution_cum_buy_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_synchronized_bidding = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          is_synchronized_bidding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CybosDayData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.CybosDayData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 date = 1;
  if (this->_internal_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_date(), target);
  }

  // uint32 time = 2;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time(), target);
  }

  // uint32 start_price = 3;
  if (this->_internal_start_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_start_price(), target);
  }

  // uint32 highest_price = 4;
  if (this->_internal_highest_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_highest_price(), target);
  }

  // uint32 lowest_price = 5;
  if (this->_internal_lowest_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_lowest_price(), target);
  }

  // uint32 close_price = 6;
  if (this->_internal_close_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_close_price(), target);
  }

  // int64 volume = 7;
  if (this->_internal_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_volume(), target);
  }

  // uint64 amount = 8;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_amount(), target);
  }

  // uint64 cum_sell_volume = 9;
  if (this->_internal_cum_sell_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_cum_sell_volume(), target);
  }

  // uint64 cum_buy_volume = 10;
  if (this->_internal_cum_buy_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_cum_buy_volume(), target);
  }

  // int64 foreigner_hold_volume = 11;
  if (this->_internal_foreigner_hold_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_foreigner_hold_volume(), target);
  }

  // float foreigner_hold_rate = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_foreigner_hold_rate = this->_internal_foreigner_hold_rate();
  uint32_t raw_foreigner_hold_rate;
  memcpy(&raw_foreigner_hold_rate, &tmp_foreigner_hold_rate, sizeof(tmp_foreigner_hold_rate));
  if (raw_foreigner_hold_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_foreigner_hold_rate(), target);
  }

  // int64 institution_buy_volume = 13;
  if (this->_internal_institution_buy_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_institution_buy_volume(), target);
  }

  // int64 institution_cum_buy_volume = 14;
  if (this->_internal_institution_cum_buy_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_institution_cum_buy_volume(), target);
  }

  // bool is_synchronized_bidding = 15;
  if (this->_internal_is_synchronized_bidding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_is_synchronized_bidding(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.CybosDayData)
  return target;
}

size_t CybosDayData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.CybosDayData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 date = 1;
  if (this->_internal_date() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_date());
  }

  // uint32 time = 2;
  if (this->_internal_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time());
  }

  // uint32 start_price = 3;
  if (this->_internal_start_price() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_start_price());
  }

  // uint32 highest_price = 4;
  if (this->_internal_highest_price() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_highest_price());
  }

  // uint32 lowest_price = 5;
  if (this->_internal_lowest_price() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_lowest_price());
  }

  // uint32 close_price = 6;
  if (this->_internal_close_price() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_close_price());
  }

  // int64 volume = 7;
  if (this->_internal_volume() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_volume());
  }

  // uint64 amount = 8;
  if (this->_internal_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
  }

  // uint64 cum_sell_volume = 9;
  if (this->_internal_cum_sell_volume() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_cum_sell_volume());
  }

  // uint64 cum_buy_volume = 10;
  if (this->_internal_cum_buy_volume() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_cum_buy_volume());
  }

  // int64 foreigner_hold_volume = 11;
  if (this->_internal_foreigner_hold_volume() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_foreigner_hold_volume());
  }

  // int64 institution_buy_volume = 13;
  if (this->_internal_institution_buy_volume() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_institution_buy_volume());
  }

  // float foreigner_hold_rate = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_foreigner_hold_rate = this->_internal_foreigner_hold_rate();
  uint32_t raw_foreigner_hold_rate;
  memcpy(&raw_foreigner_hold_rate, &tmp_foreigner_hold_rate, sizeof(tmp_foreigner_hold_rate));
  if (raw_foreigner_hold_rate != 0) {
    total_size += 1 + 4;
  }

  // bool is_synchronized_bidding = 15;
  if (this->_internal_is_synchronized_bidding() != 0) {
    total_size += 1 + 1;
  }

  // int64 institution_cum_buy_volume = 14;
  if (this->_internal_institution_cum_buy_volume() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_institution_cum_buy_volume());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CybosDayData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CybosDayData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CybosDayData::GetClassData() const { return &_class_data_; }

void CybosDayData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CybosDayData *>(to)->MergeFrom(
      static_cast<const CybosDayData &>(from));
}


void CybosDayData::MergeFrom(const CybosDayData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.CybosDayData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_date() != 0) {
    _internal_set_date(from._internal_date());
  }
  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from._internal_start_price() != 0) {
    _internal_set_start_price(from._internal_start_price());
  }
  if (from._internal_highest_price() != 0) {
    _internal_set_highest_price(from._internal_highest_price());
  }
  if (from._internal_lowest_price() != 0) {
    _internal_set_lowest_price(from._internal_lowest_price());
  }
  if (from._internal_close_price() != 0) {
    _internal_set_close_price(from._internal_close_price());
  }
  if (from._internal_volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from._internal_cum_sell_volume() != 0) {
    _internal_set_cum_sell_volume(from._internal_cum_sell_volume());
  }
  if (from._internal_cum_buy_volume() != 0) {
    _internal_set_cum_buy_volume(from._internal_cum_buy_volume());
  }
  if (from._internal_foreigner_hold_volume() != 0) {
    _internal_set_foreigner_hold_volume(from._internal_foreigner_hold_volume());
  }
  if (from._internal_institution_buy_volume() != 0) {
    _internal_set_institution_buy_volume(from._internal_institution_buy_volume());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_foreigner_hold_rate = from._internal_foreigner_hold_rate();
  uint32_t raw_foreigner_hold_rate;
  memcpy(&raw_foreigner_hold_rate, &tmp_foreigner_hold_rate, sizeof(tmp_foreigner_hold_rate));
  if (raw_foreigner_hold_rate != 0) {
    _internal_set_foreigner_hold_rate(from._internal_foreigner_hold_rate());
  }
  if (from._internal_is_synchronized_bidding() != 0) {
    _internal_set_is_synchronized_bidding(from._internal_is_synchronized_bidding());
  }
  if (from._internal_institution_cum_buy_volume() != 0) {
    _internal_set_institution_cum_buy_volume(from._internal_institution_cum_buy_volume());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CybosDayData::CopyFrom(const CybosDayData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.CybosDayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CybosDayData::IsInitialized() const {
  return true;
}

void CybosDayData::InternalSwap(CybosDayData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CybosDayData, institution_cum_buy_volume_)
      + sizeof(CybosDayData::institution_cum_buy_volume_)
      - PROTOBUF_FIELD_OFFSET(CybosDayData, date_)>(
          reinterpret_cast<char*>(&date_),
          reinterpret_cast<char*>(&other->date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CybosDayData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[30]);
}

// ===================================================================

class CybosDayDatas::_Internal {
 public:
};

CybosDayDatas::CybosDayDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  day_data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.CybosDayDatas)
}
CybosDayDatas::CybosDayDatas(const CybosDayDatas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      day_data_(from.day_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:stock_api.CybosDayDatas)
}

inline void CybosDayDatas::SharedCtor() {
}

CybosDayDatas::~CybosDayDatas() {
  // @@protoc_insertion_point(destructor:stock_api.CybosDayDatas)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CybosDayDatas::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CybosDayDatas::ArenaDtor(void* object) {
  CybosDayDatas* _this = reinterpret_cast< CybosDayDatas* >(object);
  (void)_this;
}
void CybosDayDatas::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CybosDayDatas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CybosDayDatas::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.CybosDayDatas)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  day_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CybosDayDatas::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .stock_api.CybosDayData day_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_day_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CybosDayDatas::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.CybosDayDatas)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .stock_api.CybosDayData day_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_day_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_day_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.CybosDayDatas)
  return target;
}

size_t CybosDayDatas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.CybosDayDatas)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .stock_api.CybosDayData day_data = 1;
  total_size += 1UL * this->_internal_day_data_size();
  for (const auto& msg : this->day_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CybosDayDatas::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CybosDayDatas::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CybosDayDatas::GetClassData() const { return &_class_data_; }

void CybosDayDatas::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CybosDayDatas *>(to)->MergeFrom(
      static_cast<const CybosDayDatas &>(from));
}


void CybosDayDatas::MergeFrom(const CybosDayDatas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.CybosDayDatas)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  day_data_.MergeFrom(from.day_data_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CybosDayDatas::CopyFrom(const CybosDayDatas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.CybosDayDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CybosDayDatas::IsInitialized() const {
  return true;
}

void CybosDayDatas::InternalSwap(CybosDayDatas* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  day_data_.InternalSwap(&other->day_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CybosDayDatas::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[31]);
}

// ===================================================================

class CybosSubjectTickData::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& tick_date(const CybosSubjectTickData* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CybosSubjectTickData::_Internal::tick_date(const CybosSubjectTickData* msg) {
  return *msg->tick_date_;
}
void CybosSubjectTickData::clear_tick_date() {
  if (GetArenaForAllocation() == nullptr && tick_date_ != nullptr) {
    delete tick_date_;
  }
  tick_date_ = nullptr;
}
CybosSubjectTickData::CybosSubjectTickData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.CybosSubjectTickData)
}
CybosSubjectTickData::CybosSubjectTickData(const CybosSubjectTickData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    company_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_company_name().empty()) {
    company_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_company_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_tick_date()) {
    tick_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.tick_date_);
  } else {
    tick_date_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&foreigner_total_volume_) -
    reinterpret_cast<char*>(&time_)) + sizeof(foreigner_total_volume_));
  // @@protoc_insertion_point(copy_constructor:stock_api.CybosSubjectTickData)
}

inline void CybosSubjectTickData::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  company_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tick_date_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&foreigner_total_volume_) -
    reinterpret_cast<char*>(&tick_date_)) + sizeof(foreigner_total_volume_));
}

CybosSubjectTickData::~CybosSubjectTickData() {
  // @@protoc_insertion_point(destructor:stock_api.CybosSubjectTickData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CybosSubjectTickData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tick_date_;
}

void CybosSubjectTickData::ArenaDtor(void* object) {
  CybosSubjectTickData* _this = reinterpret_cast< CybosSubjectTickData* >(object);
  (void)_this;
}
void CybosSubjectTickData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CybosSubjectTickData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CybosSubjectTickData::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.CybosSubjectTickData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  code_.ClearToEmpty();
  company_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && tick_date_ != nullptr) {
    delete tick_date_;
  }
  tick_date_ = nullptr;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&foreigner_total_volume_) -
      reinterpret_cast<char*>(&time_)) + sizeof(foreigner_total_volume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CybosSubjectTickData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp tick_date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tick_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosSubjectTickData.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosSubjectTickData.code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string company_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_company_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosSubjectTickData.company_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool buy_or_sell = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          buy_or_sell_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 volume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_volume = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          total_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 foreigner_total_volume = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          foreigner_total_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CybosSubjectTickData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.CybosSubjectTickData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp tick_date = 1;
  if (this->_internal_has_tick_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tick_date(this), target, stream);
  }

  // uint32 time = 2;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosSubjectTickData.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string code = 4;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosSubjectTickData.code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_code(), target);
  }

  // string company_name = 5;
  if (!this->_internal_company_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company_name().data(), static_cast<int>(this->_internal_company_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosSubjectTickData.company_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_company_name(), target);
  }

  // bool buy_or_sell = 6;
  if (this->_internal_buy_or_sell() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_buy_or_sell(), target);
  }

  // uint64 volume = 7;
  if (this->_internal_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_volume(), target);
  }

  // int64 total_volume = 8;
  if (this->_internal_total_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_total_volume(), target);
  }

  // int64 foreigner_total_volume = 9;
  if (this->_internal_foreigner_total_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_foreigner_total_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.CybosSubjectTickData)
  return target;
}

size_t CybosSubjectTickData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.CybosSubjectTickData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string code = 4;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string company_name = 5;
  if (!this->_internal_company_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company_name());
  }

  // .google.protobuf.Timestamp tick_date = 1;
  if (this->_internal_has_tick_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tick_date_);
  }

  // uint32 time = 2;
  if (this->_internal_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time());
  }

  // bool buy_or_sell = 6;
  if (this->_internal_buy_or_sell() != 0) {
    total_size += 1 + 1;
  }

  // uint64 volume = 7;
  if (this->_internal_volume() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_volume());
  }

  // int64 total_volume = 8;
  if (this->_internal_total_volume() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_total_volume());
  }

  // int64 foreigner_total_volume = 9;
  if (this->_internal_foreigner_total_volume() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_foreigner_total_volume());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CybosSubjectTickData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CybosSubjectTickData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CybosSubjectTickData::GetClassData() const { return &_class_data_; }

void CybosSubjectTickData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CybosSubjectTickData *>(to)->MergeFrom(
      static_cast<const CybosSubjectTickData &>(from));
}


void CybosSubjectTickData::MergeFrom(const CybosSubjectTickData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.CybosSubjectTickData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  if (!from._internal_company_name().empty()) {
    _internal_set_company_name(from._internal_company_name());
  }
  if (from._internal_has_tick_date()) {
    _internal_mutable_tick_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_tick_date());
  }
  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from._internal_buy_or_sell() != 0) {
    _internal_set_buy_or_sell(from._internal_buy_or_sell());
  }
  if (from._internal_volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (from._internal_total_volume() != 0) {
    _internal_set_total_volume(from._internal_total_volume());
  }
  if (from._internal_foreigner_total_volume() != 0) {
    _internal_set_foreigner_total_volume(from._internal_foreigner_total_volume());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CybosSubjectTickData::CopyFrom(const CybosSubjectTickData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.CybosSubjectTickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CybosSubjectTickData::IsInitialized() const {
  return true;
}

void CybosSubjectTickData::InternalSwap(CybosSubjectTickData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, lhs_arena,
      &other->code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &company_name_, lhs_arena,
      &other->company_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CybosSubjectTickData, foreigner_total_volume_)
      + sizeof(CybosSubjectTickData::foreigner_total_volume_)
      - PROTOBUF_FIELD_OFFSET(CybosSubjectTickData, tick_date_)>(
          reinterpret_cast<char*>(&tick_date_),
          reinterpret_cast<char*>(&other->tick_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CybosSubjectTickData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[32]);
}

// ===================================================================

class CybosTickDatas::_Internal {
 public:
};

CybosTickDatas::CybosTickDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tick_data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.CybosTickDatas)
}
CybosTickDatas::CybosTickDatas(const CybosTickDatas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tick_data_(from.tick_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:stock_api.CybosTickDatas)
}

inline void CybosTickDatas::SharedCtor() {
}

CybosTickDatas::~CybosTickDatas() {
  // @@protoc_insertion_point(destructor:stock_api.CybosTickDatas)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CybosTickDatas::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CybosTickDatas::ArenaDtor(void* object) {
  CybosTickDatas* _this = reinterpret_cast< CybosTickDatas* >(object);
  (void)_this;
}
void CybosTickDatas::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CybosTickDatas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CybosTickDatas::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.CybosTickDatas)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tick_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CybosTickDatas::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .stock_api.CybosTickData tick_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tick_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CybosTickDatas::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.CybosTickDatas)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .stock_api.CybosTickData tick_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tick_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tick_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.CybosTickDatas)
  return target;
}

size_t CybosTickDatas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.CybosTickDatas)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .stock_api.CybosTickData tick_data = 1;
  total_size += 1UL * this->_internal_tick_data_size();
  for (const auto& msg : this->tick_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CybosTickDatas::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CybosTickDatas::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CybosTickDatas::GetClassData() const { return &_class_data_; }

void CybosTickDatas::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CybosTickDatas *>(to)->MergeFrom(
      static_cast<const CybosTickDatas &>(from));
}


void CybosTickDatas::MergeFrom(const CybosTickDatas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.CybosTickDatas)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tick_data_.MergeFrom(from.tick_data_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CybosTickDatas::CopyFrom(const CybosTickDatas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.CybosTickDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CybosTickDatas::IsInitialized() const {
  return true;
}

void CybosTickDatas::InternalSwap(CybosTickDatas* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tick_data_.InternalSwap(&other->tick_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CybosTickDatas::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[33]);
}

// ===================================================================

class CybosTickData::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& tick_date(const CybosTickData* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CybosTickData::_Internal::tick_date(const CybosTickData* msg) {
  return *msg->tick_date_;
}
void CybosTickData::clear_tick_date() {
  if (GetArenaForAllocation() == nullptr && tick_date_ != nullptr) {
    delete tick_date_;
  }
  tick_date_ = nullptr;
}
CybosTickData::CybosTickData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.CybosTickData)
}
CybosTickData::CybosTickData(const CybosTickData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    company_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_company_name().empty()) {
    company_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_company_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_tick_date()) {
    tick_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.tick_date_);
  } else {
    tick_date_ = nullptr;
  }
  ::memcpy(&yesterday_diff_, &from.yesterday_diff_,
    static_cast<size_t>(reinterpret_cast<char*>(&amount_ratio_) -
    reinterpret_cast<char*>(&yesterday_diff_)) + sizeof(amount_ratio_));
  // @@protoc_insertion_point(copy_constructor:stock_api.CybosTickData)
}

inline void CybosTickData::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  company_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tick_date_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&amount_ratio_) -
    reinterpret_cast<char*>(&tick_date_)) + sizeof(amount_ratio_));
}

CybosTickData::~CybosTickData() {
  // @@protoc_insertion_point(destructor:stock_api.CybosTickData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CybosTickData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tick_date_;
}

void CybosTickData::ArenaDtor(void* object) {
  CybosTickData* _this = reinterpret_cast< CybosTickData* >(object);
  (void)_this;
}
void CybosTickData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CybosTickData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CybosTickData::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.CybosTickData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmpty();
  company_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && tick_date_ != nullptr) {
    delete tick_date_;
  }
  tick_date_ = nullptr;
  ::memset(&yesterday_diff_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_ratio_) -
      reinterpret_cast<char*>(&yesterday_diff_)) + sizeof(amount_ratio_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CybosTickData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp tick_date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tick_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosTickData.code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string company_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_company_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosTickData.company_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 yesterday_diff = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          yesterday_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 start_price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          start_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 highest_price = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          highest_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 lowest_price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          lowest_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ask_price = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ask_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bid_price = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          bid_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 cum_volume = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          cum_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 cum_amount = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          cum_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 current_price = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          current_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool buy_or_sell = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          buy_or_sell_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 cum_sell_volume_by_price = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          cum_sell_volume_by_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 cum_buy_volume_by_price = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          cum_buy_volume_by_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 volume = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 time_with_sec = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          time_with_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 market_type_exp = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          market_type_exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 market_type = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          market_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_time_volume = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          out_time_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 cum_sell_volume = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          cum_sell_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 cum_buy_volume = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          cum_buy_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_kospi = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          is_kospi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float amount_ratio = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 205)) {
          amount_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CybosTickData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.CybosTickData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp tick_date = 1;
  if (this->_internal_has_tick_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tick_date(this), target, stream);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosTickData.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // string company_name = 3;
  if (!this->_internal_company_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company_name().data(), static_cast<int>(this->_internal_company_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosTickData.company_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_company_name(), target);
  }

  // int32 yesterday_diff = 4;
  if (this->_internal_yesterday_diff() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_yesterday_diff(), target);
  }

  // uint32 time = 5;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_time(), target);
  }

  // uint32 start_price = 6;
  if (this->_internal_start_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_start_price(), target);
  }

  // uint32 highest_price = 7;
  if (this->_internal_highest_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_highest_price(), target);
  }

  // uint32 lowest_price = 8;
  if (this->_internal_lowest_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_lowest_price(), target);
  }

  // uint32 ask_price = 9;
  if (this->_internal_ask_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_ask_price(), target);
  }

  // uint32 bid_price = 10;
  if (this->_internal_bid_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_bid_price(), target);
  }

  // uint64 cum_volume = 11;
  if (this->_internal_cum_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_cum_volume(), target);
  }

  // uint64 cum_amount = 12;
  if (this->_internal_cum_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_cum_amount(), target);
  }

  // uint32 current_price = 13;
  if (this->_internal_current_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_current_price(), target);
  }

  // bool buy_or_sell = 14;
  if (this->_internal_buy_or_sell() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_buy_or_sell(), target);
  }

  // uint64 cum_sell_volume_by_price = 15;
  if (this->_internal_cum_sell_volume_by_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_cum_sell_volume_by_price(), target);
  }

  // uint64 cum_buy_volume_by_price = 16;
  if (this->_internal_cum_buy_volume_by_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_cum_buy_volume_by_price(), target);
  }

  // int64 volume = 17;
  if (this->_internal_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_volume(), target);
  }

  // uint32 time_with_sec = 18;
  if (this->_internal_time_with_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_time_with_sec(), target);
  }

  // uint32 market_type_exp = 19;
  if (this->_internal_market_type_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_market_type_exp(), target);
  }

  // uint32 market_type = 20;
  if (this->_internal_market_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_market_type(), target);
  }

  // uint64 out_time_volume = 21;
  if (this->_internal_out_time_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(21, this->_internal_out_time_volume(), target);
  }

  // uint64 cum_sell_volume = 22;
  if (this->_internal_cum_sell_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(22, this->_internal_cum_sell_volume(), target);
  }

  // uint64 cum_buy_volume = 23;
  if (this->_internal_cum_buy_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(23, this->_internal_cum_buy_volume(), target);
  }

  // bool is_kospi = 24;
  if (this->_internal_is_kospi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_is_kospi(), target);
  }

  // float amount_ratio = 25;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_amount_ratio = this->_internal_amount_ratio();
  uint32_t raw_amount_ratio;
  memcpy(&raw_amount_ratio, &tmp_amount_ratio, sizeof(tmp_amount_ratio));
  if (raw_amount_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(25, this->_internal_amount_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.CybosTickData)
  return target;
}

size_t CybosTickData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.CybosTickData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string company_name = 3;
  if (!this->_internal_company_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company_name());
  }

  // .google.protobuf.Timestamp tick_date = 1;
  if (this->_internal_has_tick_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tick_date_);
  }

  // int32 yesterday_diff = 4;
  if (this->_internal_yesterday_diff() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_yesterday_diff());
  }

  // uint32 time = 5;
  if (this->_internal_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time());
  }

  // uint32 start_price = 6;
  if (this->_internal_start_price() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_start_price());
  }

  // uint32 highest_price = 7;
  if (this->_internal_highest_price() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_highest_price());
  }

  // uint32 lowest_price = 8;
  if (this->_internal_lowest_price() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_lowest_price());
  }

  // uint32 ask_price = 9;
  if (this->_internal_ask_price() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ask_price());
  }

  // uint64 cum_volume = 11;
  if (this->_internal_cum_volume() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_cum_volume());
  }

  // uint32 bid_price = 10;
  if (this->_internal_bid_price() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bid_price());
  }

  // uint32 current_price = 13;
  if (this->_internal_current_price() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_current_price());
  }

  // uint64 cum_amount = 12;
  if (this->_internal_cum_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_cum_amount());
  }

  // uint64 cum_sell_volume_by_price = 15;
  if (this->_internal_cum_sell_volume_by_price() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_cum_sell_volume_by_price());
  }

  // uint64 cum_buy_volume_by_price = 16;
  if (this->_internal_cum_buy_volume_by_price() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cum_buy_volume_by_price());
  }

  // int64 volume = 17;
  if (this->_internal_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_volume());
  }

  // uint32 time_with_sec = 18;
  if (this->_internal_time_with_sec() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time_with_sec());
  }

  // uint32 market_type_exp = 19;
  if (this->_internal_market_type_exp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_market_type_exp());
  }

  // bool buy_or_sell = 14;
  if (this->_internal_buy_or_sell() != 0) {
    total_size += 1 + 1;
  }

  // bool is_kospi = 24;
  if (this->_internal_is_kospi() != 0) {
    total_size += 2 + 1;
  }

  // uint32 market_type = 20;
  if (this->_internal_market_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_market_type());
  }

  // uint64 out_time_volume = 21;
  if (this->_internal_out_time_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_out_time_volume());
  }

  // uint64 cum_sell_volume = 22;
  if (this->_internal_cum_sell_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cum_sell_volume());
  }

  // uint64 cum_buy_volume = 23;
  if (this->_internal_cum_buy_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cum_buy_volume());
  }

  // float amount_ratio = 25;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_amount_ratio = this->_internal_amount_ratio();
  uint32_t raw_amount_ratio;
  memcpy(&raw_amount_ratio, &tmp_amount_ratio, sizeof(tmp_amount_ratio));
  if (raw_amount_ratio != 0) {
    total_size += 2 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CybosTickData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CybosTickData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CybosTickData::GetClassData() const { return &_class_data_; }

void CybosTickData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CybosTickData *>(to)->MergeFrom(
      static_cast<const CybosTickData &>(from));
}


void CybosTickData::MergeFrom(const CybosTickData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.CybosTickData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  if (!from._internal_company_name().empty()) {
    _internal_set_company_name(from._internal_company_name());
  }
  if (from._internal_has_tick_date()) {
    _internal_mutable_tick_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_tick_date());
  }
  if (from._internal_yesterday_diff() != 0) {
    _internal_set_yesterday_diff(from._internal_yesterday_diff());
  }
  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from._internal_start_price() != 0) {
    _internal_set_start_price(from._internal_start_price());
  }
  if (from._internal_highest_price() != 0) {
    _internal_set_highest_price(from._internal_highest_price());
  }
  if (from._internal_lowest_price() != 0) {
    _internal_set_lowest_price(from._internal_lowest_price());
  }
  if (from._internal_ask_price() != 0) {
    _internal_set_ask_price(from._internal_ask_price());
  }
  if (from._internal_cum_volume() != 0) {
    _internal_set_cum_volume(from._internal_cum_volume());
  }
  if (from._internal_bid_price() != 0) {
    _internal_set_bid_price(from._internal_bid_price());
  }
  if (from._internal_current_price() != 0) {
    _internal_set_current_price(from._internal_current_price());
  }
  if (from._internal_cum_amount() != 0) {
    _internal_set_cum_amount(from._internal_cum_amount());
  }
  if (from._internal_cum_sell_volume_by_price() != 0) {
    _internal_set_cum_sell_volume_by_price(from._internal_cum_sell_volume_by_price());
  }
  if (from._internal_cum_buy_volume_by_price() != 0) {
    _internal_set_cum_buy_volume_by_price(from._internal_cum_buy_volume_by_price());
  }
  if (from._internal_volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (from._internal_time_with_sec() != 0) {
    _internal_set_time_with_sec(from._internal_time_with_sec());
  }
  if (from._internal_market_type_exp() != 0) {
    _internal_set_market_type_exp(from._internal_market_type_exp());
  }
  if (from._internal_buy_or_sell() != 0) {
    _internal_set_buy_or_sell(from._internal_buy_or_sell());
  }
  if (from._internal_is_kospi() != 0) {
    _internal_set_is_kospi(from._internal_is_kospi());
  }
  if (from._internal_market_type() != 0) {
    _internal_set_market_type(from._internal_market_type());
  }
  if (from._internal_out_time_volume() != 0) {
    _internal_set_out_time_volume(from._internal_out_time_volume());
  }
  if (from._internal_cum_sell_volume() != 0) {
    _internal_set_cum_sell_volume(from._internal_cum_sell_volume());
  }
  if (from._internal_cum_buy_volume() != 0) {
    _internal_set_cum_buy_volume(from._internal_cum_buy_volume());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_amount_ratio = from._internal_amount_ratio();
  uint32_t raw_amount_ratio;
  memcpy(&raw_amount_ratio, &tmp_amount_ratio, sizeof(tmp_amount_ratio));
  if (raw_amount_ratio != 0) {
    _internal_set_amount_ratio(from._internal_amount_ratio());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CybosTickData::CopyFrom(const CybosTickData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.CybosTickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CybosTickData::IsInitialized() const {
  return true;
}

void CybosTickData::InternalSwap(CybosTickData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, lhs_arena,
      &other->code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &company_name_, lhs_arena,
      &other->company_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CybosTickData, amount_ratio_)
      + sizeof(CybosTickData::amount_ratio_)
      - PROTOBUF_FIELD_OFFSET(CybosTickData, tick_date_)>(
          reinterpret_cast<char*>(&tick_date_),
          reinterpret_cast<char*>(&other->tick_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CybosTickData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[34]);
}

// ===================================================================

class CybosBidAskTickData::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& tick_date(const CybosBidAskTickData* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CybosBidAskTickData::_Internal::tick_date(const CybosBidAskTickData* msg) {
  return *msg->tick_date_;
}
void CybosBidAskTickData::clear_tick_date() {
  if (GetArenaForAllocation() == nullptr && tick_date_ != nullptr) {
    delete tick_date_;
  }
  tick_date_ = nullptr;
}
CybosBidAskTickData::CybosBidAskTickData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ask_prices_(arena),
  bid_prices_(arena),
  ask_remains_(arena),
  bid_remains_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.CybosBidAskTickData)
}
CybosBidAskTickData::CybosBidAskTickData(const CybosBidAskTickData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ask_prices_(from.ask_prices_),
      bid_prices_(from.bid_prices_),
      ask_remains_(from.ask_remains_),
      bid_remains_(from.bid_remains_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_tick_date()) {
    tick_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.tick_date_);
  } else {
    tick_date_ = nullptr;
  }
  ::memcpy(&volume_, &from.volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&volume_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:stock_api.CybosBidAskTickData)
}

inline void CybosBidAskTickData::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tick_date_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&tick_date_)) + sizeof(time_));
}

CybosBidAskTickData::~CybosBidAskTickData() {
  // @@protoc_insertion_point(destructor:stock_api.CybosBidAskTickData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CybosBidAskTickData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tick_date_;
}

void CybosBidAskTickData::ArenaDtor(void* object) {
  CybosBidAskTickData* _this = reinterpret_cast< CybosBidAskTickData* >(object);
  (void)_this;
}
void CybosBidAskTickData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CybosBidAskTickData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CybosBidAskTickData::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.CybosBidAskTickData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ask_prices_.Clear();
  bid_prices_.Clear();
  ask_remains_.Clear();
  bid_remains_.Clear();
  code_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && tick_date_ != nullptr) {
    delete tick_date_;
  }
  tick_date_ = nullptr;
  ::memset(&volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&volume_)) + sizeof(time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CybosBidAskTickData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp tick_date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tick_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosBidAskTickData.code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 volume = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 ask_prices = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ask_prices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_ask_prices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 bid_prices = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bid_prices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_bid_prices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 ask_remains = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ask_remains(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_ask_remains(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 bid_remains = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_bid_remains(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_bid_remains(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total_ask_remain = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          total_ask_remain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total_bid_remain = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          total_bid_remain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 out_time_total_ask_remain = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          out_time_total_ask_remain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 out_time_total_bid_remain = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          out_time_total_bid_remain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CybosBidAskTickData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.CybosBidAskTickData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp tick_date = 1;
  if (this->_internal_has_tick_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tick_date(this), target, stream);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosBidAskTickData.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // uint32 time = 3;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time(), target);
  }

  // uint64 volume = 4;
  if (this->_internal_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_volume(), target);
  }

  // repeated int32 ask_prices = 5;
  {
    int byte_size = _ask_prices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_ask_prices(), byte_size, target);
    }
  }

  // repeated int32 bid_prices = 6;
  {
    int byte_size = _bid_prices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_bid_prices(), byte_size, target);
    }
  }

  // repeated uint32 ask_remains = 7;
  {
    int byte_size = _ask_remains_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_ask_remains(), byte_size, target);
    }
  }

  // repeated uint32 bid_remains = 8;
  {
    int byte_size = _bid_remains_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_bid_remains(), byte_size, target);
    }
  }

  // uint64 total_ask_remain = 9;
  if (this->_internal_total_ask_remain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_total_ask_remain(), target);
  }

  // uint64 total_bid_remain = 10;
  if (this->_internal_total_bid_remain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_total_bid_remain(), target);
  }

  // int64 out_time_total_ask_remain = 11;
  if (this->_internal_out_time_total_ask_remain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_out_time_total_ask_remain(), target);
  }

  // int64 out_time_total_bid_remain = 12;
  if (this->_internal_out_time_total_bid_remain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_out_time_total_bid_remain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.CybosBidAskTickData)
  return target;
}

size_t CybosBidAskTickData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.CybosBidAskTickData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ask_prices = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ask_prices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ask_prices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 bid_prices = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bid_prices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bid_prices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 ask_remains = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ask_remains_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ask_remains_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 bid_remains = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->bid_remains_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bid_remains_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // .google.protobuf.Timestamp tick_date = 1;
  if (this->_internal_has_tick_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tick_date_);
  }

  // uint64 volume = 4;
  if (this->_internal_volume() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_volume());
  }

  // uint64 total_ask_remain = 9;
  if (this->_internal_total_ask_remain() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_total_ask_remain());
  }

  // uint64 total_bid_remain = 10;
  if (this->_internal_total_bid_remain() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_total_bid_remain());
  }

  // int64 out_time_total_ask_remain = 11;
  if (this->_internal_out_time_total_ask_remain() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_out_time_total_ask_remain());
  }

  // int64 out_time_total_bid_remain = 12;
  if (this->_internal_out_time_total_bid_remain() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_out_time_total_bid_remain());
  }

  // uint32 time = 3;
  if (this->_internal_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CybosBidAskTickData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CybosBidAskTickData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CybosBidAskTickData::GetClassData() const { return &_class_data_; }

void CybosBidAskTickData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CybosBidAskTickData *>(to)->MergeFrom(
      static_cast<const CybosBidAskTickData &>(from));
}


void CybosBidAskTickData::MergeFrom(const CybosBidAskTickData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.CybosBidAskTickData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ask_prices_.MergeFrom(from.ask_prices_);
  bid_prices_.MergeFrom(from.bid_prices_);
  ask_remains_.MergeFrom(from.ask_remains_);
  bid_remains_.MergeFrom(from.bid_remains_);
  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  if (from._internal_has_tick_date()) {
    _internal_mutable_tick_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_tick_date());
  }
  if (from._internal_volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (from._internal_total_ask_remain() != 0) {
    _internal_set_total_ask_remain(from._internal_total_ask_remain());
  }
  if (from._internal_total_bid_remain() != 0) {
    _internal_set_total_bid_remain(from._internal_total_bid_remain());
  }
  if (from._internal_out_time_total_ask_remain() != 0) {
    _internal_set_out_time_total_ask_remain(from._internal_out_time_total_ask_remain());
  }
  if (from._internal_out_time_total_bid_remain() != 0) {
    _internal_set_out_time_total_bid_remain(from._internal_out_time_total_bid_remain());
  }
  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CybosBidAskTickData::CopyFrom(const CybosBidAskTickData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.CybosBidAskTickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CybosBidAskTickData::IsInitialized() const {
  return true;
}

void CybosBidAskTickData::InternalSwap(CybosBidAskTickData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ask_prices_.InternalSwap(&other->ask_prices_);
  bid_prices_.InternalSwap(&other->bid_prices_);
  ask_remains_.InternalSwap(&other->ask_remains_);
  bid_remains_.InternalSwap(&other->bid_remains_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, lhs_arena,
      &other->code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CybosBidAskTickData, time_)
      + sizeof(CybosBidAskTickData::time_)
      - PROTOBUF_FIELD_OFFSET(CybosBidAskTickData, tick_date_)>(
          reinterpret_cast<char*>(&tick_date_),
          reinterpret_cast<char*>(&other->tick_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CybosBidAskTickData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[35]);
}

// ===================================================================

class CybosStockAlarm::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& tick_date(const CybosStockAlarm* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CybosStockAlarm::_Internal::tick_date(const CybosStockAlarm* msg) {
  return *msg->tick_date_;
}
void CybosStockAlarm::clear_tick_date() {
  if (GetArenaForAllocation() == nullptr && tick_date_ != nullptr) {
    delete tick_date_;
  }
  tick_date_ = nullptr;
}
CybosStockAlarm::CybosStockAlarm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:stock_api.CybosStockAlarm)
}
CybosStockAlarm::CybosStockAlarm(const CybosStockAlarm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_tick_date()) {
    tick_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.tick_date_);
  } else {
    tick_date_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&alarm_category_) -
    reinterpret_cast<char*>(&time_)) + sizeof(alarm_category_));
  // @@protoc_insertion_point(copy_constructor:stock_api.CybosStockAlarm)
}

inline void CybosStockAlarm::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tick_date_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&alarm_category_) -
    reinterpret_cast<char*>(&tick_date_)) + sizeof(alarm_category_));
}

CybosStockAlarm::~CybosStockAlarm() {
  // @@protoc_insertion_point(destructor:stock_api.CybosStockAlarm)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CybosStockAlarm::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tick_date_;
}

void CybosStockAlarm::ArenaDtor(void* object) {
  CybosStockAlarm* _this = reinterpret_cast< CybosStockAlarm* >(object);
  (void)_this;
}
void CybosStockAlarm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CybosStockAlarm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CybosStockAlarm::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_api.CybosStockAlarm)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmpty();
  title_.ClearToEmpty();
  content_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && tick_date_ != nullptr) {
    delete tick_date_;
  }
  tick_date_ = nullptr;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alarm_category_) -
      reinterpret_cast<char*>(&time_)) + sizeof(alarm_category_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CybosStockAlarm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp tick_date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tick_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type_category = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          type_category_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 market_category = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          market_category_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosStockAlarm.code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 alarm_category = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          alarm_category_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string title = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosStockAlarm.title"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stock_api.CybosStockAlarm.content"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CybosStockAlarm::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_api.CybosStockAlarm)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp tick_date = 1;
  if (this->_internal_has_tick_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tick_date(this), target, stream);
  }

  // uint32 time = 2;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time(), target);
  }

  // int32 type_category = 3;
  if (this->_internal_type_category() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type_category(), target);
  }

  // int32 market_category = 4;
  if (this->_internal_market_category() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_market_category(), target);
  }

  // string code = 5;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosStockAlarm.code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_code(), target);
  }

  // int32 alarm_category = 6;
  if (this->_internal_alarm_category() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_alarm_category(), target);
  }

  // string title = 7;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosStockAlarm.title");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_title(), target);
  }

  // string content = 8;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_api.CybosStockAlarm.content");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_api.CybosStockAlarm)
  return target;
}

size_t CybosStockAlarm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_api.CybosStockAlarm)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 5;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string title = 7;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string content = 8;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // .google.protobuf.Timestamp tick_date = 1;
  if (this->_internal_has_tick_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tick_date_);
  }

  // uint32 time = 2;
  if (this->_internal_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time());
  }

  // int32 type_category = 3;
  if (this->_internal_type_category() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type_category());
  }

  // int32 market_category = 4;
  if (this->_internal_market_category() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_market_category());
  }

  // int32 alarm_category = 6;
  if (this->_internal_alarm_category() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_alarm_category());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CybosStockAlarm::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CybosStockAlarm::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CybosStockAlarm::GetClassData() const { return &_class_data_; }

void CybosStockAlarm::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CybosStockAlarm *>(to)->MergeFrom(
      static_cast<const CybosStockAlarm &>(from));
}


void CybosStockAlarm::MergeFrom(const CybosStockAlarm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_api.CybosStockAlarm)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  if (from._internal_has_tick_date()) {
    _internal_mutable_tick_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_tick_date());
  }
  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from._internal_type_category() != 0) {
    _internal_set_type_category(from._internal_type_category());
  }
  if (from._internal_market_category() != 0) {
    _internal_set_market_category(from._internal_market_category());
  }
  if (from._internal_alarm_category() != 0) {
    _internal_set_alarm_category(from._internal_alarm_category());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CybosStockAlarm::CopyFrom(const CybosStockAlarm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_api.CybosStockAlarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CybosStockAlarm::IsInitialized() const {
  return true;
}

void CybosStockAlarm::InternalSwap(CybosStockAlarm* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, lhs_arena,
      &other->code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CybosStockAlarm, alarm_category_)
      + sizeof(CybosStockAlarm::alarm_category_)
      - PROTOBUF_FIELD_OFFSET(CybosStockAlarm, tick_date_)>(
          reinterpret_cast<char*>(&tick_date_),
          reinterpret_cast<char*>(&other->tick_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CybosStockAlarm::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_stock_5fprovider_2eproto_getter, &descriptor_table_stock_5fprovider_2eproto_once,
      file_level_metadata_stock_5fprovider_2eproto[36]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace stock_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::stock_api::StockCodeQuery* Arena::CreateMaybeMessage< ::stock_api::StockCodeQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::StockCodeQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::CodeList* Arena::CreateMaybeMessage< ::stock_api::CodeList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::CodeList >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::ViPriceInfo* Arena::CreateMaybeMessage< ::stock_api::ViPriceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::ViPriceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::Prices* Arena::CreateMaybeMessage< ::stock_api::Prices >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::Prices >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::Bool* Arena::CreateMaybeMessage< ::stock_api::Bool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::Bool >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::BrokerLog_BuyBrokerEntry_DoNotUse* Arena::CreateMaybeMessage< ::stock_api::BrokerLog_BuyBrokerEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::BrokerLog_BuyBrokerEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::BrokerLog_SellBrokerEntry_DoNotUse* Arena::CreateMaybeMessage< ::stock_api::BrokerLog_SellBrokerEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::BrokerLog_SellBrokerEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::BrokerLog* Arena::CreateMaybeMessage< ::stock_api::BrokerLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::BrokerLog >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::BrokerSummary* Arena::CreateMaybeMessage< ::stock_api::BrokerSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::BrokerSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::BrokerStat* Arena::CreateMaybeMessage< ::stock_api::BrokerStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::BrokerStat >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::BrokerMinuteTickList* Arena::CreateMaybeMessage< ::stock_api::BrokerMinuteTickList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::BrokerMinuteTickList >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::BrokerMinuteTick_BrokersMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::stock_api::BrokerMinuteTick_BrokersMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::BrokerMinuteTick_BrokersMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::BrokerMinuteTick* Arena::CreateMaybeMessage< ::stock_api::BrokerMinuteTick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::BrokerMinuteTick >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::YearHighInfo* Arena::CreateMaybeMessage< ::stock_api::YearHighInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::YearHighInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::SimulationMsg* Arena::CreateMaybeMessage< ::stock_api::SimulationMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::SimulationMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::TodayTopOption* Arena::CreateMaybeMessage< ::stock_api::TodayTopOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::TodayTopOption >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::Balance* Arena::CreateMaybeMessage< ::stock_api::Balance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::Balance >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::StockQuery* Arena::CreateMaybeMessage< ::stock_api::StockQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::StockQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::TopList* Arena::CreateMaybeMessage< ::stock_api::TopList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::TopList >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::SimulationOperation* Arena::CreateMaybeMessage< ::stock_api::SimulationOperation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::SimulationOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::SimulationStatus* Arena::CreateMaybeMessage< ::stock_api::SimulationStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::SimulationStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::OrderMsg* Arena::CreateMaybeMessage< ::stock_api::OrderMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::OrderMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::TradeMsg* Arena::CreateMaybeMessage< ::stock_api::TradeMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::TradeMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::CybosOrderReturn* Arena::CreateMaybeMessage< ::stock_api::CybosOrderReturn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::CybosOrderReturn >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::Report* Arena::CreateMaybeMessage< ::stock_api::Report >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::Report >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::OrderResult* Arena::CreateMaybeMessage< ::stock_api::OrderResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::OrderResult >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::CybosOrderResult* Arena::CreateMaybeMessage< ::stock_api::CybosOrderResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::CybosOrderResult >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::ListType* Arena::CreateMaybeMessage< ::stock_api::ListType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::ListType >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::CompanyName* Arena::CreateMaybeMessage< ::stock_api::CompanyName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::CompanyName >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::PastMinuteQuery* Arena::CreateMaybeMessage< ::stock_api::PastMinuteQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::PastMinuteQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::CybosDayData* Arena::CreateMaybeMessage< ::stock_api::CybosDayData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::CybosDayData >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::CybosDayDatas* Arena::CreateMaybeMessage< ::stock_api::CybosDayDatas >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::CybosDayDatas >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::CybosSubjectTickData* Arena::CreateMaybeMessage< ::stock_api::CybosSubjectTickData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::CybosSubjectTickData >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::CybosTickDatas* Arena::CreateMaybeMessage< ::stock_api::CybosTickDatas >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::CybosTickDatas >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::CybosTickData* Arena::CreateMaybeMessage< ::stock_api::CybosTickData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::CybosTickData >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::CybosBidAskTickData* Arena::CreateMaybeMessage< ::stock_api::CybosBidAskTickData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::CybosBidAskTickData >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_api::CybosStockAlarm* Arena::CreateMaybeMessage< ::stock_api::CybosStockAlarm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_api::CybosStockAlarm >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
