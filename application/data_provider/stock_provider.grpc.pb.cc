// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: stock_provider.proto

#include "stock_provider.pb.h"
#include "stock_provider.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace stock_api {

static const char* Stock_method_names[] = {
  "/stock_api.Stock/SayHello",
  "/stock_api.Stock/GetDayData",
  "/stock_api.Stock/GetMinuteData",
  "/stock_api.Stock/GetTodayMinuteData",
  "/stock_api.Stock/GetPastMinuteData",
  "/stock_api.Stock/GetSubscribeCodes",
  "/stock_api.Stock/GetBalance",
  "/stock_api.Stock/OrderStock",
  "/stock_api.Stock/ChangeOrder",
  "/stock_api.Stock/CancelOrder",
  "/stock_api.Stock/GetYearHigh",
  "/stock_api.Stock/RequestCybosTickData",
  "/stock_api.Stock/RequestCybosBidAsk",
  "/stock_api.Stock/RequestCybosSubject",
  "/stock_api.Stock/RequestCybosAlarm",
  "/stock_api.Stock/RequestToTrader",
  "/stock_api.Stock/RequestCybosTradeResult",
  "/stock_api.Stock/ReportOrderResult",
  "/stock_api.Stock/IsKospi",
  "/stock_api.Stock/SetViPriceInfo",
  "/stock_api.Stock/GetViPrice",
  "/stock_api.Stock/ListenTraderMsg",
  "/stock_api.Stock/ListenCybosOrderResult",
  "/stock_api.Stock/ListenOrderResult",
  "/stock_api.Stock/SetCurrentStock",
  "/stock_api.Stock/SetCurrentDateTime",
  "/stock_api.Stock/GetCompanyName",
  "/stock_api.Stock/GetFavoriteList",
  "/stock_api.Stock/AddFavorite",
  "/stock_api.Stock/RemoveFavorite",
  "/stock_api.Stock/ClearRecentList",
  "/stock_api.Stock/GetYesterdayTopAmountList",
  "/stock_api.Stock/GetYesterdayUpperLimitList",
  "/stock_api.Stock/SetTodayAmountRatioList",
  "/stock_api.Stock/SetTodayAmountMomentumList",
  "/stock_api.Stock/SetTodayAmountTopList",
  "/stock_api.Stock/GetBrokerSummary",
  "/stock_api.Stock/SetBrokerSummary",
  "/stock_api.Stock/AddBrokerMinuteTick",
  "/stock_api.Stock/GetBrokerMinuteTick",
  "/stock_api.Stock/GetTodayTopAmountList",
  "/stock_api.Stock/GetRecentSearch",
  "/stock_api.Stock/GetViList",
  "/stock_api.Stock/GetStrategyList",
  "/stock_api.Stock/SetStrategyList",
  "/stock_api.Stock/ListenCurrentStock",
  "/stock_api.Stock/ListenListChanged",
  "/stock_api.Stock/ListenBrokerSummary",
  "/stock_api.Stock/ListenBrokerMinuteTick",
  "/stock_api.Stock/ListenCybosTickData",
  "/stock_api.Stock/ListenCybosBidAsk",
  "/stock_api.Stock/ListenCurrentTime",
  "/stock_api.Stock/ListenCybosSubject",
  "/stock_api.Stock/ListenCybosAlarm",
  "/stock_api.Stock/ListenSimulationStatusChanged",
  "/stock_api.Stock/SimulationData",
  "/stock_api.Stock/ListenSimulationOperation",
  "/stock_api.Stock/StartSimulation",
  "/stock_api.Stock/StopSimulation",
  "/stock_api.Stock/SetSimulationStatus",
  "/stock_api.Stock/GetSimulationStatus",
};

std::unique_ptr< Stock::Stub> Stock::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Stock::Stub> stub(new Stock::Stub(channel, options));
  return stub;
}

Stock::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SayHello_(Stock_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDayData_(Stock_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMinuteData_(Stock_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTodayMinuteData_(Stock_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPastMinuteData_(Stock_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSubscribeCodes_(Stock_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBalance_(Stock_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OrderStock_(Stock_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangeOrder_(Stock_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelOrder_(Stock_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetYearHigh_(Stock_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestCybosTickData_(Stock_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestCybosBidAsk_(Stock_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestCybosSubject_(Stock_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestCybosAlarm_(Stock_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestToTrader_(Stock_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestCybosTradeResult_(Stock_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReportOrderResult_(Stock_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsKospi_(Stock_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetViPriceInfo_(Stock_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetViPrice_(Stock_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListenTraderMsg_(Stock_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListenCybosOrderResult_(Stock_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListenOrderResult_(Stock_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SetCurrentStock_(Stock_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCurrentDateTime_(Stock_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCompanyName_(Stock_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFavoriteList_(Stock_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddFavorite_(Stock_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveFavorite_(Stock_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClearRecentList_(Stock_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetYesterdayTopAmountList_(Stock_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetYesterdayUpperLimitList_(Stock_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTodayAmountRatioList_(Stock_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTodayAmountMomentumList_(Stock_method_names[34], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTodayAmountTopList_(Stock_method_names[35], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBrokerSummary_(Stock_method_names[36], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetBrokerSummary_(Stock_method_names[37], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddBrokerMinuteTick_(Stock_method_names[38], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBrokerMinuteTick_(Stock_method_names[39], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTodayTopAmountList_(Stock_method_names[40], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRecentSearch_(Stock_method_names[41], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetViList_(Stock_method_names[42], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStrategyList_(Stock_method_names[43], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetStrategyList_(Stock_method_names[44], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListenCurrentStock_(Stock_method_names[45], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListenListChanged_(Stock_method_names[46], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListenBrokerSummary_(Stock_method_names[47], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListenBrokerMinuteTick_(Stock_method_names[48], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListenCybosTickData_(Stock_method_names[49], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListenCybosBidAsk_(Stock_method_names[50], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListenCurrentTime_(Stock_method_names[51], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListenCybosSubject_(Stock_method_names[52], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListenCybosAlarm_(Stock_method_names[53], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListenSimulationStatusChanged_(Stock_method_names[54], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SimulationData_(Stock_method_names[55], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_ListenSimulationOperation_(Stock_method_names[56], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_StartSimulation_(Stock_method_names[57], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopSimulation_(Stock_method_names[58], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSimulationStatus_(Stock_method_names[59], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSimulationStatus_(Stock_method_names[60], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Stock::Stub::SayHello(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SayHello_, context, request, response);
}

void Stock::Stub::async::SayHello(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, std::move(f));
}

void Stock::Stub::async::SayHello(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SayHello_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSayHelloRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::GetDayData(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::stock_api::CybosDayDatas* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::StockQuery, ::stock_api::CybosDayDatas, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDayData_, context, request, response);
}

void Stock::Stub::async::GetDayData(::grpc::ClientContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::StockQuery, ::stock_api::CybosDayDatas, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDayData_, context, request, response, std::move(f));
}

void Stock::Stub::async::GetDayData(::grpc::ClientContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDayData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* Stock::Stub::PrepareAsyncGetDayDataRaw(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::stock_api::CybosDayDatas, ::stock_api::StockQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDayData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* Stock::Stub::AsyncGetDayDataRaw(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDayDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::GetMinuteData(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::stock_api::CybosDayDatas* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::StockQuery, ::stock_api::CybosDayDatas, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMinuteData_, context, request, response);
}

void Stock::Stub::async::GetMinuteData(::grpc::ClientContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::StockQuery, ::stock_api::CybosDayDatas, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMinuteData_, context, request, response, std::move(f));
}

void Stock::Stub::async::GetMinuteData(::grpc::ClientContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMinuteData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* Stock::Stub::PrepareAsyncGetMinuteDataRaw(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::stock_api::CybosDayDatas, ::stock_api::StockQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMinuteData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* Stock::Stub::AsyncGetMinuteDataRaw(::grpc::ClientContext* context, const ::stock_api::StockQuery& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMinuteDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::GetTodayMinuteData(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::stock_api::CybosDayDatas* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::StockCodeQuery, ::stock_api::CybosDayDatas, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTodayMinuteData_, context, request, response);
}

void Stock::Stub::async::GetTodayMinuteData(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::StockCodeQuery, ::stock_api::CybosDayDatas, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTodayMinuteData_, context, request, response, std::move(f));
}

void Stock::Stub::async::GetTodayMinuteData(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::CybosDayDatas* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTodayMinuteData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* Stock::Stub::PrepareAsyncGetTodayMinuteDataRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::stock_api::CybosDayDatas, ::stock_api::StockCodeQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTodayMinuteData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* Stock::Stub::AsyncGetTodayMinuteDataRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTodayMinuteDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::GetPastMinuteData(::grpc::ClientContext* context, const ::stock_api::PastMinuteQuery& request, ::stock_api::CybosDayDatas* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::PastMinuteQuery, ::stock_api::CybosDayDatas, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPastMinuteData_, context, request, response);
}

void Stock::Stub::async::GetPastMinuteData(::grpc::ClientContext* context, const ::stock_api::PastMinuteQuery* request, ::stock_api::CybosDayDatas* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::PastMinuteQuery, ::stock_api::CybosDayDatas, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPastMinuteData_, context, request, response, std::move(f));
}

void Stock::Stub::async::GetPastMinuteData(::grpc::ClientContext* context, const ::stock_api::PastMinuteQuery* request, ::stock_api::CybosDayDatas* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPastMinuteData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* Stock::Stub::PrepareAsyncGetPastMinuteDataRaw(::grpc::ClientContext* context, const ::stock_api::PastMinuteQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::stock_api::CybosDayDatas, ::stock_api::PastMinuteQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPastMinuteData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosDayDatas>* Stock::Stub::AsyncGetPastMinuteDataRaw(::grpc::ClientContext* context, const ::stock_api::PastMinuteQuery& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPastMinuteDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::GetSubscribeCodes(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::stock_api::CodeList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::stock_api::CodeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSubscribeCodes_, context, request, response);
}

void Stock::Stub::async::GetSubscribeCodes(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::stock_api::CodeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSubscribeCodes_, context, request, response, std::move(f));
}

void Stock::Stub::async::GetSubscribeCodes(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSubscribeCodes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CodeList>* Stock::Stub::PrepareAsyncGetSubscribeCodesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::stock_api::CodeList, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSubscribeCodes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CodeList>* Stock::Stub::AsyncGetSubscribeCodesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSubscribeCodesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::GetBalance(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::stock_api::Balance* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::stock_api::Balance, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBalance_, context, request, response);
}

void Stock::Stub::async::GetBalance(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::Balance* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::stock_api::Balance, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBalance_, context, request, response, std::move(f));
}

void Stock::Stub::async::GetBalance(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::Balance* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBalance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::Balance>* Stock::Stub::PrepareAsyncGetBalanceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::stock_api::Balance, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBalance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::stock_api::Balance>* Stock::Stub::AsyncGetBalanceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBalanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::OrderStock(::grpc::ClientContext* context, const ::stock_api::OrderMsg& request, ::stock_api::CybosOrderReturn* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::OrderMsg, ::stock_api::CybosOrderReturn, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OrderStock_, context, request, response);
}

void Stock::Stub::async::OrderStock(::grpc::ClientContext* context, const ::stock_api::OrderMsg* request, ::stock_api::CybosOrderReturn* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::OrderMsg, ::stock_api::CybosOrderReturn, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrderStock_, context, request, response, std::move(f));
}

void Stock::Stub::async::OrderStock(::grpc::ClientContext* context, const ::stock_api::OrderMsg* request, ::stock_api::CybosOrderReturn* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrderStock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosOrderReturn>* Stock::Stub::PrepareAsyncOrderStockRaw(::grpc::ClientContext* context, const ::stock_api::OrderMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::stock_api::CybosOrderReturn, ::stock_api::OrderMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OrderStock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosOrderReturn>* Stock::Stub::AsyncOrderStockRaw(::grpc::ClientContext* context, const ::stock_api::OrderMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOrderStockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::ChangeOrder(::grpc::ClientContext* context, const ::stock_api::OrderMsg& request, ::stock_api::CybosOrderReturn* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::OrderMsg, ::stock_api::CybosOrderReturn, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ChangeOrder_, context, request, response);
}

void Stock::Stub::async::ChangeOrder(::grpc::ClientContext* context, const ::stock_api::OrderMsg* request, ::stock_api::CybosOrderReturn* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::OrderMsg, ::stock_api::CybosOrderReturn, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangeOrder_, context, request, response, std::move(f));
}

void Stock::Stub::async::ChangeOrder(::grpc::ClientContext* context, const ::stock_api::OrderMsg* request, ::stock_api::CybosOrderReturn* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangeOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosOrderReturn>* Stock::Stub::PrepareAsyncChangeOrderRaw(::grpc::ClientContext* context, const ::stock_api::OrderMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::stock_api::CybosOrderReturn, ::stock_api::OrderMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ChangeOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosOrderReturn>* Stock::Stub::AsyncChangeOrderRaw(::grpc::ClientContext* context, const ::stock_api::OrderMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChangeOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::CancelOrder(::grpc::ClientContext* context, const ::stock_api::OrderMsg& request, ::stock_api::CybosOrderReturn* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::OrderMsg, ::stock_api::CybosOrderReturn, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelOrder_, context, request, response);
}

void Stock::Stub::async::CancelOrder(::grpc::ClientContext* context, const ::stock_api::OrderMsg* request, ::stock_api::CybosOrderReturn* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::OrderMsg, ::stock_api::CybosOrderReturn, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelOrder_, context, request, response, std::move(f));
}

void Stock::Stub::async::CancelOrder(::grpc::ClientContext* context, const ::stock_api::OrderMsg* request, ::stock_api::CybosOrderReturn* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosOrderReturn>* Stock::Stub::PrepareAsyncCancelOrderRaw(::grpc::ClientContext* context, const ::stock_api::OrderMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::stock_api::CybosOrderReturn, ::stock_api::OrderMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CybosOrderReturn>* Stock::Stub::AsyncCancelOrderRaw(::grpc::ClientContext* context, const ::stock_api::OrderMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::GetYearHigh(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::stock_api::YearHighInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::StockCodeQuery, ::stock_api::YearHighInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetYearHigh_, context, request, response);
}

void Stock::Stub::async::GetYearHigh(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::YearHighInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::StockCodeQuery, ::stock_api::YearHighInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetYearHigh_, context, request, response, std::move(f));
}

void Stock::Stub::async::GetYearHigh(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::YearHighInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetYearHigh_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::YearHighInfo>* Stock::Stub::PrepareAsyncGetYearHighRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::stock_api::YearHighInfo, ::stock_api::StockCodeQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetYearHigh_, context, request);
}

::grpc::ClientAsyncResponseReader< ::stock_api::YearHighInfo>* Stock::Stub::AsyncGetYearHighRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetYearHighRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::RequestCybosTickData(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::StockCodeQuery, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestCybosTickData_, context, request, response);
}

void Stock::Stub::async::RequestCybosTickData(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::StockCodeQuery, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestCybosTickData_, context, request, response, std::move(f));
}

void Stock::Stub::async::RequestCybosTickData(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestCybosTickData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncRequestCybosTickDataRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::stock_api::StockCodeQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestCybosTickData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncRequestCybosTickDataRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestCybosTickDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::RequestCybosBidAsk(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::StockCodeQuery, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestCybosBidAsk_, context, request, response);
}

void Stock::Stub::async::RequestCybosBidAsk(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::StockCodeQuery, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestCybosBidAsk_, context, request, response, std::move(f));
}

void Stock::Stub::async::RequestCybosBidAsk(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestCybosBidAsk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncRequestCybosBidAskRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::stock_api::StockCodeQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestCybosBidAsk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncRequestCybosBidAskRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestCybosBidAskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::RequestCybosSubject(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::StockCodeQuery, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestCybosSubject_, context, request, response);
}

void Stock::Stub::async::RequestCybosSubject(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::StockCodeQuery, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestCybosSubject_, context, request, response, std::move(f));
}

void Stock::Stub::async::RequestCybosSubject(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestCybosSubject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncRequestCybosSubjectRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::stock_api::StockCodeQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestCybosSubject_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncRequestCybosSubjectRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestCybosSubjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::RequestCybosAlarm(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestCybosAlarm_, context, request, response);
}

void Stock::Stub::async::RequestCybosAlarm(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestCybosAlarm_, context, request, response, std::move(f));
}

void Stock::Stub::async::RequestCybosAlarm(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestCybosAlarm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncRequestCybosAlarmRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestCybosAlarm_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncRequestCybosAlarmRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestCybosAlarmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::RequestToTrader(::grpc::ClientContext* context, const ::stock_api::TradeMsg& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::TradeMsg, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestToTrader_, context, request, response);
}

void Stock::Stub::async::RequestToTrader(::grpc::ClientContext* context, const ::stock_api::TradeMsg* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::TradeMsg, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestToTrader_, context, request, response, std::move(f));
}

void Stock::Stub::async::RequestToTrader(::grpc::ClientContext* context, const ::stock_api::TradeMsg* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestToTrader_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncRequestToTraderRaw(::grpc::ClientContext* context, const ::stock_api::TradeMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::stock_api::TradeMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestToTrader_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncRequestToTraderRaw(::grpc::ClientContext* context, const ::stock_api::TradeMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestToTraderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::RequestCybosTradeResult(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestCybosTradeResult_, context, request, response);
}

void Stock::Stub::async::RequestCybosTradeResult(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestCybosTradeResult_, context, request, response, std::move(f));
}

void Stock::Stub::async::RequestCybosTradeResult(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestCybosTradeResult_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncRequestCybosTradeResultRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestCybosTradeResult_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncRequestCybosTradeResultRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestCybosTradeResultRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::ReportOrderResult(::grpc::ClientContext* context, const ::stock_api::OrderResult& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::OrderResult, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReportOrderResult_, context, request, response);
}

void Stock::Stub::async::ReportOrderResult(::grpc::ClientContext* context, const ::stock_api::OrderResult* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::OrderResult, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReportOrderResult_, context, request, response, std::move(f));
}

void Stock::Stub::async::ReportOrderResult(::grpc::ClientContext* context, const ::stock_api::OrderResult* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReportOrderResult_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncReportOrderResultRaw(::grpc::ClientContext* context, const ::stock_api::OrderResult& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::stock_api::OrderResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReportOrderResult_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncReportOrderResultRaw(::grpc::ClientContext* context, const ::stock_api::OrderResult& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReportOrderResultRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::IsKospi(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::stock_api::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::StockCodeQuery, ::stock_api::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsKospi_, context, request, response);
}

void Stock::Stub::async::IsKospi(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::StockCodeQuery, ::stock_api::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsKospi_, context, request, response, std::move(f));
}

void Stock::Stub::async::IsKospi(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::Bool* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsKospi_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::Bool>* Stock::Stub::PrepareAsyncIsKospiRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::stock_api::Bool, ::stock_api::StockCodeQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsKospi_, context, request);
}

::grpc::ClientAsyncResponseReader< ::stock_api::Bool>* Stock::Stub::AsyncIsKospiRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsKospiRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::SetViPriceInfo(::grpc::ClientContext* context, const ::stock_api::ViPriceInfo& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::ViPriceInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetViPriceInfo_, context, request, response);
}

void Stock::Stub::async::SetViPriceInfo(::grpc::ClientContext* context, const ::stock_api::ViPriceInfo* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::ViPriceInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetViPriceInfo_, context, request, response, std::move(f));
}

void Stock::Stub::async::SetViPriceInfo(::grpc::ClientContext* context, const ::stock_api::ViPriceInfo* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetViPriceInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncSetViPriceInfoRaw(::grpc::ClientContext* context, const ::stock_api::ViPriceInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::stock_api::ViPriceInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetViPriceInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncSetViPriceInfoRaw(::grpc::ClientContext* context, const ::stock_api::ViPriceInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetViPriceInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::GetViPrice(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::stock_api::Prices* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::StockCodeQuery, ::stock_api::Prices, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetViPrice_, context, request, response);
}

void Stock::Stub::async::GetViPrice(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::Prices* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::StockCodeQuery, ::stock_api::Prices, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetViPrice_, context, request, response, std::move(f));
}

void Stock::Stub::async::GetViPrice(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::Prices* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetViPrice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::Prices>* Stock::Stub::PrepareAsyncGetViPriceRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::stock_api::Prices, ::stock_api::StockCodeQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetViPrice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::stock_api::Prices>* Stock::Stub::AsyncGetViPriceRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetViPriceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::stock_api::TradeMsg>* Stock::Stub::ListenTraderMsgRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::stock_api::TradeMsg>::Create(channel_.get(), rpcmethod_ListenTraderMsg_, context, request);
}

void Stock::Stub::async::ListenTraderMsg(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::stock_api::TradeMsg>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::stock_api::TradeMsg>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenTraderMsg_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::TradeMsg>* Stock::Stub::AsyncListenTraderMsgRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::stock_api::TradeMsg>::Create(channel_.get(), cq, rpcmethod_ListenTraderMsg_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::TradeMsg>* Stock::Stub::PrepareAsyncListenTraderMsgRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::stock_api::TradeMsg>::Create(channel_.get(), cq, rpcmethod_ListenTraderMsg_, context, request, false, nullptr);
}

::grpc::ClientReader< ::stock_api::CybosOrderResult>* Stock::Stub::ListenCybosOrderResultRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::stock_api::CybosOrderResult>::Create(channel_.get(), rpcmethod_ListenCybosOrderResult_, context, request);
}

void Stock::Stub::async::ListenCybosOrderResult(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::stock_api::CybosOrderResult>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::stock_api::CybosOrderResult>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenCybosOrderResult_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::CybosOrderResult>* Stock::Stub::AsyncListenCybosOrderResultRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::stock_api::CybosOrderResult>::Create(channel_.get(), cq, rpcmethod_ListenCybosOrderResult_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::CybosOrderResult>* Stock::Stub::PrepareAsyncListenCybosOrderResultRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::stock_api::CybosOrderResult>::Create(channel_.get(), cq, rpcmethod_ListenCybosOrderResult_, context, request, false, nullptr);
}

::grpc::ClientReader< ::stock_api::OrderResult>* Stock::Stub::ListenOrderResultRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::stock_api::OrderResult>::Create(channel_.get(), rpcmethod_ListenOrderResult_, context, request);
}

void Stock::Stub::async::ListenOrderResult(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::stock_api::OrderResult>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::stock_api::OrderResult>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenOrderResult_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::OrderResult>* Stock::Stub::AsyncListenOrderResultRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::stock_api::OrderResult>::Create(channel_.get(), cq, rpcmethod_ListenOrderResult_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::OrderResult>* Stock::Stub::PrepareAsyncListenOrderResultRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::stock_api::OrderResult>::Create(channel_.get(), cq, rpcmethod_ListenOrderResult_, context, request, false, nullptr);
}

::grpc::Status Stock::Stub::SetCurrentStock(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::StockCodeQuery, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCurrentStock_, context, request, response);
}

void Stock::Stub::async::SetCurrentStock(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::StockCodeQuery, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCurrentStock_, context, request, response, std::move(f));
}

void Stock::Stub::async::SetCurrentStock(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCurrentStock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncSetCurrentStockRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::stock_api::StockCodeQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCurrentStock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncSetCurrentStockRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCurrentStockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::SetCurrentDateTime(::grpc::ClientContext* context, const ::google::protobuf::Timestamp& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Timestamp, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCurrentDateTime_, context, request, response);
}

void Stock::Stub::async::SetCurrentDateTime(::grpc::ClientContext* context, const ::google::protobuf::Timestamp* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Timestamp, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCurrentDateTime_, context, request, response, std::move(f));
}

void Stock::Stub::async::SetCurrentDateTime(::grpc::ClientContext* context, const ::google::protobuf::Timestamp* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCurrentDateTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncSetCurrentDateTimeRaw(::grpc::ClientContext* context, const ::google::protobuf::Timestamp& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Timestamp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCurrentDateTime_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncSetCurrentDateTimeRaw(::grpc::ClientContext* context, const ::google::protobuf::Timestamp& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCurrentDateTimeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::GetCompanyName(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::stock_api::CompanyName* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::StockCodeQuery, ::stock_api::CompanyName, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCompanyName_, context, request, response);
}

void Stock::Stub::async::GetCompanyName(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::CompanyName* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::StockCodeQuery, ::stock_api::CompanyName, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCompanyName_, context, request, response, std::move(f));
}

void Stock::Stub::async::GetCompanyName(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::CompanyName* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCompanyName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CompanyName>* Stock::Stub::PrepareAsyncGetCompanyNameRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::stock_api::CompanyName, ::stock_api::StockCodeQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCompanyName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CompanyName>* Stock::Stub::AsyncGetCompanyNameRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCompanyNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::GetFavoriteList(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::stock_api::CodeList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::stock_api::CodeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFavoriteList_, context, request, response);
}

void Stock::Stub::async::GetFavoriteList(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::stock_api::CodeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFavoriteList_, context, request, response, std::move(f));
}

void Stock::Stub::async::GetFavoriteList(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFavoriteList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CodeList>* Stock::Stub::PrepareAsyncGetFavoriteListRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::stock_api::CodeList, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFavoriteList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CodeList>* Stock::Stub::AsyncGetFavoriteListRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFavoriteListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::AddFavorite(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::StockCodeQuery, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddFavorite_, context, request, response);
}

void Stock::Stub::async::AddFavorite(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::StockCodeQuery, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddFavorite_, context, request, response, std::move(f));
}

void Stock::Stub::async::AddFavorite(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddFavorite_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncAddFavoriteRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::stock_api::StockCodeQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddFavorite_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncAddFavoriteRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddFavoriteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::RemoveFavorite(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::StockCodeQuery, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveFavorite_, context, request, response);
}

void Stock::Stub::async::RemoveFavorite(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::StockCodeQuery, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveFavorite_, context, request, response, std::move(f));
}

void Stock::Stub::async::RemoveFavorite(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveFavorite_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncRemoveFavoriteRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::stock_api::StockCodeQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveFavorite_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncRemoveFavoriteRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveFavoriteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::ClearRecentList(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ClearRecentList_, context, request, response);
}

void Stock::Stub::async::ClearRecentList(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearRecentList_, context, request, response, std::move(f));
}

void Stock::Stub::async::ClearRecentList(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearRecentList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncClearRecentListRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ClearRecentList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncClearRecentListRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClearRecentListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::GetYesterdayTopAmountList(::grpc::ClientContext* context, const ::google::protobuf::Timestamp& request, ::stock_api::TopList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Timestamp, ::stock_api::TopList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetYesterdayTopAmountList_, context, request, response);
}

void Stock::Stub::async::GetYesterdayTopAmountList(::grpc::ClientContext* context, const ::google::protobuf::Timestamp* request, ::stock_api::TopList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Timestamp, ::stock_api::TopList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetYesterdayTopAmountList_, context, request, response, std::move(f));
}

void Stock::Stub::async::GetYesterdayTopAmountList(::grpc::ClientContext* context, const ::google::protobuf::Timestamp* request, ::stock_api::TopList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetYesterdayTopAmountList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::TopList>* Stock::Stub::PrepareAsyncGetYesterdayTopAmountListRaw(::grpc::ClientContext* context, const ::google::protobuf::Timestamp& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::stock_api::TopList, ::google::protobuf::Timestamp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetYesterdayTopAmountList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::stock_api::TopList>* Stock::Stub::AsyncGetYesterdayTopAmountListRaw(::grpc::ClientContext* context, const ::google::protobuf::Timestamp& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetYesterdayTopAmountListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::GetYesterdayUpperLimitList(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::stock_api::CodeList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::stock_api::CodeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetYesterdayUpperLimitList_, context, request, response);
}

void Stock::Stub::async::GetYesterdayUpperLimitList(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::stock_api::CodeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetYesterdayUpperLimitList_, context, request, response, std::move(f));
}

void Stock::Stub::async::GetYesterdayUpperLimitList(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetYesterdayUpperLimitList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CodeList>* Stock::Stub::PrepareAsyncGetYesterdayUpperLimitListRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::stock_api::CodeList, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetYesterdayUpperLimitList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CodeList>* Stock::Stub::AsyncGetYesterdayUpperLimitListRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetYesterdayUpperLimitListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::SetTodayAmountRatioList(::grpc::ClientContext* context, const ::stock_api::CodeList& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::CodeList, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTodayAmountRatioList_, context, request, response);
}

void Stock::Stub::async::SetTodayAmountRatioList(::grpc::ClientContext* context, const ::stock_api::CodeList* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::CodeList, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTodayAmountRatioList_, context, request, response, std::move(f));
}

void Stock::Stub::async::SetTodayAmountRatioList(::grpc::ClientContext* context, const ::stock_api::CodeList* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTodayAmountRatioList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncSetTodayAmountRatioListRaw(::grpc::ClientContext* context, const ::stock_api::CodeList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::stock_api::CodeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTodayAmountRatioList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncSetTodayAmountRatioListRaw(::grpc::ClientContext* context, const ::stock_api::CodeList& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTodayAmountRatioListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::SetTodayAmountMomentumList(::grpc::ClientContext* context, const ::stock_api::CodeList& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::CodeList, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTodayAmountMomentumList_, context, request, response);
}

void Stock::Stub::async::SetTodayAmountMomentumList(::grpc::ClientContext* context, const ::stock_api::CodeList* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::CodeList, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTodayAmountMomentumList_, context, request, response, std::move(f));
}

void Stock::Stub::async::SetTodayAmountMomentumList(::grpc::ClientContext* context, const ::stock_api::CodeList* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTodayAmountMomentumList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncSetTodayAmountMomentumListRaw(::grpc::ClientContext* context, const ::stock_api::CodeList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::stock_api::CodeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTodayAmountMomentumList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncSetTodayAmountMomentumListRaw(::grpc::ClientContext* context, const ::stock_api::CodeList& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTodayAmountMomentumListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::SetTodayAmountTopList(::grpc::ClientContext* context, const ::stock_api::CodeList& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::CodeList, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTodayAmountTopList_, context, request, response);
}

void Stock::Stub::async::SetTodayAmountTopList(::grpc::ClientContext* context, const ::stock_api::CodeList* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::CodeList, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTodayAmountTopList_, context, request, response, std::move(f));
}

void Stock::Stub::async::SetTodayAmountTopList(::grpc::ClientContext* context, const ::stock_api::CodeList* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTodayAmountTopList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncSetTodayAmountTopListRaw(::grpc::ClientContext* context, const ::stock_api::CodeList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::stock_api::CodeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTodayAmountTopList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncSetTodayAmountTopListRaw(::grpc::ClientContext* context, const ::stock_api::CodeList& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTodayAmountTopListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::GetBrokerSummary(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::stock_api::BrokerSummary* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::StockCodeQuery, ::stock_api::BrokerSummary, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBrokerSummary_, context, request, response);
}

void Stock::Stub::async::GetBrokerSummary(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::BrokerSummary* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::StockCodeQuery, ::stock_api::BrokerSummary, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBrokerSummary_, context, request, response, std::move(f));
}

void Stock::Stub::async::GetBrokerSummary(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::BrokerSummary* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBrokerSummary_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::BrokerSummary>* Stock::Stub::PrepareAsyncGetBrokerSummaryRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::stock_api::BrokerSummary, ::stock_api::StockCodeQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBrokerSummary_, context, request);
}

::grpc::ClientAsyncResponseReader< ::stock_api::BrokerSummary>* Stock::Stub::AsyncGetBrokerSummaryRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBrokerSummaryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::SetBrokerSummary(::grpc::ClientContext* context, const ::stock_api::BrokerSummary& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::BrokerSummary, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetBrokerSummary_, context, request, response);
}

void Stock::Stub::async::SetBrokerSummary(::grpc::ClientContext* context, const ::stock_api::BrokerSummary* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::BrokerSummary, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBrokerSummary_, context, request, response, std::move(f));
}

void Stock::Stub::async::SetBrokerSummary(::grpc::ClientContext* context, const ::stock_api::BrokerSummary* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBrokerSummary_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncSetBrokerSummaryRaw(::grpc::ClientContext* context, const ::stock_api::BrokerSummary& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::stock_api::BrokerSummary, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetBrokerSummary_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncSetBrokerSummaryRaw(::grpc::ClientContext* context, const ::stock_api::BrokerSummary& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetBrokerSummaryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::AddBrokerMinuteTick(::grpc::ClientContext* context, const ::stock_api::BrokerMinuteTick& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::BrokerMinuteTick, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddBrokerMinuteTick_, context, request, response);
}

void Stock::Stub::async::AddBrokerMinuteTick(::grpc::ClientContext* context, const ::stock_api::BrokerMinuteTick* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::BrokerMinuteTick, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddBrokerMinuteTick_, context, request, response, std::move(f));
}

void Stock::Stub::async::AddBrokerMinuteTick(::grpc::ClientContext* context, const ::stock_api::BrokerMinuteTick* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddBrokerMinuteTick_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncAddBrokerMinuteTickRaw(::grpc::ClientContext* context, const ::stock_api::BrokerMinuteTick& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::stock_api::BrokerMinuteTick, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddBrokerMinuteTick_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncAddBrokerMinuteTickRaw(::grpc::ClientContext* context, const ::stock_api::BrokerMinuteTick& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddBrokerMinuteTickRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::GetBrokerMinuteTick(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::stock_api::BrokerMinuteTickList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::StockCodeQuery, ::stock_api::BrokerMinuteTickList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBrokerMinuteTick_, context, request, response);
}

void Stock::Stub::async::GetBrokerMinuteTick(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::BrokerMinuteTickList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::StockCodeQuery, ::stock_api::BrokerMinuteTickList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBrokerMinuteTick_, context, request, response, std::move(f));
}

void Stock::Stub::async::GetBrokerMinuteTick(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::BrokerMinuteTickList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBrokerMinuteTick_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::BrokerMinuteTickList>* Stock::Stub::PrepareAsyncGetBrokerMinuteTickRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::stock_api::BrokerMinuteTickList, ::stock_api::StockCodeQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBrokerMinuteTick_, context, request);
}

::grpc::ClientAsyncResponseReader< ::stock_api::BrokerMinuteTickList>* Stock::Stub::AsyncGetBrokerMinuteTickRaw(::grpc::ClientContext* context, const ::stock_api::StockCodeQuery& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBrokerMinuteTickRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::GetTodayTopAmountList(::grpc::ClientContext* context, const ::stock_api::TodayTopOption& request, ::stock_api::CodeList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::TodayTopOption, ::stock_api::CodeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTodayTopAmountList_, context, request, response);
}

void Stock::Stub::async::GetTodayTopAmountList(::grpc::ClientContext* context, const ::stock_api::TodayTopOption* request, ::stock_api::CodeList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::TodayTopOption, ::stock_api::CodeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTodayTopAmountList_, context, request, response, std::move(f));
}

void Stock::Stub::async::GetTodayTopAmountList(::grpc::ClientContext* context, const ::stock_api::TodayTopOption* request, ::stock_api::CodeList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTodayTopAmountList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CodeList>* Stock::Stub::PrepareAsyncGetTodayTopAmountListRaw(::grpc::ClientContext* context, const ::stock_api::TodayTopOption& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::stock_api::CodeList, ::stock_api::TodayTopOption, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTodayTopAmountList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CodeList>* Stock::Stub::AsyncGetTodayTopAmountListRaw(::grpc::ClientContext* context, const ::stock_api::TodayTopOption& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTodayTopAmountListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::GetRecentSearch(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::stock_api::CodeList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::stock_api::CodeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRecentSearch_, context, request, response);
}

void Stock::Stub::async::GetRecentSearch(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::stock_api::CodeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRecentSearch_, context, request, response, std::move(f));
}

void Stock::Stub::async::GetRecentSearch(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRecentSearch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CodeList>* Stock::Stub::PrepareAsyncGetRecentSearchRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::stock_api::CodeList, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRecentSearch_, context, request);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CodeList>* Stock::Stub::AsyncGetRecentSearchRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRecentSearchRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::GetViList(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::stock_api::CodeList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::stock_api::CodeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetViList_, context, request, response);
}

void Stock::Stub::async::GetViList(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::stock_api::CodeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetViList_, context, request, response, std::move(f));
}

void Stock::Stub::async::GetViList(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetViList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CodeList>* Stock::Stub::PrepareAsyncGetViListRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::stock_api::CodeList, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetViList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CodeList>* Stock::Stub::AsyncGetViListRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetViListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::GetStrategyList(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::stock_api::CodeList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::stock_api::CodeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetStrategyList_, context, request, response);
}

void Stock::Stub::async::GetStrategyList(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::stock_api::CodeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStrategyList_, context, request, response, std::move(f));
}

void Stock::Stub::async::GetStrategyList(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStrategyList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CodeList>* Stock::Stub::PrepareAsyncGetStrategyListRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::stock_api::CodeList, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetStrategyList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::stock_api::CodeList>* Stock::Stub::AsyncGetStrategyListRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetStrategyListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::SetStrategyList(::grpc::ClientContext* context, const ::stock_api::CodeList& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::CodeList, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetStrategyList_, context, request, response);
}

void Stock::Stub::async::SetStrategyList(::grpc::ClientContext* context, const ::stock_api::CodeList* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::CodeList, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetStrategyList_, context, request, response, std::move(f));
}

void Stock::Stub::async::SetStrategyList(::grpc::ClientContext* context, const ::stock_api::CodeList* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetStrategyList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncSetStrategyListRaw(::grpc::ClientContext* context, const ::stock_api::CodeList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::stock_api::CodeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetStrategyList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncSetStrategyListRaw(::grpc::ClientContext* context, const ::stock_api::CodeList& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetStrategyListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::stock_api::StockCodeQuery>* Stock::Stub::ListenCurrentStockRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::stock_api::StockCodeQuery>::Create(channel_.get(), rpcmethod_ListenCurrentStock_, context, request);
}

void Stock::Stub::async::ListenCurrentStock(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::stock_api::StockCodeQuery>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::stock_api::StockCodeQuery>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenCurrentStock_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::StockCodeQuery>* Stock::Stub::AsyncListenCurrentStockRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::stock_api::StockCodeQuery>::Create(channel_.get(), cq, rpcmethod_ListenCurrentStock_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::StockCodeQuery>* Stock::Stub::PrepareAsyncListenCurrentStockRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::stock_api::StockCodeQuery>::Create(channel_.get(), cq, rpcmethod_ListenCurrentStock_, context, request, false, nullptr);
}

::grpc::ClientReader< ::stock_api::ListType>* Stock::Stub::ListenListChangedRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::stock_api::ListType>::Create(channel_.get(), rpcmethod_ListenListChanged_, context, request);
}

void Stock::Stub::async::ListenListChanged(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::stock_api::ListType>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::stock_api::ListType>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenListChanged_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::ListType>* Stock::Stub::AsyncListenListChangedRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::stock_api::ListType>::Create(channel_.get(), cq, rpcmethod_ListenListChanged_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::ListType>* Stock::Stub::PrepareAsyncListenListChangedRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::stock_api::ListType>::Create(channel_.get(), cq, rpcmethod_ListenListChanged_, context, request, false, nullptr);
}

::grpc::ClientReader< ::stock_api::BrokerSummary>* Stock::Stub::ListenBrokerSummaryRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::stock_api::BrokerSummary>::Create(channel_.get(), rpcmethod_ListenBrokerSummary_, context, request);
}

void Stock::Stub::async::ListenBrokerSummary(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::stock_api::BrokerSummary>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::stock_api::BrokerSummary>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenBrokerSummary_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::BrokerSummary>* Stock::Stub::AsyncListenBrokerSummaryRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::stock_api::BrokerSummary>::Create(channel_.get(), cq, rpcmethod_ListenBrokerSummary_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::BrokerSummary>* Stock::Stub::PrepareAsyncListenBrokerSummaryRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::stock_api::BrokerSummary>::Create(channel_.get(), cq, rpcmethod_ListenBrokerSummary_, context, request, false, nullptr);
}

::grpc::ClientReader< ::stock_api::BrokerMinuteTick>* Stock::Stub::ListenBrokerMinuteTickRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::stock_api::BrokerMinuteTick>::Create(channel_.get(), rpcmethod_ListenBrokerMinuteTick_, context, request);
}

void Stock::Stub::async::ListenBrokerMinuteTick(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::stock_api::BrokerMinuteTick>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::stock_api::BrokerMinuteTick>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenBrokerMinuteTick_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::BrokerMinuteTick>* Stock::Stub::AsyncListenBrokerMinuteTickRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::stock_api::BrokerMinuteTick>::Create(channel_.get(), cq, rpcmethod_ListenBrokerMinuteTick_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::BrokerMinuteTick>* Stock::Stub::PrepareAsyncListenBrokerMinuteTickRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::stock_api::BrokerMinuteTick>::Create(channel_.get(), cq, rpcmethod_ListenBrokerMinuteTick_, context, request, false, nullptr);
}

::grpc::ClientReader< ::stock_api::CybosTickData>* Stock::Stub::ListenCybosTickDataRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::stock_api::CybosTickData>::Create(channel_.get(), rpcmethod_ListenCybosTickData_, context, request);
}

void Stock::Stub::async::ListenCybosTickData(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::stock_api::CybosTickData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::stock_api::CybosTickData>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenCybosTickData_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::CybosTickData>* Stock::Stub::AsyncListenCybosTickDataRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::stock_api::CybosTickData>::Create(channel_.get(), cq, rpcmethod_ListenCybosTickData_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::CybosTickData>* Stock::Stub::PrepareAsyncListenCybosTickDataRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::stock_api::CybosTickData>::Create(channel_.get(), cq, rpcmethod_ListenCybosTickData_, context, request, false, nullptr);
}

::grpc::ClientReader< ::stock_api::CybosBidAskTickData>* Stock::Stub::ListenCybosBidAskRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::stock_api::CybosBidAskTickData>::Create(channel_.get(), rpcmethod_ListenCybosBidAsk_, context, request);
}

void Stock::Stub::async::ListenCybosBidAsk(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::stock_api::CybosBidAskTickData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::stock_api::CybosBidAskTickData>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenCybosBidAsk_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::CybosBidAskTickData>* Stock::Stub::AsyncListenCybosBidAskRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::stock_api::CybosBidAskTickData>::Create(channel_.get(), cq, rpcmethod_ListenCybosBidAsk_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::CybosBidAskTickData>* Stock::Stub::PrepareAsyncListenCybosBidAskRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::stock_api::CybosBidAskTickData>::Create(channel_.get(), cq, rpcmethod_ListenCybosBidAsk_, context, request, false, nullptr);
}

::grpc::ClientReader< ::google::protobuf::Timestamp>* Stock::Stub::ListenCurrentTimeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::google::protobuf::Timestamp>::Create(channel_.get(), rpcmethod_ListenCurrentTime_, context, request);
}

void Stock::Stub::async::ListenCurrentTime(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::google::protobuf::Timestamp>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::google::protobuf::Timestamp>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenCurrentTime_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::google::protobuf::Timestamp>* Stock::Stub::AsyncListenCurrentTimeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::google::protobuf::Timestamp>::Create(channel_.get(), cq, rpcmethod_ListenCurrentTime_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::google::protobuf::Timestamp>* Stock::Stub::PrepareAsyncListenCurrentTimeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::google::protobuf::Timestamp>::Create(channel_.get(), cq, rpcmethod_ListenCurrentTime_, context, request, false, nullptr);
}

::grpc::ClientReader< ::stock_api::CybosSubjectTickData>* Stock::Stub::ListenCybosSubjectRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::stock_api::CybosSubjectTickData>::Create(channel_.get(), rpcmethod_ListenCybosSubject_, context, request);
}

void Stock::Stub::async::ListenCybosSubject(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::stock_api::CybosSubjectTickData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::stock_api::CybosSubjectTickData>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenCybosSubject_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::CybosSubjectTickData>* Stock::Stub::AsyncListenCybosSubjectRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::stock_api::CybosSubjectTickData>::Create(channel_.get(), cq, rpcmethod_ListenCybosSubject_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::CybosSubjectTickData>* Stock::Stub::PrepareAsyncListenCybosSubjectRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::stock_api::CybosSubjectTickData>::Create(channel_.get(), cq, rpcmethod_ListenCybosSubject_, context, request, false, nullptr);
}

::grpc::ClientReader< ::stock_api::CybosStockAlarm>* Stock::Stub::ListenCybosAlarmRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::stock_api::CybosStockAlarm>::Create(channel_.get(), rpcmethod_ListenCybosAlarm_, context, request);
}

void Stock::Stub::async::ListenCybosAlarm(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::stock_api::CybosStockAlarm>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::stock_api::CybosStockAlarm>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenCybosAlarm_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::CybosStockAlarm>* Stock::Stub::AsyncListenCybosAlarmRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::stock_api::CybosStockAlarm>::Create(channel_.get(), cq, rpcmethod_ListenCybosAlarm_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::CybosStockAlarm>* Stock::Stub::PrepareAsyncListenCybosAlarmRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::stock_api::CybosStockAlarm>::Create(channel_.get(), cq, rpcmethod_ListenCybosAlarm_, context, request, false, nullptr);
}

::grpc::ClientReader< ::stock_api::SimulationStatus>* Stock::Stub::ListenSimulationStatusChangedRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::stock_api::SimulationStatus>::Create(channel_.get(), rpcmethod_ListenSimulationStatusChanged_, context, request);
}

void Stock::Stub::async::ListenSimulationStatusChanged(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::stock_api::SimulationStatus>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::stock_api::SimulationStatus>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenSimulationStatusChanged_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::SimulationStatus>* Stock::Stub::AsyncListenSimulationStatusChangedRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::stock_api::SimulationStatus>::Create(channel_.get(), cq, rpcmethod_ListenSimulationStatusChanged_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::SimulationStatus>* Stock::Stub::PrepareAsyncListenSimulationStatusChangedRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::stock_api::SimulationStatus>::Create(channel_.get(), cq, rpcmethod_ListenSimulationStatusChanged_, context, request, false, nullptr);
}

::grpc::ClientReaderWriter< ::stock_api::SimulationMsg, ::google::protobuf::Empty>* Stock::Stub::SimulationDataRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::stock_api::SimulationMsg, ::google::protobuf::Empty>::Create(channel_.get(), rpcmethod_SimulationData_, context);
}

void Stock::Stub::async::SimulationData(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::stock_api::SimulationMsg,::google::protobuf::Empty>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::stock_api::SimulationMsg,::google::protobuf::Empty>::Create(stub_->channel_.get(), stub_->rpcmethod_SimulationData_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::stock_api::SimulationMsg, ::google::protobuf::Empty>* Stock::Stub::AsyncSimulationDataRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::stock_api::SimulationMsg, ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SimulationData_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::stock_api::SimulationMsg, ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncSimulationDataRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::stock_api::SimulationMsg, ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SimulationData_, context, false, nullptr);
}

::grpc::ClientReader< ::stock_api::SimulationOperation>* Stock::Stub::ListenSimulationOperationRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::stock_api::SimulationOperation>::Create(channel_.get(), rpcmethod_ListenSimulationOperation_, context, request);
}

void Stock::Stub::async::ListenSimulationOperation(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::stock_api::SimulationOperation>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::stock_api::SimulationOperation>::Create(stub_->channel_.get(), stub_->rpcmethod_ListenSimulationOperation_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::stock_api::SimulationOperation>* Stock::Stub::AsyncListenSimulationOperationRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::stock_api::SimulationOperation>::Create(channel_.get(), cq, rpcmethod_ListenSimulationOperation_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::stock_api::SimulationOperation>* Stock::Stub::PrepareAsyncListenSimulationOperationRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::stock_api::SimulationOperation>::Create(channel_.get(), cq, rpcmethod_ListenSimulationOperation_, context, request, false, nullptr);
}

::grpc::Status Stock::Stub::StartSimulation(::grpc::ClientContext* context, const ::stock_api::SimulationOperation& request, ::stock_api::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::SimulationOperation, ::stock_api::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartSimulation_, context, request, response);
}

void Stock::Stub::async::StartSimulation(::grpc::ClientContext* context, const ::stock_api::SimulationOperation* request, ::stock_api::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::SimulationOperation, ::stock_api::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartSimulation_, context, request, response, std::move(f));
}

void Stock::Stub::async::StartSimulation(::grpc::ClientContext* context, const ::stock_api::SimulationOperation* request, ::stock_api::Bool* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartSimulation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::Bool>* Stock::Stub::PrepareAsyncStartSimulationRaw(::grpc::ClientContext* context, const ::stock_api::SimulationOperation& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::stock_api::Bool, ::stock_api::SimulationOperation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartSimulation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::stock_api::Bool>* Stock::Stub::AsyncStartSimulationRaw(::grpc::ClientContext* context, const ::stock_api::SimulationOperation& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartSimulationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::StopSimulation(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopSimulation_, context, request, response);
}

void Stock::Stub::async::StopSimulation(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopSimulation_, context, request, response, std::move(f));
}

void Stock::Stub::async::StopSimulation(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopSimulation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncStopSimulationRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopSimulation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncStopSimulationRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopSimulationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::SetSimulationStatus(::grpc::ClientContext* context, const ::stock_api::SimulationStatus& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::stock_api::SimulationStatus, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSimulationStatus_, context, request, response);
}

void Stock::Stub::async::SetSimulationStatus(::grpc::ClientContext* context, const ::stock_api::SimulationStatus* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::stock_api::SimulationStatus, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSimulationStatus_, context, request, response, std::move(f));
}

void Stock::Stub::async::SetSimulationStatus(::grpc::ClientContext* context, const ::stock_api::SimulationStatus* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSimulationStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::PrepareAsyncSetSimulationStatusRaw(::grpc::ClientContext* context, const ::stock_api::SimulationStatus& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::stock_api::SimulationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSimulationStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Stock::Stub::AsyncSetSimulationStatusRaw(::grpc::ClientContext* context, const ::stock_api::SimulationStatus& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSimulationStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Stock::Stub::GetSimulationStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::stock_api::SimulationStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::stock_api::SimulationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSimulationStatus_, context, request, response);
}

void Stock::Stub::async::GetSimulationStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::SimulationStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::stock_api::SimulationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSimulationStatus_, context, request, response, std::move(f));
}

void Stock::Stub::async::GetSimulationStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::stock_api::SimulationStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSimulationStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::stock_api::SimulationStatus>* Stock::Stub::PrepareAsyncGetSimulationStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::stock_api::SimulationStatus, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSimulationStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::stock_api::SimulationStatus>* Stock::Stub::AsyncGetSimulationStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSimulationStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

Stock::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->SayHello(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockQuery, ::stock_api::CybosDayDatas, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::StockQuery* req,
             ::stock_api::CybosDayDatas* resp) {
               return service->GetDayData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockQuery, ::stock_api::CybosDayDatas, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::StockQuery* req,
             ::stock_api::CybosDayDatas* resp) {
               return service->GetMinuteData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockCodeQuery, ::stock_api::CybosDayDatas, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::StockCodeQuery* req,
             ::stock_api::CybosDayDatas* resp) {
               return service->GetTodayMinuteData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::PastMinuteQuery, ::stock_api::CybosDayDatas, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::PastMinuteQuery* req,
             ::stock_api::CybosDayDatas* resp) {
               return service->GetPastMinuteData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::CodeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::stock_api::CodeList* resp) {
               return service->GetSubscribeCodes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::Balance, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::stock_api::Balance* resp) {
               return service->GetBalance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::OrderMsg, ::stock_api::CybosOrderReturn, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::OrderMsg* req,
             ::stock_api::CybosOrderReturn* resp) {
               return service->OrderStock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::OrderMsg, ::stock_api::CybosOrderReturn, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::OrderMsg* req,
             ::stock_api::CybosOrderReturn* resp) {
               return service->ChangeOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::OrderMsg, ::stock_api::CybosOrderReturn, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::OrderMsg* req,
             ::stock_api::CybosOrderReturn* resp) {
               return service->CancelOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockCodeQuery, ::stock_api::YearHighInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::StockCodeQuery* req,
             ::stock_api::YearHighInfo* resp) {
               return service->GetYearHigh(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockCodeQuery, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::StockCodeQuery* req,
             ::google::protobuf::Empty* resp) {
               return service->RequestCybosTickData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockCodeQuery, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::StockCodeQuery* req,
             ::google::protobuf::Empty* resp) {
               return service->RequestCybosBidAsk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockCodeQuery, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::StockCodeQuery* req,
             ::google::protobuf::Empty* resp) {
               return service->RequestCybosSubject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->RequestCybosAlarm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::TradeMsg, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::TradeMsg* req,
             ::google::protobuf::Empty* resp) {
               return service->RequestToTrader(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->RequestCybosTradeResult(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::OrderResult, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::OrderResult* req,
             ::google::protobuf::Empty* resp) {
               return service->ReportOrderResult(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockCodeQuery, ::stock_api::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::StockCodeQuery* req,
             ::stock_api::Bool* resp) {
               return service->IsKospi(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::ViPriceInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::ViPriceInfo* req,
             ::google::protobuf::Empty* resp) {
               return service->SetViPriceInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockCodeQuery, ::stock_api::Prices, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::StockCodeQuery* req,
             ::stock_api::Prices* resp) {
               return service->GetViPrice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[21],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::TradeMsg>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::stock_api::TradeMsg>* writer) {
               return service->ListenTraderMsg(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[22],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::CybosOrderResult>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::stock_api::CybosOrderResult>* writer) {
               return service->ListenCybosOrderResult(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[23],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::OrderResult>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::stock_api::OrderResult>* writer) {
               return service->ListenOrderResult(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockCodeQuery, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::StockCodeQuery* req,
             ::google::protobuf::Empty* resp) {
               return service->SetCurrentStock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Timestamp, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Timestamp* req,
             ::google::protobuf::Empty* resp) {
               return service->SetCurrentDateTime(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockCodeQuery, ::stock_api::CompanyName, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::StockCodeQuery* req,
             ::stock_api::CompanyName* resp) {
               return service->GetCompanyName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::CodeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::stock_api::CodeList* resp) {
               return service->GetFavoriteList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockCodeQuery, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::StockCodeQuery* req,
             ::google::protobuf::Empty* resp) {
               return service->AddFavorite(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockCodeQuery, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::StockCodeQuery* req,
             ::google::protobuf::Empty* resp) {
               return service->RemoveFavorite(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->ClearRecentList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Timestamp, ::stock_api::TopList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Timestamp* req,
             ::stock_api::TopList* resp) {
               return service->GetYesterdayTopAmountList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::CodeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::stock_api::CodeList* resp) {
               return service->GetYesterdayUpperLimitList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::CodeList, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::CodeList* req,
             ::google::protobuf::Empty* resp) {
               return service->SetTodayAmountRatioList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::CodeList, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::CodeList* req,
             ::google::protobuf::Empty* resp) {
               return service->SetTodayAmountMomentumList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::CodeList, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::CodeList* req,
             ::google::protobuf::Empty* resp) {
               return service->SetTodayAmountTopList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockCodeQuery, ::stock_api::BrokerSummary, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::StockCodeQuery* req,
             ::stock_api::BrokerSummary* resp) {
               return service->GetBrokerSummary(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::BrokerSummary, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::BrokerSummary* req,
             ::google::protobuf::Empty* resp) {
               return service->SetBrokerSummary(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::BrokerMinuteTick, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::BrokerMinuteTick* req,
             ::google::protobuf::Empty* resp) {
               return service->AddBrokerMinuteTick(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::StockCodeQuery, ::stock_api::BrokerMinuteTickList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::StockCodeQuery* req,
             ::stock_api::BrokerMinuteTickList* resp) {
               return service->GetBrokerMinuteTick(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::TodayTopOption, ::stock_api::CodeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::TodayTopOption* req,
             ::stock_api::CodeList* resp) {
               return service->GetTodayTopAmountList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::CodeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::stock_api::CodeList* resp) {
               return service->GetRecentSearch(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::CodeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::stock_api::CodeList* resp) {
               return service->GetViList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::CodeList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::stock_api::CodeList* resp) {
               return service->GetStrategyList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[44],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::CodeList, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::CodeList* req,
             ::google::protobuf::Empty* resp) {
               return service->SetStrategyList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[45],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::StockCodeQuery>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::stock_api::StockCodeQuery>* writer) {
               return service->ListenCurrentStock(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[46],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::ListType>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::stock_api::ListType>* writer) {
               return service->ListenListChanged(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[47],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::BrokerSummary>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::stock_api::BrokerSummary>* writer) {
               return service->ListenBrokerSummary(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[48],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::BrokerMinuteTick>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::stock_api::BrokerMinuteTick>* writer) {
               return service->ListenBrokerMinuteTick(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[49],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::CybosTickData>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::stock_api::CybosTickData>* writer) {
               return service->ListenCybosTickData(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[50],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::CybosBidAskTickData>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::stock_api::CybosBidAskTickData>* writer) {
               return service->ListenCybosBidAsk(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[51],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::google::protobuf::Timestamp>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::google::protobuf::Timestamp>* writer) {
               return service->ListenCurrentTime(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[52],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::CybosSubjectTickData>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::stock_api::CybosSubjectTickData>* writer) {
               return service->ListenCybosSubject(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[53],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::CybosStockAlarm>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::stock_api::CybosStockAlarm>* writer) {
               return service->ListenCybosAlarm(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[54],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::SimulationStatus>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::stock_api::SimulationStatus>* writer) {
               return service->ListenSimulationStatusChanged(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[55],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Stock::Service, ::stock_api::SimulationMsg, ::google::protobuf::Empty>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::google::protobuf::Empty,
             ::stock_api::SimulationMsg>* stream) {
               return service->SimulationData(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[56],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::SimulationOperation>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::stock_api::SimulationOperation>* writer) {
               return service->ListenSimulationOperation(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[57],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::SimulationOperation, ::stock_api::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::SimulationOperation* req,
             ::stock_api::Bool* resp) {
               return service->StartSimulation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[58],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->StopSimulation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[59],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::stock_api::SimulationStatus, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::stock_api::SimulationStatus* req,
             ::google::protobuf::Empty* resp) {
               return service->SetSimulationStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Stock_method_names[60],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Stock::Service, ::google::protobuf::Empty, ::stock_api::SimulationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Stock::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::stock_api::SimulationStatus* resp) {
               return service->GetSimulationStatus(ctx, req, resp);
             }, this)));
}

Stock::Service::~Service() {
}

::grpc::Status Stock::Service::SayHello(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetDayData(::grpc::ServerContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetMinuteData(::grpc::ServerContext* context, const ::stock_api::StockQuery* request, ::stock_api::CybosDayDatas* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetTodayMinuteData(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::CybosDayDatas* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetPastMinuteData(::grpc::ServerContext* context, const ::stock_api::PastMinuteQuery* request, ::stock_api::CybosDayDatas* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetSubscribeCodes(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetBalance(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::stock_api::Balance* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::OrderStock(::grpc::ServerContext* context, const ::stock_api::OrderMsg* request, ::stock_api::CybosOrderReturn* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ChangeOrder(::grpc::ServerContext* context, const ::stock_api::OrderMsg* request, ::stock_api::CybosOrderReturn* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::CancelOrder(::grpc::ServerContext* context, const ::stock_api::OrderMsg* request, ::stock_api::CybosOrderReturn* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetYearHigh(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::YearHighInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::RequestCybosTickData(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::RequestCybosBidAsk(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::RequestCybosSubject(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::RequestCybosAlarm(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::RequestToTrader(::grpc::ServerContext* context, const ::stock_api::TradeMsg* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::RequestCybosTradeResult(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ReportOrderResult(::grpc::ServerContext* context, const ::stock_api::OrderResult* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::IsKospi(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::SetViPriceInfo(::grpc::ServerContext* context, const ::stock_api::ViPriceInfo* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetViPrice(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::Prices* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenTraderMsg(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::stock_api::TradeMsg>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenCybosOrderResult(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::stock_api::CybosOrderResult>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenOrderResult(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::stock_api::OrderResult>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::SetCurrentStock(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::SetCurrentDateTime(::grpc::ServerContext* context, const ::google::protobuf::Timestamp* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetCompanyName(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::CompanyName* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetFavoriteList(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::AddFavorite(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::RemoveFavorite(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ClearRecentList(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetYesterdayTopAmountList(::grpc::ServerContext* context, const ::google::protobuf::Timestamp* request, ::stock_api::TopList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetYesterdayUpperLimitList(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::SetTodayAmountRatioList(::grpc::ServerContext* context, const ::stock_api::CodeList* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::SetTodayAmountMomentumList(::grpc::ServerContext* context, const ::stock_api::CodeList* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::SetTodayAmountTopList(::grpc::ServerContext* context, const ::stock_api::CodeList* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetBrokerSummary(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::BrokerSummary* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::SetBrokerSummary(::grpc::ServerContext* context, const ::stock_api::BrokerSummary* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::AddBrokerMinuteTick(::grpc::ServerContext* context, const ::stock_api::BrokerMinuteTick* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetBrokerMinuteTick(::grpc::ServerContext* context, const ::stock_api::StockCodeQuery* request, ::stock_api::BrokerMinuteTickList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetTodayTopAmountList(::grpc::ServerContext* context, const ::stock_api::TodayTopOption* request, ::stock_api::CodeList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetRecentSearch(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetViList(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetStrategyList(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::stock_api::CodeList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::SetStrategyList(::grpc::ServerContext* context, const ::stock_api::CodeList* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenCurrentStock(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::stock_api::StockCodeQuery>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenListChanged(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::stock_api::ListType>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenBrokerSummary(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::stock_api::BrokerSummary>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenBrokerMinuteTick(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::stock_api::BrokerMinuteTick>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenCybosTickData(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::stock_api::CybosTickData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenCybosBidAsk(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::stock_api::CybosBidAskTickData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenCurrentTime(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::google::protobuf::Timestamp>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenCybosSubject(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::stock_api::CybosSubjectTickData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenCybosAlarm(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::stock_api::CybosStockAlarm>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenSimulationStatusChanged(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::stock_api::SimulationStatus>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::SimulationData(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::protobuf::Empty, ::stock_api::SimulationMsg>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::ListenSimulationOperation(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::stock_api::SimulationOperation>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::StartSimulation(::grpc::ServerContext* context, const ::stock_api::SimulationOperation* request, ::stock_api::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::StopSimulation(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::SetSimulationStatus(::grpc::ServerContext* context, const ::stock_api::SimulationStatus* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Stock::Service::GetSimulationStatus(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::stock_api::SimulationStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace stock_api

